.. _template-apps:

=============
Template Apps
=============

.. default-domain:: mongodb

.. contents:: On this page
   :class: singlecol
   :backlinks: none
   :depth: 2
   :local:

Overview
--------

You can get up and running with an Atlas App Services App using one of our premade template apps.
Template apps bring together many of the building blocks available in Atlas App Services
and start you off with a prebuilt app that you can customize. You can create 
an app based on a template using any of the following interfaces:

- :ref:`App Services UI <create-a-realm-app>`
- :ref:`{+cli+} <create-app-cli>`
- :ref:`Admin API <create-app-api>`

.. button:: Check out the Template Apps
   :uri: https://www.mongodb.com/realm/register?tck=docs_CTA_realm_template_apps

.. _create-template-app:

Create a Template App
---------------------

You can create a template app using the UI on the Atlas App Services site, 
the Realm CLI, or Admin API. Choose the tab for whichever 
option is most convenient for you.

.. tabs::
   
   .. tab:: Atlas App Services UI
      :tabid: ui
      
      Follow the procedure described in the 
      :ref:`create-a-realm-app` guide, and select
      the :guilabel:`Create App from Template` tab in the :guilabel:`Create a new App` step. 

   .. tab:: {+cli+}
      :tabid: cli

      Follow the procedure described in the 
      :ref:`Create an App with {+cli+} <create-app-cli>` guide and include
      the ``template`` flag followed by one of the template app IDs: 
      
      .. code-block:: shell
         
         realm-cli apps create -n "<App Name>" --template "<Chosen Template App ID>"

   .. tab:: Admin API
      :tabid: api

      Follow the procedure described in the 
      :ref:`Create an App with App Services API <create-app-api>` guide, and select
      the :guilabel:`Template` tab in the :guilabel:`Create a new App` step. 
      When calling the create endpoint you should include a request body that looks like this:

      .. code-block:: json
         
         { 
            "name": "<AppName>",
            "template_id": "<Chosen Template App ID>",
            "data_source": {
               "name": "mongodb-atlas",
               "type": "mongodb-atlas",
               "config": {
                  "clusterName": "<Name Of Existing Cluster>"
               }
            }
         }

.. _explore-template-app:

Explore a Template App
----------------------

When you create a template app, the UI includes a
:guilabel:`Welcome to Your Application` section to help you get started
with services and front-end code. You can:

1. Learn more about what your chosen template app includes.

2. Follow on-screen guides to customize your app.

3. Use the {+cli-bin+} to download the code for the template app so you can build the front end
   (if one is included) and interact with the app through the CLI:

   - If you already have {+cli-bin+} set up, you can use the following {+cli-bin+} :ref:`pull command <realm-cli-pull>` to download the code:

   .. code-block:: shell
      
      realm-cli pull --remote <App ID> --template <Template App ID>
  
   - Otherwise, click the :guilabel:`Pull front-end code` button in the :guilabel:`Welcome to Your Application` section and follow the instructions that display in the UI:
  
   .. figure:: /images/welcome-template-app.png
      :alt: Welcome section for template apps
      :figwidth: 750px
      :width: 750px

.. _template-apps-list:

Template Apps Available
-----------------------

.. list-table::
   :header-rows: 1
   :widths: 25 25 50
   
   * - ID
     - Name
     - Description

   * - ``android.kotlin.todo``
     - Java SDK + Atlas Device Sync Starter (Partition-Based Sync)
     - Android to-do list app written in Kotlin using the :ref:`Realm Java SDK <java-intro>`. Syncs local data to MongoDB Atlas using Device Sync with :ref:`Partition-Based Sync <partition-based-sync>`.

   * - ``flex-sync-guides.add-collaborators``
     - Flexible Sync Permissions Guide: 'Add Collaborators' Demo
     - Demo with Node.js client and App Services App that implements the
       :ref:`Dynamic Collaboration permissions strategy <dynamic-collaboration>`
       for Device Sync using Flexible Sync.

   * - ``flex-sync-guides.restricted-feed``
     - Flexible Sync Permissions Guide: 'Restricted Feed' Demo
     - Demo with Node.js client and App Services App that implements the
       :ref:`Restricted News Feed permissions strategy <restricted-news-feed>`
       for Device Sync using Flexible Sync.

   * - ``flex-sync-guides.tiered``
     - Flexible Sync Permissions Guide: 'Tiered' Demo
     - Demo with Node.js client and App Services App that implements the
       :ref:`Tiered Privileges permissions strategy <tiered-privileges>`
       for Device Sync using Flexible Sync.

   * - ``flutter.todo.flex``
     - Realm Flutter SDK + Atlas Device Sync Starter (Flexible Sync)
     - Cross-platform to-do list app for Android, iOS, Windows, MacOS, and Linux written in Dart using the :ref:`Realm Flutter SDK <flutter-intro>`. Syncs local data to MongoDB Atlas using Device Sync with :ref:`Flexible Sync <flexible-sync>`. 

   * - ``ios.swift.todo``
     - Swift + Atlas Device Sync Starter (Partition-Based Sync)
     - iOS to-do list app using UIKit and the :ref:`Realm Swift SDK <ios-intro>`. Syncs local data to MongoDB Atlas using Device Sync with :ref:`Partition-Based Sync <partition-based-sync>`.

   * - ``kotlin.todo.flex``
     - Kotlin SDK + Atlas Device Sync Starter (Flexible Sync)
     - Android to-do list app written in Kotlin using the :ref:`Realm Kotlin SDK <kotlin-intro>`. Syncs local data to MongoDB Atlas using Device Sync with :ref:`Flexible Sync <flexible-sync>`.

   * - ``react-native.todo``
     - React Native + Atlas Device Sync Starter (Partition-Based Sync) 
     - Cross-platform to-do list mobile app using the :ref:`Realm JS SDK <react-native-intro>` and the :npm:`@realm/react <package/@realm/react>` library. Syncs local data to MongoDB Atlas using Device Sync with :ref:`Partition-Based Sync <partition-based-sync>`.

   * - ``react-native.todo.flex``
     - React Native + Atlas Device Sync Starter (Flexible Sync)
     - Cross-platform to-do list mobile app using the :ref:`Realm JS SDK <react-native-intro>` and the :npm:`@realm/react <package/@realm/react>` library. Syncs local data to MongoDB Atlas using Device Sync with :ref:`Flexible Sync <flexible-sync>`.

   * - ``swiftui.todo``
     - SwiftUI + Atlas Device Sync Starter (Partition-Based Sync)
     - iOS to-do list app using SwiftUI and the :ref:`Realm Swift SDK <ios-intro>`. Syncs local data to MongoDB Atlas using Device Sync with :ref:`Partition-Based Sync <partition-based-sync>`.

   * - ``swiftui.todo.flex``
     - SwiftUI + Atlas Device Sync Starter (Flexible Sync)
     - iOS to-do list app using SwiftUI and the :ref:`Realm Swift SDK <ios-intro>`. Syncs local data to MongoDB Atlas using Device Sync with :ref:`Flexible Sync <flexible-sync>`.

   * - ``sync.todo``
     - Flexible Sync Todo App Backend
     - Backend-only App that contains the configuration used by the ``<Language or Framework>.todo.flex`` template apps.

   * - ``triggers``
     - Manage Database Views
     - Event-driven :ref:`Database Trigger <database-trigger>` template to update a view in a separate collection. Does *not* include a front-end app.

   * - ``web.mql.todo``
     - Realm Web SDK + React Starter
     - Hosted to-do list web app using the :ref:`Realm Web SDK <web-intro>`.

   * - ``web.graphql.todo``
     - Realm Web SDK + Atlas GraphQL API + React Starter
     - Hosted to-do list app using the :ref:`Realm Web SDK <web-intro>` and the
       :ref:`Atlas GraphQL API <graphql-api>`.

   * - ``xamarin.todo``
     - Xamarin + Atlas Device Sync Starter (Partition-Based Sync) 
     - Cross-platform to-do list mobile app using the :ref:`Realm C# SDK <dotnet-intro>`. Syncs local data to MongoDB Atlas using Device Sync with :ref:`Partition-Based Sync <partition-based-sync>`.

   * - ``xamarin.todo.flex``
     - Xamarin + Atlas Device Sync Starter (Flexible Sync)
     - Cross-platform to-do list mobile app using the :ref:`Realm C# SDK <dotnet-intro>`. Syncs local data to MongoDB Atlas using Device Sync with :ref:`Flexible Sync <flexible-sync>`.
