.. _roles:
.. _permissions:

======================
Role-based Permissions
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/non-sync-rules-note.rst

Overview
--------

You secure your App's data by defining roles that are automatically
assigned to incoming user requests. Each role has specific data
access permissions and dynamic conditions that determine when the role
applies.

Permissions
-----------

A **permission** is a status that Atlas App Services assigns to users 
to control what they can and cannot do in your app. App Services uses both 
document-level and field-level permissions:

- :ref:`Document-level permissions <document-level-permissions>` 
  control whether a user can insert, delete, modify,
  and search for a specific document in a MongoDB collection. 

- :ref:`Field-level permissions <field-level-permissions>`
  control whether a user can read or write the data in
  specific fields of a document. 

.. _document-level-permissions:

Document-Level Permissions
~~~~~~~~~~~~~~~~~~~~~~~~~~

A role's document-level permissions determine which actions that affect
the entire document can be performed. These permissions always apply to the 
entire document regardless of the content. A role can have the
following document-level permissions:

- **Insert**: You can insert new documents.
- **Delete**: You can delete existing documents.
- **Search**: You can search for the document using :ref:`Atlas Search <fts-top-ref>`.

.. _field-level-permissions:

Field-Level Permissions
~~~~~~~~~~~~~~~~~~~~~~~

A role's field-level permissions determine whether a user can read or
write fields within the document. These permissions only affect the 
field they apply to, so a user can have read or write access to only 
a subset of the entire document.

You can define field-level permissions for specific fields and
default read/write permissions for any additional fields that you 
don't explicitly define.

Roles
-----

A **role** is a named set of permissions that a user can have for documents in a
MongoDB collection. Each role represents a possible relationship between a user
and an individual document. A user can have only one role per document in
a request.

You define the roles a user can have for the documents in a collection. App Services
automatically assigns roles to the user at request time. Each role includes an
:ref:`Apply When expression <apply-when-expressions>` that determines when App Services 
should assign the role to a user and a set of document-level and field-level
permissions that apply to the role.

App Services only commits operations that a user is authorized to do based on their
assigned roles. If a role does not have permission to read a document or some of
its fields, App Services omits the document or fields from the results.

.. example::

   Consider a collection named ``employees`` where each employee has their own
   document with all of their employment data. This collection might have two
   roles: **Employee** and **Manager**.

   - If a user requests their own document, their role is **Employee**. An
     employee can read and write their own data but can't create or delete their
     own documents.

   - If a user requests a document for someone whose name is listed in the
     user's ``manages`` arrays, their role is **Manager**. A manager can read
     and write their direct reports' data and can create and delete their
     documents.

   - If a user is neither an **Employee** nor a **Manager** for a given
     document, then they have no role and cannot read, write, or search that
     document.
   
   .. tabs::
      
      .. tab:: Roles
         :tabid: roles
         
         .. code-block:: json
            
            
            {
              "name": "Manager",
              "apply_when": { "email": "%%user.custom_data.manages" },
              "insert": true,
              "delete": true,
              "read": true,
              "write": true,
              "search": true,
              "fields": {},
              "additional_fields": {
                "read": true,
                "write": true
              }
            }
            {
              "name": "Employee",
              "apply_when": { "email": "%%user.data.email" },
              "insert": false,
              "delete": false,
              "read": true,
              "write": true,
              "search": true,
              "fields": {},
              "additional_fields": {
                "read": true,
                "write": true
              }
            }
      
      .. tab:: Employee Documents
         :tabid: documents
         
         .. code-block:: json
            
            {
              "_id": ObjectId(...),
              "employeeId": "0528",
              "name": "Phylis Lapin",
              "team": "sales",
              "email": "phylis.lapin@dundermifflin.com",
              "manages": []
            }
            {
              "_id": ObjectId(...),
              "employeeId": "0713",
              "name": "Stanley Hudson",
              "team": "sales",
              "email": "stanley.hudson@dundermifflin.com",
              "manages": []
            }
            {
              "_id": ObjectId(...),
              "employeeId": "0865",
              "name": "Andy Bernard",
              "team": "sales",
              "email": "andy.bernard@dundermifflin.com",
              "manages": [
                "phylis.lapin@dundermifflin.com",
                "stanley.hudson@dundermifflin.com"
              ]
            }

How App Services Assigns Roles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

App Services dynamically assigns roles for every request. For each document 
that matches the incoming query, the user is either assigned a separate role 
or no role.

First, your App evaluates and applies :ref:`filters <filters>` and then
runs the query.

.. example::
   
   The following request causes App Services to evaluate a role for every document in the
   ``restaurants`` collection where the ``city`` field is set to ``"Chicago"``:
   
   .. code-block:: javascript
      
      db.restaurants.updateMany(
        { "city": "Chicago" },
        { "$set": { "city": "Chicago, IL" } }
      );

For each document returned by the query, your App evaluates possible
roles in :ref:`role order <role-order>` and assigns the first applicable
role, if any. A role applies to a given document if its :ref:`Apply When expression 
<apply-when-expressions>` evaluates to ``true`` when run against
the document.

The set of roles that a user can use for a given request depends on the
collection they're accessing. If the collection has a set of
collection-level roles defined, then a user can use any of those roles.
If there are no collection-level rules, the request falls back to the
data source's default roles.

.. example::
   
   An employee will always be on their own team, so both the **Employee** and
   **Teammate** roles apply to them for their own document. However, they can
   use only one role, so we want to use **Employee** because it's more
   specific.
   
   To configure this, specify **Employee** earlier than **Teammate** in the
   collection's role definitions:
   
   .. tabs-realm-admin-interfaces:: 
      
      .. tab::
         :tabid: ui
         
         .. figure:: /images/role-order.png
            :alt: Role definitions that specify Manager first, Employee second, and Teammate third.
      
      .. tab::
         :tabid: cli
         
         .. code-block:: json
            
            {
              "database": "<Database Name>",
              "collection": "<Collection Name>",
              "roles": [
                { "name": "Manager", ... },
                { "name": "Employee", ... },
                { "name": "Teammate", ... }
              ]
            }

.. _apply-when-expressions:

Apply When Expressions
~~~~~~~~~~~~~~~~~~~~~~

A role's :guilabel:`Apply When` expression is a :ref:`rule expression
<expressions>` that determines when a given user has the role for a
specific document. The expression is evaluated for each document that an
incoming query matches.

You can use expression variables to make roles dynamic. For example, you
can use :json-expansion:`%%user` to refer to the specific user that
issued the request or :json-expansion:`%%root` to reference the current
document. This lets you customize your data access permissions on a
per-user, per-document basis.

.. _role-order:

Role Order
~~~~~~~~~~

The roles for a given collection each have a position that determines
the order in which they are evaluated and applied. Each role's apply
when expression is evaluated in role order until a role applies or no
roles remain.

A user can only have one role per document in a given query. Role order
determines which role applies in the event that multiple roles' apply
when expressions are true.

.. _define-roles-and-permissions:
.. _define-roles:

Define Roles and Permissions
----------------------------

A user can have only one role for each document, so each set of permissions 
requires you to define a named role that carries those permissions. The
roles and permissions that you define depend on your app's
data and requirements. To determine the best roles for a collection, consider your
data from the perspective of your app's users and what it might mean to them.

.. example::
   
   In addition to **Employee** and **Manager** roles, you might add a
   **Teammate** role to the ``employees`` collection to represent a user on the
   same team as the document's employee. Teammates can read each other's data
   but cannot modify it.
   
   .. code-block:: json
      
      {
        "name": "Teammate",
        "apply_when": { "team": "%%user.data.team" },
        "insert": false,
        "delete": false,
        "read": true,
        "write": false,
        "search": true,
        "fields": {},
        "additional_fields": {
          "read": true,
          "write": false
        }
      }

Procedure
~~~~~~~~~

You can configure your app's data access rules from the App Services UI or by
deploying configuration files with {+cli+}:

.. note::

   The following procedure requires a :ref:`linked MongoDB Atlas data source
   <data-sources>`. Roles and permissions :ref:`do not apply
   <data-federation-caveats>` to {+adf-datasource+}s.

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      .. procedure::

         .. step:: Navigate to the Rules Window

            Under :guilabel:`Data Access` in the left navigation menu, click :guilabel:`Rules`. 

         .. step:: Configure Roles for a Collection

            A. For the linked cluster that you want to define access permissions for,
               click the ellipsis :guilabel:`(...)` and select :guilabel:`Create a collection`.
            
            #. In the modal, enter the :guilabel:`Database Name` and 
               :guilabel:`Collection Name` of the MongoDB collection that you want to use.

            .. note:: 

               Alternatively, you can select :guilabel:`Default roles and filters` under
               the linked cluster to configure :ref:`default rules <default-rules>` 
               for the entire cluster.

         .. step:: Create a New Role

            To create a new role, click :guilabel:`Add role`. You can
            either start from scratch or use a preset role as a starting
            point.

         .. step:: Configure the Role

            A. Give the role a name. The name can be anything you want but
               must be unique within a given collection. Consider using names
               that describe the user (e.g. ``Admin``) and/or their
               relationship to the data (e.g. ``Owner``).

            #. Define the Role's :guilabel:`Apply When` Condition. 
               A role's :ref:`Apply when <apply-when-expressions>` condition 
               determines when a given user has the role for a given document.

            #. Define the role's :guilabel:`Document Permissions`. For more 
               information, see :ref:`document-level-permissions`. 

            #. Define the role's :guilabel:`Field Permissions`. For more 
               information, see :ref:`field-level-permissions`. 

         .. step:: Save the Role

            Save the role. Once you have finished defining roles for the collection, 
            App Services will immediately begin using the roles you
            defined for all incoming queries on the collection.

            .. note::

               If a collection has more than one role assigned, you can modify their 
               :ref:`role order <role-order>` by clicking the arrows on each role.

   .. tab::
      :tabid: cli
      
      .. procedure::

         .. step:: Pull the Latest Version of Your App

            To pull a local copy of the latest version of your app, run the following:

            .. code-block:: bash

                realm-cli pull --remote="<Your App ID>"
    
            .. tip::

               You can also download a copy of your application's configuration files from
               the :guilabel:`Deploy > Export App` screen in the App Services UI.

         .. step:: Add a Rule Configuration File

            To define :ref:`roles and filters <config-collection-rules>` for a collection, open 
            the ``rules.json`` configuration file within the collection's configuration directory.
            You can also define :ref:`default roles and filters <config-default-rules>` that 
            apply to any unconfigured collection.

            .. tip:: Scaffold the Collection

               If you haven't already defined rules or a schema for the collection, you
               need to manually create its configuration directory and ``schema.json``:

               .. code-block:: bash

                  # Create the collection's configuration directory
                  mkdir -p data_sources/<service>/<db>/<collection>
                  # Create the collection's schema file
                  echo '{}' >> data_sources/<service>/<db>/<collection>/rules.json

            The configuration file should have the following form:

            .. tabs::

                .. tab:: Collection Rules
                  :tabid: collection-rules

                  .. code-block:: json
                      :caption: /data_sources/<data source>/<database>/<collection>/rules.json
                      
                      {
                        "database": "<Database Name>",
                        "collection": "<Collection Name>",
                        "roles": [
                          {
                            "name": "<Role Name>",
                            "apply_when": {},
                            "insert": true,
                            "delete": true,
                            "search": true,
                            "fields": {
                              "myField": { "read": true, "write": true }
                            },
                            "additional_fields": { "read": true, "write": true }
                          }
                        ],
                        "filters": [
                          {
                            "name": "<Filter Name>",
                            "apply_when": {},
                            "query": {},
                            "projection": {}
                          }
                        ]
                      }

                .. tab:: Default Rules
                  :tabid: default-rules
                  
                  .. code-block:: json
                      :caption: /data_sources/<data source>/default_rule.json
                      
                      {
                        "roles": [
                          {
                            "name": "<Role Name>",
                            "apply_when": {},
                            "insert": true,
                            "delete": true,
                            "search": true,
                            "fields": {
                              "myField": { "read": true, "write": true }
                            },
                            "additional_fields": { "read": true, "write": true }
                        }
                        ],
                        "filters": [
                          {
                            "name": "<Filter Name>",
                            "apply_when": {},
                            "query": {},
                            "projection": {}
                          }
                        ]
                      }

         .. step:: Configure your Roles

            For each document in the ``roles`` array that you want to
            configure, configure the following fields:

            .. include:: /mongodb/tables/role-configuration.rst
      
         .. step:: Deploy your App

            Once you've defined and saved ``rules.json``, deploy your app.
            Realm CLI immediately deploys the new roles and permissions on push.
         
         .. code-block:: bash
            
            realm-cli push
