.. _configure-user-metadata-on-the-backend:

====================
Enable User Metadata
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Atlas App Services can read user metadata from authentication providers. Then, 
App Services exposes each user's data in a field of their :ref:`user 
object <user-objects>`. For example, you might want to access a user's name, 
email, birthday, or gender.

You can configure App Services to request metadata with the access token 
when users log in. You can access that data from the logged-in user's 
object with a client SDK.

Configuration
-------------

You can define the metadata to request when you configure authentication 
providers. Specify optional metadata fields that you want to access through 
the user's account. These metadata fields vary depending on provider.

.. list-table::
   :header-rows: 1

   * - Facebook
     - Google
     - Custom JWT

   * - - ``name``
       - ``first_name``
       - ``last_name``
       - ``picture``
       - ``gender``
       - ``birthday``
       - ``min_age``
       - ``max_age``
       - ``email``

     - - ``name``
       - ``first_name``
       - ``last_name``
       - ``picture``
       - ``email``

     - - Custom

Custom JWT
~~~~~~~~~~

:ref:`JWT authentication <custom-jwt-authentication>` metadata is completely 
customizable. You specify JWT authentication metadata to request when you 
configure it.

.. _enable-user-metadata-procedure:

Procedure
---------

.. tabs-realm-admin-interfaces::

   .. tab::
      :tabid: ui
      
      .. procedure::

         .. step:: Navigate to the Authentication Provider Configuration Screen

            You can configure and enable user metadata in the App Services UI. To
            get to the configuration page:

            - Click :guilabel:`Authentication` in the left navigation menu.
            - Select the :guilabel:`Authentication Providers` tab.
            - Press the :guilabel:`EDIT` button for the provider whose metadata
              you want to configure.

         .. step:: Configure User Metadata

            **Google or Facebook**

            Select the checkboxes next to the metadata fields you want to enable.

            .. figure:: /images/configure-user-metadata-google-facebook-realm-ui.png
               :alt: The checkboxes to enable user metadata fields in the App Services UI
               :width: 750px
               :lightbox:

            **Custom JWT Authentication**

            You can specify the metadata fields that your identity provider supports.
            After you press the :guilabel:`Add Field` button, define:

            - The path
            - The field name
            - Whether the field is optional or required

            For more details, see: :ref:`JWT metadata fields
            <custom-jwt-authentication-configuration-metadata-fields>`.

            .. figure:: /images/configure-user-metadata-custom-jwt-realm-ui.png
               :alt: Add metadata required/optional, path, and name in the App Services UI
               :width: 750px
               :lightbox:

            After you configure the metadata you want to access, press
            the :guilabel:`Save Draft` button.

         .. step:: Deploy the Updated Application

            After you update the metadata configuration, you must deploy your
            application. To deploy a draft application from the App Services UI:

            1. Click :guilabel:`Deploy` in the left navigation menu.

            2. Find the draft in the deployment history table and then click
               :guilabel:`Review & Deploy Changes`.

            3. Review the diff of changes and then click :guilabel:`Deploy`.

            Once the application successfully deploys, App Services begins to associate
            metadata with users. When a user logs in, App Services requests user
            permission to access the requested metadata. If the user approves,
            App Services exposes the data in that user's :ref:`user object
            <user-objects>`.

   .. tab::
      :tabid: cli
      
      .. procedure::

         .. step:: Pull the Latest Version of Your App

            To update your app with {+cli-bin+}, you need a local copy of its
            configuration files.

            To pull a local copy of the latest version of your app, run the following:

            .. code-block:: bash

               realm-cli pull --remote="<Your App ID>"

            .. tip::

               You can also download a copy of your application's configuration files from
               the App Services UI. Go to the :guilabel:`Deploy > Export App` screen from
               the App Dashboard.

         .. step:: Configure User Metadata

            You can find authentication provider :ref:`metadata_fields
            <config-auth-providers>` for your app in ``/auth/providers.json``.
            Update this array to request user metadata from the authentication provider.

            **Google or Facebook**

            This array resembles:

            .. code-block:: javascript
               :caption: /auth/providers.json

               { ...other config details...
                 "metadata_fields": [
                   {
                     "required": false,
                     "name": "name"
                   },
                   {
                     "required": false,
                     "name": "gender"
                   }
                 ]
               }

            **Custom JWT authentication**

            The metadata_fields array has an additional property, ``field_name``.
            In custom JWT authentication, ``name`` represents the path to the field.
            The ``field_name`` represents the name of the field.

            .. code-block:: javascript
               :caption: /auth/providers.json

               { ...other config details...
                 "metadata_fields": [
                   {
                     "required": true,
                     "name": "user.name",
                     "field_name": "name"
                   },
                   {
                     "required": false,
                     "name": "user.favoriteColor",
                     "field_name": "favoriteColor"
                   }
                 ]
               }

         .. step:: Deploy the Custom User Data Configuration

            Once you've configured custom user data, you can push the updated config to
            your remote app. {+cli+} immediately deploys the update on push.

            .. code-block:: bash

               realm-cli push --remote="<Your App ID>"

Access User Metadata from a Client Application
----------------------------------------------

Realm SDKs have different implementations for accessing user metadata in a client
application. Check out the details in the SDK documentation:

- :ref:`Realm Swift SDK <ios-read-user-metadata>`
- :ref:`Realm Flutter SDK <flutter-read-user-metadata>`
- :ref:`Realm .NET SDK <dotnet-read-user-metadata>`
- :ref:`Realm Node.js SDK <node-read-user-metadata>`
