.. _aws-eventbridge:

======================================
Send Trigger Events to AWS EventBridge
======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

MongoDB offers an `AWS Eventbridge
<https://aws.amazon.com/eventbridge/>`_ partner event source that lets
you send Atlas Trigger events to an event bus instead of
calling an Atlas Function. You can configure any Trigger to send events to
EventBridge.

All you need to send Trigger events to EventBridge is an AWS account ID.
This guide walks through finding your account ID, configuring the
Trigger, and associating the Trigger event source with an event bus.

.. note:: Official AWS Partner Event Source Guide
   
   This guide is based on Amazon's :aws-docs:`Receiving Events from a
   SaaS Partner
   </eventbridge/latest/userguide/create-partner-event-bus.html>`
   documentation.

Procedure
---------

.. note::

   The AWS put entry for an EventBridge trigger event must be smaller than 256 KB.
   
   :ref:`Learn how to reduce the size of your PutEvents entry in the Performance Optimization 
   section. <send-aws-eventbridge-performance-optimization>` 

.. procedure::

   .. step:: Begin Setup of the MongoDB Partner Event Source

      To send trigger events to AWS EventBridge, you need the :guilabel:`AWS
      account ID` of the account that should receive the events.
      Open the `Amazon EventBridge console
      <https://console.aws.amazon.com/events/>`_ and click
      :guilabel:`Partner event sources` in the navigation menu. Search for
      the :guilabel:`MongoDB` partner event source and then click
      :guilabel:`Set up`.

      On the :guilabel:`MongoDB` partner event source page, click
      :guilabel:`Copy` to copy your AWS account ID to the clipboard.

   .. step:: Configure the Trigger

      Once you have the :guilabel:`AWS account ID`, you can configure a
      trigger to send events to EventBridge.

      .. tabs-realm-admin-interfaces::

         .. tab::
            :tabid: ui

            In the App Services UI, create and configure a new :doc:`database
            trigger </triggers/database-triggers>`, :doc:`authentication
            trigger </triggers/authentication-triggers>`, or :doc:`scheduled
            trigger </triggers/scheduled-triggers>` and select the
            :guilabel:`EventBridge` event type.

            Paste in the :guilabel:`AWS Account ID` that you copied from
            EventBridge and select an AWS Region to send the trigger events
            to.

            .. figure:: /images/eventbridge-trigger-configuration.png
               :alt: The EventBridge input boxes in the trigger configuration.

            By default, triggers convert the BSON types in event objects into 
            standard JSON types. To preserve BSON type information, you can 
            serialize event objects into :manual:`Extended JSON format 
            </reference/mongodb-extended-json>` instead. Extended JSON preserves type 
            information at the expense of readability and interoperability.
            
            To enable Extended JSON, 
            click the :guilabel:`Enable Extended JSON` toggle in the 
            :guilabel:`Advanced (Optional)` section.

         .. tab::
            :tabid: cli

            Create a :ref:`trigger configuration file <legacy-appschema-triggers>`
            in the ``/triggers`` directory. Omit the ``function_name`` field
            and define an ``AWS_EVENTBRIDGE`` event processor.

            Set the ``account_id`` field to the :guilabel:`AWS Account ID`
            that you copied from EventBridge and set the ``region`` field to
            an AWS Region. 
            
            By default, triggers convert the BSON types in event objects into 
            standard JSON types. To preserve BSON type information, you can 
            serialize event objects into :manual:`Extended JSON format 
            </reference/mongodb-extended-json>` instead. Extended JSON preserves type 
            information at the expense of readability and interoperability.
            
            To enable Extended JSON, set the ``extended_json_enabled`` field to ``true``.

            The trigger configuration file should resemble the following:

            .. code-block:: json

               {
                 "name": "...",
                 "type": "...",
                 "event_processors": {
                    "AWS_EVENTBRIDGE": {
                        "config": {
                           "account_id": "<AWS Account ID>",
                           "region": "<AWS Region>",
                           "extended_json_enabled": <boolean>
                        }
                     }
                  }
               }

      .. note:: Supported AWS Regions

         For a full list of supported AWS regions, refer to Amazon's
         :aws-docs:`Receiving Events from a SaaS Partner
         </eventbridge/latest/userguide/create-partner-event-bus.html>`
         guide.


   .. step:: Associate the Trigger Event Source with an Event Bus

      Go back to the EventBridge console and choose Partner event sources in
      the navigation pane. In the :guilabel:`Partner event sources` table,
      find and select the :guilabel:`Pending` trigger source and then click
      :guilabel:`Associate with event bus`.

      On the :guilabel:`Associate with event bus` screen, define any
      required access permissions for other accounts and organizations and
      then click :guilabel:`Associate`.

      Once confirmed, the status of the trigger event source changes from
      :guilabel:`Pending` to :guilabel:`Active`, and the name of the event
      bus updates to match the event source name. You can now start creating
      rules that trigger on events from that partner event source. For more
      information, see :aws-docs:`Creating a Rule That Triggers on a SaaS Partner Event </eventbridge/latest/userguide/create-rule-partner-events.html>`.

.. _event_processor_example:

Example Event
-------------

The following object configures a trigger to send events to AWS
Eventbridge:

.. include:: /includes/event-processor-example.rst

.. _send-aws-eventbridge-performance-optimization:

Performance Optimization
------------------------

The AWS put entry for an EventBridge trigger event must be smaller than 256 KB. 

For more information, see the :aws:`AWS Documentation to calculate Amazon
PutEvents event entry size </eventbridge/latest/userguide/eb-putevent-size.html>`.

When using Database Triggers, the Project Expression can be useful reduce the document size  
before sending messages to EventBridge. 
This expression lets you include only specified fields, reducing document size.

:ref:`Learn more in the Database Trigger Project Expression documentation. 
<database-triggers-project-expression>`



