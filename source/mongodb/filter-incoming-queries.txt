.. _filter-incoming-queries:

=======================
Filter Incoming Queries
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can define filters on incoming queries that Atlas App Services evaluates and
applies before its initial query to your MongoDB cluster. Adding a
filter to a collection allows you to control the shape of queried
documents using projection filters and can improve query performance by
reducing the number of documents for which App Services needs to evaluate a
role.

Every filter consists of an Apply When :ref:`expression
<expressions>` and a :guilabel:`Filter Query` document. When App Services
receives an incoming MongoDB query, it evaluates the Apply When
expression of all filters on the collection and merges the :guilabel:`Filter
Query` document into the incoming query.

This guide walks through creating one or more filters for a
collection.

.. note::

   This guide requires a linked :ref:`{+atlas+} data source <data-sources>`.

Procedure
---------

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      .. procedure::

         .. step:: Navigate to the MongoDB Rules Screen

            You can create and manage filters from the MongoDB rules screen in the
            App Services UI. To get to the rules screen, click :guilabel:`Rules` beneath
            :guilabel:`Data Access` in the {+leftnav+}.


         .. step:: Create a New Filter

            Select the collection that you want to configure a filter for from
            the :guilabel:`Rules` menu then click the :guilabel:`Filters` tab.
            Click :guilabel:`New Filter` and enter a :guilabel:`Name` for the new
            filter.


         .. step:: Specify the Apply When Expression

            In the :guilabel:`Apply When` input box, enter a :ref:`rule expression
            <expressions>` that defines when the filter applies to a query. If the
            expression evaluates to ``true`` for an incoming query, App Services adds
            the :guilabel:`Filter Query` parameters to the incoming query.

            .. figure:: /images/filters-apply-when.png
               :alt: Filter Apply When Input Screenshot

            .. include:: /includes/note-filters-no-mongodb-expansions.rst


         .. step:: Specify the Filter Query Predicates

            In the :guilabel:`Query` input box, specify a document that contains
            additional query predicates to merge into the incoming query when the
            filter applies. For example, a filter that withholds documents that
            have a ``score`` below ``20`` could use the following filter query:

            .. code-block:: shell

               { "score": { "$gt": 20 } }

            .. figure:: /images/filters-query.png
               :alt: Filter Query Input Screenshot


         .. step:: Specify the Filter Projection

            In the :guilabel:`Projection` input box, specify a document that
            contains a :manual:`projection
            </tutorial/project-fields-from-query-results>` document to merge into
            the incoming query when the filter applies.

            For example, a filter that withholds the ``career_stats`` and
            ``personal`` fields from documents could use the following filter
            projection:

            .. code-block:: shell

               {
                 "career_stats": 0,
                 "personal": 0
               }

            .. figure:: /images/filters-projection.png
               :alt: Filter Projection Input Screenshot


         .. step:: Save the Filter

            After you have configured the :guilabel:`Filter Query` and the
            :guilabel:`Apply When` expression, click :guilabel:`Save`. After
            saving, App Services immediately begins evaluating and applying filters to
            incoming queries on the collection.

   
   .. tab::
      :tabid: cli
      
      .. procedure::

         .. step:: Pull the Latest Version of Your App

            To define filters for a collection with {+cli-bin+}, you need a local
            copy of your application's configuration files.

            To pull a local copy of the latest version of your app, run the following:

            .. code-block:: bash

               realm-cli pull --remote="<Your App ID>"

            .. tip::

               You can also download a copy of your application's configuration files from
               the :guilabel:`Deploy > Export App` screen in the App Services UI.


         .. step:: Add a Rule Configuration File


            To define or modify roles for a collection, open the ``rules.json``
            configuration file within the collection's configuration directory.

            .. tip:: Scaffold the Collection

               If you haven't already defined rules or a schema for the collection, you
               need to manually create its configuration directory and ``schema.json``:

               .. code-block:: bash

                  # Create the collection's configuration directory
                  mkdir -p data_sources/<service>/<db>/<collection>
                  # Create the collection's schema file
                  echo '{}' >> data_sources/<service>/<db>/<collection>/rules.json

            The configuration file should have the following general form:

            .. code-block:: json

               {
                 "database": "<Database Name>",
                 "collection": "<Collection Name>",
                 "roles": [],
                 "filters": []
               }

            .. note::

               This guide focuses on creating ``filters`` for the collection. Check out
               the other configuration guides to learn how to :doc:`define roles and
               permissions </mongodb/define-roles-and-permissions>` and :ref:`enforce
               schemas <enforce-a-schema>`.

            .. include:: /includes/adf-rules-note.rst


         .. step:: Add One or More Filters

            Add a document to the ``filters`` array for each filter that you want
            to configure. Filter documents have the following form:

            .. include:: /mongodb/tables/query-filter-params.rst


         .. step:: Deploy the Updated Rules

            Once you've defined and saved ``rules.json`` you can push the updated config
            to your remote app. {+cli+} immediately deploys the filters on push.

            .. code-block:: bash

               realm-cli push --remote="<Your App ID>"

