.. _template-apps:

=============
Template Apps
=============

.. default-domain:: mongodb

.. contents:: On this page
   :class: singlecol
   :backlinks: none
   :depth: 2
   :local:

Overview
--------

You can get up and running with an {+app+} using one of our premade template apps.
Template apps bring together many of the building blocks available in {+service+}
and start you off with a prebuilt {+app+} that you can customize. You can create a
template app in the :ref:`{+ui+} <create-a-realm-app>`, with :ref:`{+cli+} <create-app-cli>`,
or the :ref:`Admin API <create-app-api>`.


Template Apps Available
-----------------------

.. list-table::
   :header-rows: 1
   :widths: 30 30 50
   
   * - Name
     - ID
     - Description

   * - Manage Database Views
     - ``triggers``
     - Event-driven :ref:`Database Trigger <database-trigger>` template to update a view in a separate collection.

   * - Flutter + Realm Flutter SDK
     - ``flutter.todo.flex``
     - Cross-platform application for Android, iOS, Windows and MacOS built with the :ref:`Realm Flutter SDK <flutter-intro>`.

   * - React.JS + {+realm-web+} Boilerplate
     - ``web.mql.todo``
     - Hosted Todo web app using the :ref:`{+realm-web+} SDK <web-intro>`.
   
   * - GraphQL + React App Boilerplate
     - ``web.graphql.todo``
     - Hosted Todo web app using the :ref:`GraphQL API <graphql-api>`

   * - Kotlin + {+sync+} Starter (Flexible Sync)
     - ``android.kotlin.todo.flex``
     - Android app written in Kotlin using the :ref:`Realm Java SDK <java-intro>` to sync data to {+service-short+}'s server. Uses Flexible Sync.

   * - Kotlin + {+sync+} Starter (Partition-Based Sync)
     - ``android.kotlin.todo``
     - Android app written in Kotlin using the :ref:`Realm Java SDK <java-intro>` to sync data to {+service-short+}'s server. Uses Partition-Based-Sync.

   * - SwiftUI + {+sync+} Starter (Flexible Sync)
     - ``swiftui.todo.flex``
     - iOS app using SwiftUI and the :ref:`Realm Swift SDK <ios-intro>` to sync data to {+service-short+}'s server. Uses Flexible Sync.

   * - SwiftUI + {+sync+} Starter (Partition-Based-Sync)
     - ``swiftui.todo``
     - iOS app using SwiftUI and the :ref:`Realm Swift SDK <ios-intro>` to sync data to {+service-short+}'s server. Uses Partition-Based-Sync.

   * - Swift + {+sync+} Starter
     - ``ios.swift.todo``
     - iOS app using UIKit and the :ref:`Realm Swift SDK <ios-intro>` to sync data to {+service-short+}'s server.

   * - React Native + {+sync+} Starter (Flexible Sync)
     - ``react-native.todo.flex``
     - Cross-platform mobile app using the :ref:`Realm JS SDK <react-native-intro>` to sync data to {+service-short+}'s server. Uses Flexible Sync.

   * - React Native + {+sync+} Starter (Partition-Based-Sync) 
     - ``react-native.todo``
     - Cross-platform mobile app using the :ref:`Realm JS SDK <react-native-intro>` to sync data to {+service-short+}'s server. Uses Partition-Based-Sync.

   * - Xamarin + {+sync+} Starter (Flexible Sync)
     - ``xamarin.todo.flex``
     - Cross-platform mobile app using the :ref:`Realm C# SDK <dotnet-intro>` to sync data to {+service-short+}'s server. Uses Flexible Sync.

   * - Xamarin + {+sync+} Starter (Partition-Based-Sync) 
     - ``xamarin.todo``
     - Cross-platform mobile app using the :ref:`Realm C# SDK <dotnet-intro>` to sync data to {+service-short+}'s server. Uses Partition-Based-Sync.

Create a Template App
---------------------

.. tabs::
   
   .. tab:: {+ui+}
      :tabid: ui
      
      Follow the procedure described in the 
      :ref:`create-a-realm-app` guide, and select
      the :guilabel:`Create App from Template` tab in the :guilabel:`Create a new {+app+}` step. 

      .. note:: iOS with UIKit

         If you want to use the iOS with UIKit template app, select :guilabel:`SwiftUI + {+sync+} Starter`
         in the list of template apps, but specify ``ios.swift.todo`` when you pull the
         client code using the {+cli-bin+}.

   .. tab:: {+cli+}
      :tabid: cli

      Follow the procedure described in the 
      :ref:`Create an {+app+} with {+cli+} <create-app-cli>` guide and include
      the ``template`` flag followed by one of the template app IDs: 
      
      .. code-block:: shell
         
         realm-cli apps create -n "<App Name>" --template "<Chosen Template App ID>"

   .. tab:: Admin API
      :tabid: api

      Follow the procedure described in the 
      :ref:`Create an {+app+} with {+service-short+} API <create-app-api>` guide, and select
      the :guilabel:`Template` tab in the :guilabel:`Create a new {+app+}` step. 
      When calling the create endpoint you should include a request body that looks like this:

      .. code-block:: json
         
         { 
            "name": "<AppName>",
            "template_id": "<Chosen Template App ID>",
            "data_source": {
               "name": "mongodb-atlas",
               "type": "mongodb-atlas",
               "config": {
                  "clusterName": "<Name Of Existing Cluster>"
               }
            }
         }
         
Explore a Template App
----------------------

When you create a template app, the UI includes a
:guilabel:`Welcome to Your Application` section to help you get started
with services and front-end code. You can:

1. Learn more about what your chosen template app includes.

2. Follow on-screen guides to customize your app.

3. Use the {+cli-bin+} to download the code for your app so you can build the frontend
   (if one is included) and interact with the {+app+} through the cli.

   If you already have {+cli-bin+} set up, you can use the {+cli-bin+}
   :ref:`pull command <realm-cli-pull>` to download the code. Otherwise,
   click the :guilabel:`Pull front-end code` button in the welcome
   section and follow the instructions that pop up.

   .. code-block:: shell
      
      realm-cli pull --remote <App ID> --template <Template App ID>

.. figure:: /images/welcome-template-app.png
   :alt: Welcome section for template apps
   :figwidth: 750px
   :width: 750px

.. tip::

   All the template apps except "Manage Database Views" come with a
   front-end todo app.
