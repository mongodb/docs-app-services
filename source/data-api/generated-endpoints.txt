.. _data-api-endpoints:

==================
Data API Endpoints
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The Data API lets you securely read and write data using standard HTTPS
requests. The API includes automatically generated endpoints that each
represent a MongoDB operation. You can use the endpoints to create,
read, update, delete, and aggregate documents in a MongoDB data source.

For example, this :mdn:`POST <Web/HTTP/Methods/POST>` request stores a
document in a linked cluster by calling the ``insertOne`` endpoint:

.. io-code-block::
   
   .. input:: /data-api/snippets/generated-endpoints.snippet.hello-world.sh
      :language: bash
   
   .. output::
      :language: json
      
      { "insertedId": "5f1a785e1536b6e6992fd588" }

When to Use the Data API
------------------------

You can use the Data API to integrate with any app or service that
supports HTTPS requests. For example, you might:

- call the API from a serverless edge function

- query Atlas from a mobile application

- access test data and log events in a CI/CD workflow

- integrate Atlas into a federated API gateway

- connect from an environment not currently supported via a MongoDB
  Driver or Realm SDK

An operation called through an API endpoint will likely take longer than
the corresponding MongoDB operation called through a connected MongoDB
Driver. For high-load use-cases and latency sensitive applications, we
recommend connecting directly to your database with a MongoDB driver. To
learn more, visit the :driver:`MongoDB Drivers </>` documentation.

.. _data-api-base-url:

Base URL
--------

The Data API endpoints in an app share a base URL. The URL uses your App
ID to uniquely point to your app and specifies which version of the Data
API to call. Each endpoint has a unique URL formed by appending the
endpoint's route to your app's base URL.

Globally deployed apps use the following format:

.. code-block:: none
   :caption: Endpoint Base URL (Global Apps):

   https://data.mongodb-api.com/app/<App ID>/endpoint/data/<API Version>
   
Endpoints in a locally deployed app use a base URL specific to the app's
:ref:`deployment region <deployment-regions>` (e.g. ``us-east-1.aws``):

.. code-block:: none
   :caption: Endpoint Base URL (Local Apps)

   https://<Region>.<Cloud>.data.mongodb-api.com/app/<App ID>/endpoint/data/<API Version>

.. _data-api-setup:

Set Up the Data API
-------------------

You can configure the Data API for your app from the App Services UI or by
deploying configuration files with Realm CLI:

.. tabs-realm-admin-interfaces::

   .. tab::
      :tabid: ui

      1. Click :guilabel:`HTTPS Endpoints` in the left navigation menu and then
         select the :guilabel:`Data API` tab.
      
      2. Enable the Data API for your app. This generates endpoints that
         can access any MongoDB data source linked to your app.
      
      3. Choose an :ref:`authentication <data-api-authentication>`
         method and enable authentication providers.
      
      4. Choose a :ref:`response type <data-api-response-type>`.
      
      5. Save the Data API configuration.
      
      6. Configure :ref:`access permissions <data-api-permissions>` by
         defining rules for collections in your linked data sources to
         allow requests to securely read and write data.
      
      7. Save and deploy your app.
     
   .. tab::
      :tabid: cli
      
      1. Pull the latest version of your app.
         
         .. code-block:: bash

            realm-cli pull --remote="<Your App ID>"
      
      2. Define a Data API configuration file.
         
         .. code-block:: bash
            :caption: https_endpoints/data_api_config.json

            {
              "disabled": false,
              "versions": ["v1"],
              "can_evaluate": {},
              "return_type": <"JSON" | "EJSON">
            }
      
      3. Deploy your app.
         
         .. code-block:: bash
            
            realm-cli push

.. _data-api-authentication:

Authentication
~~~~~~~~~~~~~~

Data API endpoints run in the context of a specific user, which allows
your app to enforce rules and validate document schemas for each
request.

By default, endpoints use Application Authentication, which requires
each request to include credentials for one of your application users,
like an API key or JWT. You can also configure other custom
authentication schemes to fit your application's needs.

For examples of how to authenticate requests, see :ref:`Authenticate
Data API Requests <data-api-authenticate-requests>`.

.. tabs::

   .. tab:: Application
      :tabid: auth-credentials

      Application authentication requires users to log in with an
      authentication provider that you have enabled for your App.
      Requests can either include an access token granted by the
      authentication provider or the credentials the user would log in
      with (e.g. their API key or email and password).

   .. tab:: User ID
      :tabid: auth-userid

      User ID authentication runs all requests as a single, pre-selected
      application user. This is useful if all requests should have the
      same permissions regardless of who called the endpoint.
      
      To select the user, specify their User Account ID in your app's
      Data API configuration.
      
      .. code-block:: json
         :caption: http_endpoints/data_api_config.json

         {
           "run_as_user_id": "628e47baf4c2ac2796fc8a91"
         }
   
   .. tab:: Script
      :tabid: auth-script
   
      Script authentication calls a function to determine which
      application user a request runs as. You can use this to implement
      custom authentication and authorization schemes.

      The function must return an existing application user's Account ID
      as a string or ``{ "runAsSystem": true }`` to run the request
      as a :ref:`system user <system-user>` that has full access to
      MongoDB CRUD and Aggregation APIs and is not affected by any
      rules, roles, or permissions.

      To define the function, specify the source code in your app's Data
      API configuration.
      
      .. code-block:: json
         :caption: http_endpoints/data_api_config.json

         [
           {
             ...,
             "run_as_user_id_script_source": "exports = () => {return \"628e47baf4c2ac2796fc8a91\"}"
           }
         ]

.. _data-api-authorization:

Authorization
~~~~~~~~~~~~~

You can require authenticated users to provide additional authorization
information in each request. You define the authorization scheme for
all generated Data API endpoints in your Data API configuration.

Endpoints natively support a set of built-in authorization schemes that
use a secret string to prove that the request is authorized. You can
also define a custom authorization scheme that you can use together with
or instead of the built-in schemes.

Built-In Authorization Schemes
``````````````````````````````

Endpoints support the following built-in authorization schemes:

.. tabs::
     
   .. tab:: No Additional Authorization
      :tabid: no-authorization
   
      All authenticated users are authorized to call the endpoint.
      Authenticated requests do not need to include authorization
      information.
      
   .. tab:: Secret Parameter
      :tabid: secret-parameter
      
      Authenticated users must prove that they are authorized to call
      the endpoint by including a specific string as the value of the
      ``secret`` query parameter.
      
      You define the string in a :ref:`secret <app-secret>` and
      reference the secret by name in the endpoint configuration.

      .. code-block:: json
         :caption: http_endpoints/data_api_config.json
         
         [
           {
             ...,
             "verification_method": "SECRET_AS_QUERY_PARAM",
             "secret_name": "secret_verification_string"
           }
         ]

      To learn how to include the secret in a request, see :ref:`Authorize the Request <data-api-authorize>`.
   
   .. tab:: Payload Signature
      :tabid: payload-signature
   
      Authenticated users must prove that they are authorized to call
      the endpoint by including an ``Endpoint-Signature`` header that
      contains a hexadecimal-encoded :abbr:`HMAC (Hash-based Message
      Authentication Code)` SHA-256 hash generated from the request body
      and a secret string.

      You define the string in a :ref:`secret <app-secret>` and
      reference the secret by name in the endpoint configuration.

      To learn how to sign your requests, see :ref:`Authorize the Request <data-api-authorize>`.

Custom Authorization Schemes
````````````````````````````

You can define a custom authorization :ref:`expression <expressions>` to
determine if an incoming authenticated request is allowed to run. The
expression is evaluated for each request and must evaluate to ``true``
to allow the request. If the expression evaluates to ``false``, the
request is not authorized and fails with an error. Requests that fail
authorization are not counted toward your App's billed usage.

Authorization expressions can use variables like
:json-expansion:`%%user` to authorize based on the calling user's data
or :json-expansion:`%%request` to make decisions based on the specifics
of each incoming request.

To define a custom authorization scheme, specify the expression in your
app's Data API configuration:

.. code-block:: json
   :caption: http_endpoints/data_api_config.json
   
   {
     ...,
     "can_evaluate": {
       "%%request.headers.x-secret-key": "my-secret"
     }
   }

.. _data-api-response-type:

Response Type
~~~~~~~~~~~~~

Endpoints can return data in one of two :ref:`data formats
<data-api-data-formats>`, either JSON or EJSON.

By default, endpoints return JSON, which is a standard data format that
is widely supported modern langauges and platforms. However, JSON cannot
represent every data type that you can store in MongoDB and loses type
information for some data types.

You can also configure endpoints to return EJSON, which uses structured
JSON objects to fully represent the types that MongoDB supports. This
preserves type information in responses but requires that your
application understands how to parse and use EJSON.

.. tip::
   
   The official MongoDB drivers include methods for working with EJSON.
   You can also download a standalone parser like :npm:`bson
   <package/bson>` on npm.

.. tabs::

    .. tab:: JSON
       :tabid: json

       .. code-block:: json
          :caption: https_endpoints/data_api_config.json

          {
             "return_type": "JSON"
          }

    .. tab:: EJSON
       :tabid: ejson

       .. code-block:: json
          :caption: https_endpoints/data_api_config.json

          {
             "return_type": "EJSON"
          }

.. _data-api-permissions:

Access Permissions
~~~~~~~~~~~~~~~~~~

The Data API uses your app's :ref:`data access rules <rules>` to
determine if a user can read and write data. To allow Data API requests
to access a specific collection, you must first define rules for the
collection.

You can also set up an :ref:`IP Access List <ip-access-list>` for
additional security.

.. _data-api-versions:

API Versions
~~~~~~~~~~~~

The Data API uses a built-in versioning scheme to upgrade endpoints over
time while maintaining backwards compatibility. Incoming requests can
specify which version of an endpoint to use in the request URL and the
Data API can serve any version that you have enabled.

You must enable a new version before users can call endpoints with that
version. You can always enable the most recent Data API version.
However, you cannot enable an older version after a newer version has
been released.

The following versions are currently supported:

- ``beta``
- ``v1``

Call a Data API Endpoint
------------------------

You can call a Data API endpoint from any standard HTTP client. Each
request can include configuration headers and arguments in the request
body.

Choose an API Version
~~~~~~~~~~~~~~~~~~~~~

Data API requests specify which version of the API to use in the request
URL. A request can specify any version that is enabled for your app.

.. code-block:: bash

   https://data.mongodb-api.com/app/<App ID>/endpoint/data/<API Version>

Specify the Request Data Format
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Data API requests must include a ``Content-Type`` header to specify the
:ref:`data format <data-api-data-formats>` used in the request body.

- Use ``Content-Type: application/json`` to represent standard JSON types in a
  Data API request body.

- Use ``Content-Type: application/ejson`` to represent standard JSON
  types *and* additional EJSON types in a Data API request body.

.. tabs::
   
   .. tab:: EJSON
      :tabid: ejson
      
      .. io-code-block::
         
         .. input::
            :language: bash
            :emphasize-lines: 4
            
            curl -X GET \
              https://data.mongodb-api.com/app/myapp-abcde/endpoint/data/v1/action/insertOne \
              -H 'apiKey: <API Key>' \
              -H 'Content-Type: application/ejson' \
              -H 'Accept: application/ejson' \
              --data-raw '{
                  "dataSource": "mongodb-atlas",
                  "database": "learn-data-api",
                  "collection": "hello",
                  "document": {
                    "_id": { "$oid": "629971c0d71aad65bd59c595" },
                    "greeting": "Hello, EJSON!",
                    "date": { "$date": { "$numberLong": "1654589430998" } }
                  }
              }'
         
         .. output::
            :language: json
            
            { "insertedId": { "$oid": "629971c0d71aad65bd59c595" } }
   
   .. tab:: JSON
      :tabid: json
      
      .. io-code-block::
         
         .. input::
            :language: bash
            :emphasize-lines: 4
            
            curl -X POST \
              https://data.mongodb-api.com/app/myapp-abcde/endpoint/data/v1/action/updateOne \
              -H 'apiKey: <API Key>' \
              -H 'Content-Type: application/json' \
              --data-raw '{
                 "dataSource": "mongodb-atlas",
                 "database": "learn-data-api",
                 "collection": "hello",
                 "filter": { "greeting": "Hello, world!" },
                 "update": {
                     "$set": { "greeting": "Hello, universe!" }
                 }
              }'
         
         .. output::
            :language: json
            :visible: false
            
            { "matchedCount": 1, "modifiedCount": 1 }

Choose a Response Data Format
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A request can include an ``Accept`` header to request a specific data
format for the response body, either JSON or EJSON. If a request does
not include a valid ``Accept`` header, the response uses the data format
specified in your :ref:`Data API configuration <data-api-response-type>`.

.. tabs::
   
   .. tab:: EJSON
      :tabid: ejson
      
      .. io-code-block::
         
         .. input::
            :language: bash
            :emphasize-lines: 5
            
            curl -X GET \
              https://data.mongodb-api.com/app/myapp-abcde/endpoint/data/v1/action/findOne \
              -H 'apiKey: <API Key>' \
              -H 'Content-Type: application/json' \
              -H 'Accept: application/ejson' \
              --data-raw '{
                 "dataSource": "mongodb-atlas",
                 "database": "learn-data-api",
                 "collection": "hello",
                 "projection": { "greeting": 1, "date": 1 }
              }'
         
         .. output::
            :language: json
            
            {
              "_id": { "$oid": "629971c0d71aad65bd59c545"},
              "greeting": "Hello, Leafie!",
              "date": { "$date": { "$numberLong": "1654589430998" } }
            }
   
   .. tab:: JSON
      :tabid: json
      
      .. io-code-block::
         
         .. input::
            :language: bash
            :emphasize-lines: 5
            
            curl -X POST \
              https://data.mongodb-api.com/app/myapp-abcde/endpoint/data/v1/action/findOne \
              -H 'apiKey: <API Key>' \
              -H 'Content-Type: application/json' \
              -H 'Accept: application/json' \
              --data-raw '{
                 "dataSource": "mongodb-atlas",
                 "database": "learn-data-api",
                 "collection": "hello",
                 "projection": { "greeting": 1, "date": 1 }
              }'
         
         .. output::
            :language: json
            
            {
              "_id": "629971c0d71aad65bd59c545",
              "greeting": "Hello, Leafie!",
              "date": "2022-06-07T08:10:30.998Z"
            }

.. _data-api-authenticate:

Authenticate the Request
~~~~~~~~~~~~~~~~~~~~~~~~

If an endpoint is configured to use Application Authentication then you
must include a valid user access token or login credentials with every
request.

.. include:: /includes/bearer-auth-performance.rst

To use an access token, first authenticate the user through an App
Services authentication provider. Then, get the access token returned
from App Services and include it in the request's Authorization header
using a Bearer token scheme. For more information on how to acquire and
use an access token, see :ref:`Bearer Token Authentication
<data-api-bearer-authentication>`.

.. code-block:: shell
   :emphasize-lines: 2

   curl -X POST 'https://data.mongodb-api.com/app/<AppID>/endpoint/data/v1/action/find' \
      --header 'Authorization: Bearer <AccessToken>' \
      --header 'Content-Type: application/json' \
      --data-raw '{
        "dataSource": "mongodb-atlas",
        "database": "sample_mflix",
        "collection": "movies",
        "filter": {
          "title": "The Matrix"
        }
      }'

Alternatively, you can include valid login credentials for the user in
the request headers.

.. tabs-realm-auth-providers::
   
   .. tab::
      :tabid: local-userpass

      .. code-block:: bash
         :emphasize-lines: 3-4
         
         curl -X POST \
           https://data.mongodb-api.com/app/myapp-abcde/endpoint/data/v1/action/findOne \
           -H 'email: <Email Address>' \
           -H 'password: <Password>' \
           -H 'Content-Type: application/json' \
           --data-raw '{
             "dataSource": "mongodb-atlas",
             "database": "learn-data-api",
             "collection": "hello",
           }'
   
   .. tab::
      :tabid: api-key

      .. code-block:: bash
         :emphasize-lines: 3
         
         curl -X POST \
           https://data.mongodb-api.com/app/myapp-abcde/endpoint/data/v1/action/findOne \
           -H 'apiKey: <API Key>' \
           -H 'Content-Type: application/json' \
           --data-raw '{
             "dataSource": "mongodb-atlas",
             "database": "learn-data-api",
             "collection": "hello",
           }'
   
   .. tab::
      :tabid: custom-token

      .. code-block:: bash
         :emphasize-lines: 3
         
         curl -X POST \
           https://data.mongodb-api.com/app/myapp-abcde/endpoint/data/v1/action/findOne \
           -H 'jwtTokenString: <Custom JSON Web Token>' \
           -H 'Content-Type: application/json' \
           --data-raw '{
             "dataSource": "mongodb-atlas",
             "database": "learn-data-api",
             "collection": "hello",
           }'

.. include:: /includes/dont-use-api-key-in-browsers.rst

.. _data-api-authorize:

Authorize the Request
~~~~~~~~~~~~~~~~~~~~~

Depending on your Data API :ref:`authorization configuration
<data-api-authorization>`, your requests may need to include additional
authorization information.

.. tabs::
     
   .. tab:: No Additional Authorization
      :tabid: no-authorization
   
      All authenticated users are authorized to call the endpoint.
      Authenticated requests do not need to include authorization
      information.
      
   .. tab:: Secret Parameter
      :tabid: secret-parameter
      
      Authenticated users must prove that they are authorized to call
      the endpoint by including the endpoint's secret string as the
      value of the ``secret`` query parameter.
      
      .. example::
         
         The following ``curl`` request uses secret query parameter
         validation with the secret string ``"12345"``:
      
         .. code-block:: bash
            :emphasize-lines: 4
      
            curl -X POST \
              https://data.mongodb-api.com/app/myapp-abcde/endpoint/data/v1/action/findOne?secret=12345 \
              -H "Content-Type: application/json" \
              -d '{
                "dataSource": "mongodb-atlas",
                "database": "learn-data-api",
                "collection": "tasks",
                "filter": { "text": "Do the dishes" }
              }'

   .. tab:: Payload Signature
      :tabid: payload-signature
   
      Authenticated users must prove that they are authorized to call
      the endpoint by including an ``Endpoint-Signature`` header that
      contains a hexadecimal-encoded :abbr:`HMAC (Hash-based Message
      Authentication Code)` SHA-256 hash generated from the request body
      and the endpoint's secret string.

      .. code-block:: none
         
         Endpoint-Signature::sha256=<hex encoded hash>
      
      You could use the following function to generate the payload
      signature:
      
      .. literalinclude:: /data-api/signEndpointRequest.js
         :language: javascript

      .. example::
         
         The following ``curl`` includes a payload signature header
         signed with the secret value ``12345``:

         .. code-block:: bash
            :emphasize-lines: 3
            
            curl -X POST \
              https://data.mongodb-api.com/app/myapp-abcde/endpoint/data/v1/action/findOne \
              -H "Content-Type: application/json" \
              -H "Endpoint-Signature::sha256=769cd86855787f476afc8b0d2cf9837ab0318181fca42f45f34b6dffd086dfc7" \
              -d '{
                "dataSource": "mongodb-atlas",
                "database": "learn-data-api",
                "collection": "tasks",
                "filter": { "text": "Do the dishes" }
              }'

Endpoints
---------

.. _data-api-findOne:

Find a Single Document
~~~~~~~~~~~~~~~~~~~~~~

Endpoint
````````

.. code-block:: text
   
   POST /action/findOne

Example
```````

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.findOne.sh

Request Body
````````````

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "filter": <query filter>,
     "projection": <projection>
   }

.. include:: /includes/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - filter
     - object
     - Optional
     - A :manual:`MongoDB Query Filter </tutorial/query-documents/>`.
       The ``findOne`` action returns the first document in the
       collection that matches this filter.
       
       If you do not specify a ``filter``, the action matches all
       document in the collection.

     - ``{}``

   * - projection
     - object
     - Optional
     - A :manual:`MongoDB Query Projection </tutorial/project-fields-from-query-results/>`.
       Depending on the projection, the returned document will either
       omit specific fields or include only specified fields or values
     - ``{}``

Response
````````

The ``findOne`` action returns the matched document in the ``document``
field:

.. code-block:: json
   
   { "document": { "_id": "6193504e1be4ab27791c8133", "test": "foo" } }

If the action does not match any documents, the ``document`` field is
``null``:

.. code-block:: json
   
   { "document": null }

.. _data-api-find:

Find Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~

Endpoint
````````

.. code-block:: text
   
   POST /action/find

Example
```````

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.find.sh

Request Body
````````````

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "filter": <query filter>,
     "projection": <projection>,
     "sort": <sort expression>,
     "limit": <number>,
     "skip": <number>
   }

.. include:: /includes/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - filter
     - object
     - Optional
     - A :manual:`MongoDB Query Filter </tutorial/query-documents/>`. The
       ``find`` action returns documents in the collection that match
       this filter.
       
       If you do not specify a ``filter``, the action matches all
       document in the collection.

       If the filter matches more documents than the specified
       ``limit``, the action only returns a subset of them. You can use
       ``skip`` in subsequent queries to return later documents in the
       result set.
     
     - ``{}``

   * - projection
     - object
     - Optional
     - A :manual:`MongoDB Query Projection </tutorial/project-fields-from-query-results/>`.
       Depending on the projection, the returned documents either omit
       specific fields or include only specified fields and values.
     - ``{}``

   * - sort
     - object
     - Optional
     - A :manual:`MongoDB Sort Expression </reference/operator/aggregation/sort/>`.
       Matched documents are returned in ascending or descending order
       of the fields specified in the expression.
     - ``{}``

   * - limit
     - number
     - Optional
     - The maximum number of matched documents to include in the
       returned result set. Each request may return up to 50,000
       documents.
     - 1000

   * - skip
     - number
     - Optional
     - The number of matched documents to skip before adding matched
       documents to the result set.
     - 0


Response
````````

The ``find`` action returns an array of matched document in the
``documents`` field:

.. code-block:: json
   
   {
     "documents": [
       { "_id": "6193504e1be4ab27791c8133", ... },
       { "_id": "6194604e1d38dc33792d8257", ... }
     ]
   }

If the action does not match any documents, the ``documents`` field is
an empty array:

.. code-block:: json
   
   { "documents": [] }

.. _data-api-insertOne:

Insert a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

Endpoint
````````

.. code-block:: text
   
   POST /action/insertOne

Example
```````

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.insertOne.sh

Request Body
````````````

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "document": { ... },
   }

.. include:: /includes/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - document
     - object
     - Required
     - An :manual:`EJSON </reference/mongodb-extended-json/>` document
       to insert into the collection.
     -

Response
````````

The ``insertOne`` action returns the ``_id`` value of the inserted
document as a string in the ``insertedId`` field:

.. tabs::

   .. tab:: JSON
      :tabid: json

      .. code-block:: json
         
         { "insertedId": "6193504e1be4ab27791c8133" }

   .. tab:: EJSON
      :tabid: ejson

      .. code-block:: json
         
         { "insertedId": { "$oid": "6193504e1be4ab27791c8133" } }

.. _data-api-insertMany:

Insert Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

Endpoint
````````

.. code-block:: text
   
   POST /action/insertMany

Example
```````

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.insertMany.sh

Request Body
````````````

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "documents": [{ ... }, ...]
   }

.. include:: /includes/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - documents
     - array of objects
     - Required
     - An array of one or more :manual:`EJSON </reference/mongodb-extended-json/>`
       documents to insert into the collection.
     -

Response
````````

The ``insertMany`` action returns the ``_id`` values of all inserted
documents as an array of strings in the ``insertedIds`` field:

.. code-block:: json
   
   { "insertedIds": ["61935189ec53247016a623c9", "61935189ec53247016a623ca"] }

.. _data-api-updateOne:

Update a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

Endpoint
````````

.. code-block:: text
   
   POST /action/updateOne

Example
```````

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.updateOne.sh

Request Body
````````````

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "filter": { ... },
     "update": { ... },
     "upsert": true|false
   }

.. include:: /includes/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - filter
     - object
     - Required
     - A :manual:`MongoDB Query Filter </tutorial/query-documents/>`.
       The ``updateOne`` action modifies the first document in the
       collection that matches this filter.
     -

   * - update
     - object
     - Required
     - A :manual:`MongoDB Update Expression </tutorial/update-documents/>`
       that specifies how to modify the matched document.
     -

   * - upsert
     - boolean
     - Optional
     - The ``upsert`` flag only applies if no documents match the
       specified ``filter``. If ``true``, the ``updateOne`` action
       inserts a new document that matches the filter with the specified
       ``update`` applied to it.
     - false

Response
````````

The ``updateOne`` action returns:

- the number of documents that the filter matched in the ``matchedCount`` field
- the number of matching documents that were updated in the ``modifiedCount`` field

.. code-block:: json
   
   { "matchedCount": 1, "modifiedCount": 1 }

If ``upsert`` is set to ``true`` and no documents match the filter, the
action returns the ``_id`` value of the inserted document as a string in
the ``upsertedId`` field:

.. code-block:: json
   
   { "matchedCount": 0, "modifiedCount": 0, "upsertedId": "619353593821e5ec5b0f8944" }

.. _data-api-updateMany:

Update Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

Endpoint
````````

.. code-block:: text
   
   POST /action/updateMany

Example
```````

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.updateMany.sh

Request Body
````````````

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "filter": { ... },
     "update": { ... },
     "upsert": true|false
   }

.. include:: /includes/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - filter
     - object
     - Required
     - A :manual:`MongoDB Query Filter </tutorial/query-documents/>`.
       The ``updateMany`` action modifies all documents in the
       collection that match this filter.
     -

   * - update
     - object
     - Required
     - A :manual:`MongoDB Update Expression </tutorial/update-documents/>`
       that specifies how to modify matched documents.
     -

   * - upsert
     - boolean
     - Optional
     - The ``upsert`` flag only applies if no documents match the
       specified ``filter``. If ``true``, the ``updateMany`` action
       inserts a new document that matches the filter with the specified
       ``update`` applied to it.
     - false

Response
````````

The ``updateMany`` action returns:

- the number of documents that the filter matched in the ``matchedCount`` field
- the number of matching documents that were updated in the ``modifiedCount`` field

.. code-block:: json
   
   { "matchedCount": 12, "modifiedCount": 12 }

If ``upsert`` is set to ``true`` and no documents match the filter, the
action returns the ``_id`` value of the inserted document as a string in
the ``upsertedId`` field:

.. code-block:: json
   
   { "matchedCount": 0, "modifiedCount": 0, "upsertedId": "619353593821e5ec5b0f8944" }

.. _data-api-replaceOne:

Replace a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~~

Endpoint
````````

.. code-block:: text
   
   POST /action/replaceOne

Example
```````

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.replaceOne.sh

Request Body
````````````

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "filter": { ... },
     "replacement": { ... },
     "upsert": true|false
   }

.. include:: /includes/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - filter
     - object
     - Required
     - A :manual:`MongoDB Query Filter </tutorial/query-documents/>`.
       The ``replaceOne`` action overwrites the first document in the
       collection that matches this filter.
     -

   * - replacement
     - object
     - Required
     - An :manual:`EJSON </reference/mongodb-extended-json/>` document
       that overwrites the matched document.
     -

   * - upsert
     - boolean
     - Optional
     - The ``upsert`` flag only applies if no documents match the
       specified ``filter``. If ``true``, the ``replaceOne`` action
       inserts the ``replacement`` document.
     - false

Response
````````

The ``replaceOne`` action returns:

- the number of documents that the filter matched in the ``matchedCount`` field
- the number of matching documents that were replaced in the ``modifiedCount`` field

.. code-block:: json
   
   { "matchedCount": 1, "modifiedCount": 1 }

If ``upsert`` is set to ``true`` and no documents match the filter, the
action returns the ``_id`` value of the inserted document as a string in
the ``upsertedId`` field:

.. code-block:: json
   
   { "matchedCount": 0, "modifiedCount": 0, "upsertedId": "619353593821e5ec5b0f8944" }

.. _data-api-deleteOne:

Delete a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

Endpoint
````````

.. code-block:: text
   
   POST /action/deleteOne

Example
```````

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.deleteOne.sh

Request Body
````````````

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "filter": { ... }
   }

.. include:: /includes/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - filter
     - object
     - Required
     - A :manual:`MongoDB Query Filter </tutorial/query-documents/>`.
       The ``deleteOne`` action deletes the first document in the
       collection that matches this filter.
     -

Response
````````

The ``deleteOne`` action returns the number of deleted documents in the
``deletedCount`` field:

.. code-block:: json
   
   { "deletedCount": 1 }

.. _data-api-deleteMany:

Delete Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

Endpoint
````````

.. code-block:: text
   
   POST /action/deleteMany

Example
```````

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.deleteMany.sh

Request Body
````````````

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "filter": { ... }
   }

.. include:: /includes/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - filter
     - object
     - Required
     - A :manual:`MongoDB Query Filter </tutorial/query-documents/>`.
       The ``deleteMany`` action deletes all documents in the collection
       that match this filter.
     -

Response
````````

The ``deleteMany`` action returns the number of deleted documents in the
``deletedCount`` field:

.. code-block:: json
   
   { "deletedCount": 42 }

.. _data-api-aggregate:

Run an Aggregation Pipeline
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Endpoint
````````

.. code-block:: text
   
   POST /action/aggregate

Example
```````

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.aggregate.sh

Request Body
````````````

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "pipeline": [<aggregation pipeline>]
   }

.. include:: /includes/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - pipeline
     - array of objects
     - Required
     - A :manual:`MongoDB Aggregation Pipeline </core/aggregation-pipeline/>`.
     -

Response
````````

The ``aggregate`` action returns the result set of the final stage of
the pipeline as an array of documents in the ``documents`` field:

.. code-block:: json
   
   { "documents": [{ ... }, ...] }

.. _data-api-error-codes:

Error Codes
-----------

.. list-table::
   :header-rows: 1

   * - Code
     - Description
       
   * - 400
     - Bad request
       
       The request was invalid. This might mean:
       
       - A request header is missing.
       - The request body is malformed or improperly encoded.
       - A field has a value with an invalid type.
       - The specified data source is disabled or does not exist.
       - The specified database or collection does not exist.
       
   * - 401
     - Unauthorized
       
       The request did not include an authorized and enabled
       API Key. Ensure that your API Key is enabled
       for the cluster.
       
   * - 404
     - Not found
       
       The request was sent to an endpoint that does not exist.
       
   * - 500s
     - Server errors
       
       The Data API encountered an internal error and could not complete
       the request.
