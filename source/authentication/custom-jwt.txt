.. _custom-jwt-authentication:

=========================
Custom JWT Authentication
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _custom-jwt-authentication-overview:

Overview
--------

The Custom JWT authentication provider allows users to authenticate with
an authentication system that is independent from Atlas App Services. The external
system must return a signed :jwt-io:`JSON Web Token <introduction>` that
contains a unique ID value for the authenticated user.

App Services uses the :abbr:`JWT (JSON Web Token)` to identify your
application's users and authenticate their requests but does not impose
any restrictions on the external authentication system's requirements or
authentication methods. For example, the system could require the user
to perform two factor authentication, provide specific credentials, or
otherwise identify themself.

.. figure:: /images/custom-auth-diagram.png
   :alt: Diagram of Custom JWT authentication architecture.
   :figwidth: 750px

.. _custom-jwt-authentication-configuration:
.. _config-custom-jwt:

Configuration
-------------

.. tabs-realm-admin-interfaces::

   .. tab::
      :tabid: ui

      You can enable the JWT authentication provider from the App Services UI
      by selecting :guilabel:`Custom JWT Authentication` from the
      :guilabel:`Authentication` page.

      You can configure the following properties for the provider:

      - :ref:`Audience <custom-jwt-authentication-configuration-audience>`
      - :ref:`Verification Method <custom-jwt-authentication-configuration-verification-method>`
      - :ref:`Metadata Fields <custom-jwt-authentication-configuration-metadata-fields>`

   .. tab::
      :tabid: cli

      To enable and configure the Custom JWT authentication provider with
      :ref:`realm-cli <realm-cli-quickstart>`, define a :ref:`configuration 
      object <appconfig-auth>` for it in ``/auth/providers.json``.

      Custom JWT provider configurations have the following form:

      .. code-block:: none
         :caption: /auth/providers.json
         
         {
           "custom-token": {
             "name": "custom-token",
             "type": "custom-token",
             "config": {
               "audience": "<JWT Audience>",
               "signingAlgorithm": "<JWT Signing Algorithm>",
               "useJWKURI": <boolean>,
               "jwkURI": "<JWK or JWKS URL>",
             },
             "secret_config": {
               "signingKeys": [
                 "<Signing Key Secret Name>",
                 ...
               ]
             },
             "metadata_fields": [
               {
                 "required": <boolean>,
                 "name": "<JWT Field Path>",
                 "field_name": "<Metadata Field Name>",
               },
               ...
             ],
             "disabled": <boolean>
           }
         }

.. _custom-jwt-authentication-configuration-audience:

Audience
~~~~~~~~

The :guilabel:`Audience` of a JWT specifies its intended recipient. JWTs
describe their audience in the ``aud`` claim. By default, App Services expects
``aud`` to contain the App ID of the App for which the provider
is configured.

If the external authentication system JWT specifies a different ``aud``
value, then you can configure the provider to use that value instead.

You can input a single audience or multiple audiences as a comma-separated list.
If you add multiple audiences, a toggle appears containing the following options:

- ``All of these audiences``: the JWT must include every audience in the list.
- ``Any one of these audiences``: the JWT only needs to include one audience
  from the list. 

.. tabs-realm-admin-interfaces::

   .. tab::
      :tabid: ui

      To override the default audience, specify a new value in the
      :guilabel:`Audience` input:

      .. figure:: /images/custom-jwt-audience.png
         :alt: The Custom JWT audience configuration input

      To require or allow for multiple audiences, 
      specify multiple new values and toggle the :guilabel:`Requires` option:

      .. figure:: /images/custom-jwt-audience-multiple.png
         :alt: The Custom JWT audience configuration input with multiple audiences


   .. tab::
      :tabid: cli

      To override the default audience, set the value of
      ``config.audience``:

      .. code-block:: json

         "config": {
           "audience": [
             "<JWT Audience>",
           ],
           "requireAnyAudience": <boolean>,
         }
         
      .. list-table::
        :header-rows: 1
        :widths: 15 30

        * - Field
          - Description

        * - ``audience``

          - Array of Strings. The audience or audiences expected
            to be found in a client JWT. 

        * - ``requireAnyAudience``

          - Boolean. If ``false``, valid JWTs must include all of the listed
            audiences. If ``true``, valid JWTs must include at least one of
            the listed audiences.

.. _custom-jwt-authentication-configuration-verification-method:

Verification Method
~~~~~~~~~~~~~~~~~~~

The :guilabel:`Verification Method` configures how the provider
determines which signing algorithm and signing keys the external
authentication system must use to sign each JWT.

You can either :ref:`manually specify signing keys
<custom-jwt-authentication-configuration-manually-signing-keys>`
or :ref:`specify a JSON Web Key URI
<custom-jwt-authentication-configuration-jwk-uri>`.

.. _custom-jwt-authentication-configuration-manually-signing-keys:

Manually Specify Signing Keys
`````````````````````````````

You can manually configure the signing algorithm and specify one or more
signing keys that the external authentication system may use to sign
JWTs.

.. tabs-realm-admin-interfaces::

   .. tab::
      :tabid: ui

   .. tab::
      :tabid: cli

      .. code-block:: javascript
         :emphasize-lines: 2, 5-8

         "config": {
           "signingAlgorithm": "<JWT Signing Algorithm>",
         },
         "secret_config": {
           "signingKeys": [
             "<Signing Key Secret Name>",
             ...
           ]
         }

.. list-table::
   :header-rows: 1
   :widths: 15 30

   * - Field
     - Description

   * - | :guilabel:`Signing Algorithm`
       | *config.signingAlgorithm*

     - The cryptographic method that the external system uses to sign
       the JWT. Custom authentication supports JWTs signed using any of
       the following algorithms:

       - ``HS256``
       - ``RS256``
       
       .. figure:: /images/custom-jwt-signing-algorithm.png
          :alt: The Signing Algorithm configuration dropdown

   * - | :guilabel:`Signing Key`
       | *secret_config.signingKeys*

     - A list of the names of up to three :ref:`Secrets <app-secret>`
       that each contain a signing key used by the external
       authentication system to sign :abbr:`JWTs (JSON Web Tokens)`.
       Each signing key Secret must be a string with length between 32
       and 512 characters.
       
       .. figure:: /images/custom-jwt-signing-key.png
          :alt: The Signing Keys configuration inputs

       .. warning::

          A :guilabel:`Signing Key` is a secret key and anyone with the
          key can issue valid user credentials for your app. Ensure that
          it's never stored in a publicly accessible location, such as a
          git repository, message board, or in your code.

.. _custom-jwt-authentication-configuration-jwk-uri:

Use a JWK URI
`````````````

Some external authentication systems provide a `JSON Web Key Set
<https://tools.ietf.org/html/rfc7517>`_ that describes the signing
algorithm and signing keys the system uses to sign JWTs. You can use the
JWKS to configure the provider instead of manually specifying the
signing algorithm and keys. When enabled, each token must include a
:data:`kid` header that specifies the Key ID of a key from the JWKS.

.. tabs-realm-admin-interfaces::

   .. tab::
      :tabid: ui

   .. tab::
      :tabid: cli

      .. code-block:: javascript

         "config": {
           "useJWKURI": <boolean>,
           "jwkURI": "<JWK or JWKS URL>"
         }
            
.. list-table::
   :header-rows: 1
   :widths: 15 30

   * - Field
     - Description

   * - | :guilabel:`Use JWK URI`
       | *config.useJWKURI*

     - If ``true``, configures App Services to use a signing algorithm and
       signing keys defined in a :abbr:`JWK (JSON Web Key)` or
       :abbr:`JWKS (JSON Web Key Set)`. The JWKS must be accessible at a
       URL that you specify.

   * - | :guilabel:`JWK URI`
       | *config.jwkURI*

     - A URL that hosts a JWK or JWKS that describes the signing method
       and signing keys the JWTs should use. The JWKS may specify up to
       three signing keys and must use the ``RS256`` algorithm.
       
       .. figure:: /images/custom-jwt-jwk-uri.png
          :alt: The JWK URI input

.. _custom-jwt-authentication-configuration-metadata-fields:

Metadata Fields
~~~~~~~~~~~~~~~

:guilabel:`Metadata Fields` are additional data that describe each user.
App Services determines the value of each metadata field from the value of
some field included in the JWT from the external authentication system. 
If you set the ``name`` field of a user, then App Services will use that
field as the user's display name. App Services refreshes a user's metadata
whenever they log in and exposes the fields in the ``data`` object of the 
:doc:`user object </users>`.

.. important:: 2048 Character Limit

   The length of a JWT token increases with the number of metadata fields in the 
   token and the size of each field. **App Services limits the length of a 
   JWT token to 2048 characters.** If you exceed this limit, App Services 
   logs an error and the ticket is not processed.

.. tabs-realm-admin-interfaces::

   .. tab::
      :tabid: ui

      To define a metadata field, click :guilabel:`Add Field` and
      specify the mapping between the metadata field in the JWT and its
      corresponding field name in the user object.
      
      .. figure:: /images/custom-auth-metadata-fields.png
         :alt: The metadata fields configuration table

   .. tab::
      :tabid: cli

      To define a metadata field in a Custom JWT authentication
      configuration file, add an entry for the field to the
      ``metadata_fields`` array. Each entry should be a document of the
      following form:

      .. code-block:: javascript

         {
           required: <boolean>,
           name: "<field path>",
           field_name: "<metadata field name>"
         }

.. list-table::
   :header-rows: 1
   :widths: 10 30

   * - Field
     - Description

   * - | :guilabel:`Required`
       | *required*

     - If ``true`` , the metadata field is required for all
       users associated with the provider, i.e. the :ref:`JWT
       <json-web-tokens>` returned by the external system must have a
       value assigned to the field designated by :guilabel:`Path`.

   * - | :guilabel:`Path`
       | *name*

     - The name of a field in the :ref:`JWT <json-web-tokens>` that
       contains the value for the metadata field. To specify a field in
       an embedded object, use :manual:`dot notation
       </core/document/#dot-notation>`.

       .. note:: Escaping periods in JWT keys

          Use a backslash (``\``) to escape period (``.``) characters in JWT keys. 
          Take this JSON object for example: 

          .. code-block:: json

            { "valid.json.key": {
                "nested_key": "val"
              }
            }

          You could represent the ``"nested_key"`` in the path name as
          ``valid\.json\.key.nested_key``.

   * - | :guilabel:`Field Name`
       | *field_name*

     - Optional. A name for the field in the user object's ``data``
       document that exposes the metadata field value. If not specified,
       this defaults to the same name as the JWT field that contains the
       value. The metadata field name may contain a maximum of 64
       characters.
       
       .. tabs-realm-admin-interfaces::
          :hidden: true
          
          .. tab::
             :tabid: ui

             For example, if you specify a ``name`` of
             ``location.primary.city``, the default value for
             ``field_name`` is ``city``.
          
          .. tab::
             :tabid: cli

             For example, if you specify a :guilabel:`Path` of
             ``location.primary.city``, the default value for
             :guilabel:`Field Name` is ``city``.

.. example::

   An external authentication system returns JWTs that include
   additional information about each user in the ``user_data`` field:

   .. code-block:: json

      {
        "aud": "myapp-abcde",
        "exp": 1516239022,
        "sub": "24601",
        "user_data": {
          "name": "Jean Valjean",
          "aliases": [
            "Monsieur Madeleine",
            "Ultime Fauchelevent",
            "Urbain Fabre"
          ]
        }
      }

   To include the values from the ``user_data`` field in each user's
   :ref:`user object <user-objects>`, you could specify the following
   metadata fields:

   .. list-table::
      :header-rows: 1

      * - Path
        - Field Name

      * - ``user_data.name``
        - ``name``

      * - ``user_data.aliases``
        - ``aliases``

   We can now access the mapped values directly from the :ref:`user
   object <user-objects>`, which would resemble the following for the
   given JWT:

   .. code-block:: json

      {
        "id": "59fdd02846244cdse5369ebf",
        "type": "normal",
        "data": {
          "name": "Jean Valjean",
          "aliases": [
            "Monsieur Madeleine",
            "Ultime Fauchelevent",
            "Urbain Fabre"
          ]
        },
        identities: [
          {
            "id": "24601",
            "provider_type": "custom-token",
            "data": {
              "name": "Jean Valjean",
              "aliases": [
                "Monsieur Madeleine",
                "Ultime Fauchelevent",
                "Urbain Fabre"
              ]
            },
          }
        ]
      }

.. _custom-jwt-authentication-jwt:
.. _json-web-tokens:

JSON Web Tokens
---------------

The external authentication system must return a `JSON web token
<https://jwt.io/introduction/>`_ that uniquely identifies the
authenticated user. JSON web tokens are an industry standard
(see :rfc:`RFC 7519 <7519>`) for securely representing
claims between two parties. A JWT is a string that consists of three
parts: a header, a payload and a signature and has the following form:

.. code-block:: none

   <header>.<payload>.<signature>

.. _custom-jwt-authentication-jwt-header:

JWT Header
~~~~~~~~~~

The header portion of the JWT consists of a ``Base64UrlEncoded``
document of the following form:

.. code-block:: javascript

   {
     "alg": "HS256",
     "typ": "JWT",
     "kid": "<JWK Key ID>"
   }

.. list-table::
   :header-rows: 1
   :widths: 15 60

   * - Field
     - Description

   * - .. data:: alg

     - Required. A string representing the hashing algorithm being used.

       App Services supports JWTs encoded with the following algorithms:

       .. list-table::
          :header-rows: 1
          :widths: 40 10

          * - Algorithm
            - Value

          * - HMAC SHA-256
            - ``"HS256"``

          * - RSA Signature SHA-256
            - ``"RS256"``

   * - .. data:: typ

     - Required. The type of the token. App Services expects a JSON web token
       so the value should be ``"JWT"``.

   * - .. data:: kid

     - Optional. The Key ID of a specific key to use from a set of keys
       in a JWK. You must include the ``kid`` header when you :ref:`use
       a JWK URL <custom-jwt-authentication-configuration-jwk-uri>`.

.. _custom-jwt-authentication-jwt-payload:

JWT Payload
~~~~~~~~~~~

The payload portion of the JWT consists of a ``Base64UrlEncoded``
document of the following form:

.. code-block:: javascript

   {
     "aud": "<realm app id>"
     "sub": "<unique user id>",
     "exp": <NumericDate>,
     "iat": <NumericDate>,
     "nbf": <NumericDate>,
     ...
   }

.. list-table::
   :header-rows: 1
   :widths: 15 60

   * - Field
     - Description

   * - .. data:: aud

     - Required. The audience of the token.
       By default, App Services expects this value to be the App ID of your
       App. If your external authentication service
       returns a different ``aud`` value, you should specify that value
       instead.

   * - .. data:: sub

     - Required. The subject of the token. The value should be a unique
       ID for the authenticated user from your custom-built
       authentication system.

   * - .. data:: exp

     - Required. The Expiration date of the token. The value should be a
       NumericDate number indicating the time at which the token expires.

       .. note::

          App Services will not accept expired authentication tokens.

   * - .. data:: iat

     - Optional. The "issued at" date of the token. The value
       should be a NumericDate number that indicates the time after
       which the token is considered valid. This field is functionally
       identical to ``nbf``.

   * - .. data:: nbf

     - Optional. The "not before" date of the token. The value should be
       a NumericDate number that indicates the time before which the
       token is considered invalid. This field is functionally identical
       to ``iat``.

.. note::

   App Services maps certain values from the JWT the :ref:`user
   object <user-objects>` so that you can access them in your
   application:

   - The required fields listed in this section map to the ``User.identities.data`` property for their Custom JWT provider identity.
   
   - The metadata fields listed in the :ref:`Custom JWT provider configuration <custom-jwt-authentication-configuration>` map to the ``User.data`` property.
   
   - Any optional fields not listed in the provider configuration are ignored and do not map to the user object.

.. _custom-jwt-authentication-usage-jwt-signature:

JWT Signature
~~~~~~~~~~~~~

The signature portion of the JWT is a hash of the encoded
token header and payload. To form the signature,
concatenate the encoded header and payload with a period
and sign the result with the :guilabel:`Signing Key`
specified in the authentication provider :ref:`configuration
<custom-jwt-authentication-configuration>` using the hashing
algorithm specified in the ``"alg"`` field of the header.

.. code-block:: none

   HMACSHA256(
     base64UrlEncode(header) + "." + base64UrlEncode(payload),
     signingKey
   )

.. _custom-jwt-authentication-examples:

Examples
--------

For code examples that demonstrate how to register and log in using
Custom JWT authentication, see the documentation for the Realm SDKs:

.. include:: /includes/custom-jwt-authentication-sdk-examples.rst

.. _jwt-tutorial:

Walkthrough
-----------

In this walkthrough, you will implement :ref:`Custom JWT Authentication <config-custom-jwt>`  
for your App Services App. You will learn how to:

- Enable JWT Authentication
- Use a third-party JWT provider to generate a valid token
- Authenticate against the backend from a client application

Prerequisites
~~~~~~~~~~~~~

You can use any App Services App for this tutorial. If you do not have 
a test app to use, you can :ref:`create an app <create-app>` or
use one of the :ref:`Template Apps <template-apps>`.

Procedure
~~~~~~~~~
This procedure is divided into three logical steps:

1. Create a JWT token
2. Enable and configure JWT Authentication in App Services
3. Add authentication code to your client app

Create a JWT Token
``````````````````
For this tutorial, we will use a third-party website, `jwt.io <https://jwt.io/>`_,
to generate a JWT token. 

Go to `jwt.io <https://jwt.io/>`_. Scroll down until you see the **Encoded** 
and **Decoded** headers. In the **Decoded** column, you will see three sections 
that comprise a JWT token: **Header**, **Payload**, and 
**Verify Signature** areas, each of which is explained in the next sections.
 
Header
++++++

The header of a JWT informs consuming applications what algorithm was used to 
encode the token. The default, which we will use for this tutorial, is ``HS256``. 

.. note::

   For more information on JWT algorithms, see 
   `JSON Web Token (JWT) Signing Algorithms Overview 
   <https://auth0.com/blog/json-web-token-signing-algorithms-overview/>`_.
   App Services supports ``HS256`` and ``RS256``.


Payload
+++++++

The Payload section contains the information that we need to configure for 
our App Services-specific needs. By default, three fields are included: ``sub``, 
``name``, and ``iat``. We will use these three, plus two more fields. The following 
table explains each field and the value expected:

.. list-table::
   :header-rows: 1

   * - Field
     - Description
     - Value
   
   * - ``sub`` 
     - The subject of the jwt, which you set according to your business needs. 
       For more information, see 
       `RFC 7519 4.1.2 <https://tools.ietf.org/html/rfc7519#page-9>`_. 
     - <your email or any other unique value>
   
   * - ``name`` 
     - The name of the user to whom this JWT is assigned. If specified, App Services 
       uses this value as the user's display name. Optional.
     - <your name>
   
   * - ``iat``
     - "Issued At" is a Unix epoch timestamp of when the token was issued.
     - The current date-time in seconds since Unix epoch.
   
   * - ``exp``
     - The date-time when this token expires.
     - A specific time defined in seconds since January 1, 1970 (i.e.
       the Unix epoch). Before this time, the JWT is valid. After this
       time, the JWT is expired. The Custom JWT provider rejects any
       login attempt that includes an expired JWT.
   
   * - ``aud``
     - The audience (consumer) of the token.
     - Your App Services App ID, which you can 
       :ref:`find in the App Services UI <find-app-id>`.
       If applicable, you can input multiple App IDs as a comma-separated
       list. When inputting multiple, you can specify whether the JWT requires 
       all or any one of the listed audiences.

  
For this tutorial, we have created a JWT for a user named "Caleb". The token was 
issued at the time of writing and will expire in exactly 1 year, and is 
intended to be used by an App Services with an ID of "boiboi-cul8r". Our 
completed JSON payload looks like this:

.. code-block:: javascript

   {
      "sub": "1234567890",
      "name": "Caleb",
      "iat": 1617313420,
      "exp": 1648849420,
      "aud": "boiboi-cul8r"
   }
   

Verify Signature
++++++++++++++++

The final step in creating the JWT is to add a 256-bit secret with which the 
token is encoded. In this last section, find the field with the placeholder 
text of "your-256-bit-secret". Paste in any 256-bit string value into this field.
If you are uncertain what value to use, consider visiting a random key 
generator website, like `keygen.io <https://keygen.io/>`_, and  
copy one of the 256-bit values that has been generated. 

.. important::

   The key you use must only contain ASCII letters, numbers, underscores, 
   and hyphens, and must be between 32 and 512 characters long.

.. note::

   Keep track of this secret, as you will need it in the next section when 
   we configure App Services authentication.

After pasting in your key, check the ``secret base64 encoded`` check box.

At this point, you have generated a JWT key that can be used with — and 
only with — the App you specified. Copy this key from the 
:guilabel:`Encoded` box and temporarily save it in a text document. Your JWT 
will be 3 sections of values, separated by periods, and looks something like 
the following (your token will **not** match this!):

.. code-block:: sh
   :copyable: false

   eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. ⤶ 
   eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkNhbGViIiwiaWF0IjoxNjE3MzEzNDIwLCJle ⤶ 
   HAiOjE2NDg4NDk0MjAsImF1ZCI6ImJvaWJvaS1jeWFsOHIifQ. ⤶ 
   GaIE4e6mGxlIBNnz4FcheFBUmxd25GK-rfOfF6F85rY


Enable JWT Authentication in Your App
`````````````````````````````````````

If you are not currently logged in to `App Services <https://realm.mongodb.com?tck=docs_realm>`_ 
do so now and navigate to the App that you specified when generating the 
JWT in the previous section.


1. In the left-hand navigation, under :guilabel:`Data Access`, select 
   :guilabel:`Authentication`.

2. Select the :guilabel:`Authentication Providers` tab.

3. Near the bottom of the list of providers, select :guilabel:`Custom JWT Authentication`.

4. Use the following table to set the properties on this page:

   .. list-table::
      :header-rows: 1
      :widths: 30 70

      * - Field
        - Value
      
      * - :guilabel:`Provider Enabled`
        - Select to enable
      
      * - :guilabel:`Verification Method`
        - ``Manually specify signing keys``
      
      * - :guilabel:`Signing Algorithm`
        - ``HS256``
      
      * - :guilabel:`Signing Key (Secret Name)`
        - Provide a name that will have some meaning to you (for example, "newKey"), 
          and then click the box that appears immediately below the name that reads 
          "Create <key name>".

          In the resulting :guilabel:`Signing Key` text box, paste in the 256-bit 
          key that you used when generating the JWT in the previous section. **Do 
          not** click the "Add Signing Key" button.

          .. warning::

             A :guilabel:`Signing Key` is a secret key and anyone with the
             key can issue valid user credentials for your app. Ensure that
             it's never stored in a publicly accessible location, such as a
             git repository, message board, or in your code.
      
      * - :guilabel:`Metadata Fields (Optional)`
        - Leave blank
      
      * - :guilabel:`Audience (Optional)`
        - Leave blank.

5. When you have set all of the values, click :guilabel:`Save`. If you are  
   prompted at the top of the screen to do so, review and deploy your changes. 

Update Your Client to Use JWT Authentication
````````````````````````````````````````````

The final step in this tutorial is to update your client application to use 
JWT authentication. The a Realm SDKs make this process straightforward, 
and while each language has its own specific implementation, the pattern they 
each use is the same: pass the generated token to a login call. For code 
examples that demonstrate JWT authentication, see the documentation for 
the Realm SDKs:

- :ref:`C++ SDK <cpp-login-custom-jwt>`
- :ref:`Flutter SDK <flutter-login-custom-jwt>`
- :ref:`Java SDK <java-login-custom-jwt>`
- :ref:`Kotlin SDK <kotlin-login-jwt>`
- :ref:`.NET SDK <dotnet-login-custom-jwt>`
- :ref:`Node SDK <node-login-custom-jwt>`
- :ref:`React Native SDK <react-native-login-custom-jwt>`
- :ref:`Swift SDK <ios-login-custom-jwt>`
- :ref:`Web SDK <web-login-custom-jwt>`

.. _custom-jwt-authentication-summary:

Summary
-------

- Custom JWT authentication allows you to identify your application's
  users via a JSON Web Token issued outside of App Services.
- App Services expects JWT audience values to be the App ID of the App
  unless otherwise configured in the application.
- App Services can verify JWTs using either
  :ref:`manually specified keys and signing algorithms
  <custom-jwt-authentication-configuration-manually-signing-keys>` or a
  :ref:`JSON Web Key URI
  <custom-jwt-authentication-configuration-jwk-uri>`.
- You can pass custom :ref:`user data
  <custom-jwt-authentication-configuration-metadata-fields>` in your JWT
  that App Services refreshes whenever the user refreshes their token.
