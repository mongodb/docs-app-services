.. _apple-id-authentication:

=======================
Apple ID Authentication
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

The Apple ID authentication provider allows users to log in with their
Apple ID credentials through `Sign in with Apple
<https://developer.apple.com/sign-in-with-apple/>`_. This authentication
method uses the industry-standard `OAuth 2.0 <https://oauth.net/2/>`_
authorization protocol.

When a user successfully logs in through Sign in with Apple, Apple
returns a credential object that includes a :jwt-io:`JSON Web Token
<introduction>` that the Apple ID provider uses to authenticate the
user. If the user has granted permissions to your app, the credential
object may also include the user's name and email address.

For additional information on how to implement Sign in with Apple, check
out:

- The official :apple:`Sign in with Apple documentation <sign-in-with-apple/>` 
  on Apple's Developer Portal
- The `Introducing Sign In with Apple <https://developer.apple.com/videos/play/wwdc2019/706>`_ 
  session from WWDC 2019
- The associated `reference application <https://developer.apple.com/documentation/authenticationservices/adding_the_sign_in_with_apple_flow_to_your_app>`_.

.. note::
   
   An iOS app that uses Apple ID authentication must target iOS 13 or newer.

.. _apple-auth-prerequisites:

What You'll Need
----------------

Before you can implement Apple ID authentication you will need the
following:

- An active `Apple Developer Program
  <https://developer.apple.com/programs/>`_ account.

- `Xcode 11 <https://developer.apple.com/xcode/>`_ or newer.

.. _configure-apple-auth:
.. _config-oauth2-apple:

Configure Apple ID Authentication
---------------------------------

.. procedure::

   .. step:: Create an App ID

      An Apple **App ID** represents your application and allows you to
      access services like Sign in with Apple. To configure the Apple ID
      provider, you must create a new App ID.

      1. Navigate to the :guilabel:`Certificates, Identifiers and Profiles`
         page of the `Apple Developer Portal
         <https://developer.apple.com/account>`_.

      #. Click :guilabel:`Identifiers` in the {+leftnav+}.

      #. Click the blue plus icon next to :guilabel:`Identifiers`.

      #. On the :guilabel:`Register a New Identifier` page, select
         :guilabel:`App IDs` and then click :guilabel:`Continue`.

      #. On the :guilabel:`Register an App ID` page, select
         the :guilabel:`Platform` that your app runs on and then enter a
         brief :guilabel:`Description` and a :wikipedia:`reverse-dns
         notation <Reverse_domain_name_notation>` :guilabel:`Bundle ID`.

      #. Scroll down the :guilabel:`Register an App ID` page until you see
         the :guilabel:`Sign in with Apple` capability. Check the checkbox
         to enable the capability.

      #. Press the :guilabel:`Continue` button at the top of the page. Complete
         any other setup steps that apply to your app, and then press the
         :guilabel:`Register` button.


   .. step:: Create a Services ID

      An Apple **Services ID** represents a single application and allows
      you to configure an authorization callback URL and define a private
      key for the application.

      1. Click :guilabel:`Identifiers` in the {+leftnav+}.

      #. Click the blue plus icon next to :guilabel:`Identifiers`.

      #. On the :guilabel:`Register a New Identifier` page, select
         :guilabel:`Services IDs` and then click :guilabel:`Continue`.

      #. On the :guilabel:`Register a Services ID` page, enter a brief
         :guilabel:`Description` and a :wikipedia:`reverse-dns notation
         <Reverse_domain_name_notation>` :guilabel:`Identifier`.

         .. important:: Save the Identifier

            The :guilabel:`Identifier` value of the Services ID is your
            application's :guilabel:`Client ID`. You will need this value
            later to configure the Apple ID provider in Atlas App Services.

         Press the :guilabel:`Continue` button. Confirm the details, and
         then press :guilabel:`Register`.

      #. Click into the service you just created. Check the checkbox to enable
         :guilabel:`Sign in with Apple` and then click :guilabel:`Configure`.
         Select the App ID that you created as the :guilabel:`Primary App ID`.

      #. Enter your domains, subdomains, and return URLs for the Services ID.
         Press the :guilabel:`Next` button.

      #. Click :guilabel:`Continue` and then click :guilabel:`Save`.
         Confirm that you have correctly configured the Services ID and
         then click :guilabel:`Register`.


   .. step:: Create a Private Key

      The client secret for Sign in with Apple is a JSON Web Token that you
      create and sign with a **private key**. You need to generate the
      private key through the Apple Developer Portal.

      1. Click :guilabel:`Keys` in the {+leftnav+}.

      #. Click the blue plus icon next to :guilabel:`Keys`.

      #. On the :guilabel:`Register a New Key` page, enter a descriptive
         :guilabel:`Key Name` and then scroll down to find the
         :guilabel:`Sign in with Apple` row. Check the checkbox to enable
         Sign in with Apple and then click :guilabel:`Configure`.

      #. On the :guilabel:`Configure Key` page, select the App ID that you
         created as the :guilabel:`Primary App ID` and then click
         :guilabel:`Save`.

         .. figure:: /images/apple-auth-configure-key.png
            :alt: The Configure Key page in the Apple Developer Portal

      #. Click :guilabel:`Continue` to review your key configuration. When
         you're sure that you've configured the key correctly, click
         :guilabel:`Register`.

      #. Copy the :guilabel:`Key ID` value somewhere that you can access it
         later and then click :guilabel:`Download` to download the key as a
         ``.p8`` text file. You will use these to generate the client
         secret.

         .. important:: Save the Key

            You can only download the key one time. Make sure that you save
            the key somewhere safe in case you need it again. If you lose
            the key, you will need to generate a new one.


   .. step:: Create the Client Secret JWT

      You can now create the client secret JWT for the Apple ID
      authentication provider. Make sure that you have the following
      information:

      - The :guilabel:`Services ID` that you created.

      - The :guilabel:`Key ID` of the key that you created and the ``.p8``
        file that contains the key.

      - Your Apple Team ID. You can find this in the top right of the Apple
        Developer Portal.

        .. figure:: /images/apple-team-id.png
           :alt: An Apple team ID in the Apple Developer Portal

      Once you've confirmed that you have all the required information, you can use
      a script to generate the JWT. You may define your own script or use the
      script in this step.

      To generate the JWT, we'll use the :rubygems:`jwt <gems/jwt>` gem. To install
      it, run the following:

      .. code-block:: shell

         gem install jwt

      Create a new file called ``generate_client_secret.rb`` and copy the following
      code block into the file.

      .. code-block:: ruby

         # Source: https://developer.okta.com/blog/2019/06/04/what-the-heck-is-sign-in-with-apple
         require 'jwt'

         # Update these values with your app's information
         team_id = '<Apple Team ID>'
         client_id = '<Apple Services ID>'
         key_id = '<Key ID>'
         key_file = '<Key File Path>'

         # Define the JWT's headers and claims
         headers = {
           # The token must be signed with your key
           'kid' => key_id
         }
         claims = {
           # The token is issued by your Apple team
           'iss' => team_id,
           # The token applies to Apple ID authentication
           'aud' => 'https://appleid.apple.com',
           # The token is scoped to your application
           'sub' => client_id,
           # The token is valid immediately
           'iat' => Time.now.to_i,
           # The token expires in 6 months (maximum allowed)
           'exp' => Time.now.to_i + 86400*180,
         }

         # Read in the key and generate the JWT
         ecdsa_key = OpenSSL::PKey::EC.new IO.read key_file
         token = JWT.encode claims, ecdsa_key, 'ES256', headers

         # Print the JWT to stdout
         puts token

      Update the values of ``team_id``, ``client_id``, ``key_id``, and
      ``key_file`` to match your application's information and then save
      the file. When you're ready to generate the JWT, run the script in
      your shell:

      .. code-block:: shell

         ruby generate_client_secret.rb >> client_secret.txt

      .. important:: Save the JWT

         The ``generate_client_secret.rb`` script saves the JWT string to a
         file called ``client_secret.txt``. You will need the JWT to
         configure the Apple ID provider in App Services.


   .. step:: Configure the Provider in App Services

      At this point you have configured an Apple application and generated
      the required OAuth 2.0 credentials. You can now configure the Apple
      ID authentication provider with the credentials to allow App Services
      client application users to log in.

      .. tabs-realm-admin-interfaces::

         .. tab::
            :tabid: ui

            1. Click :guilabel:`Authentication` in the {+leftnav+} and
               then click :guilabel:`Apple ID`.

            #. Turn on the :guilabel:`Provider Enabled` toggle.

            #. For the App Services :guilabel:`Client ID`, enter the
               Apple :guilabel:`Services ID` you got when you created a
               :guilabel:`Services ID` in step 2 above.

            #. For :guilabel:`Client Secret`, create a new :ref:`secret
               <app-secret>` with a descriptive name and set the
               :guilabel:`Client Secret Value` to the JWT string that you
               generated. Alternatively, you can select a pre-existing
               secret that contains the JWT.

            #. For :guilabel:`Redirect URIs`, click :guilabel:`Add Redirect
               URI` and enter the URL that App Services should redirect to once
               the OAuth process is complete. Provide a URL for a domain
               that you control and then use a `universal link
               <https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html>`_
               to redirect the user back to your app.

            #. Click :guilabel:`Save` to finish configuring the provider.
               To make the provider available to client applications, you
               need to deploy your changes. Click :guilabel:`Review &
               Deploy Changes` and then click :guilabel:`Deploy`.

         .. tab::
            :tabid: cli

            To enable and configure the Apple authentication provider with
            :ref:`realm-cli <realm-cli-quickstart>`, define a :ref:`configuration
            object <appconfig-auth>` for it in ``/auth/providers.json``.

            Apple provider configurations have the following form:

            .. code-block:: none
               :caption: /auth/providers.json

               {
                 "oauth2-apple": {
                   "name": "oauth2-apple",
                   "type": "oauth2-apple",
                   "disabled": <boolean>,
                   "config": {
                     "clientId": "<Apple Services ID>"
                   },
                   "secret_config": {
                     "clientSecret": "<Secret Name>"
                   },
                   "redirect_uris": ["<string>", ...]
                 }
               }

            .. list-table::
               :header-rows: 1
               :widths: 15 30

               * - Field
                 - Description

               * - :guilabel:`Client ID`

                   | *config.clientId*

                 - Required. The Apple :guilabel:`Services ID` that you created
                   when you completed step 2 above.

               * - :guilabel:`Client Secret`

                   | *secret_config.clientSecret*

                 - Required. The name of a :ref:`Secret <app-secret>` that stores
                   the :guilabel:`Client Secret` JWT that you generated.

               * - :guilabel:`Redirect URIs`

                   | *redirect_uris*

                 - Required for web applications.
                   A list of allowed redirect :abbr:`URIs (Uniform Resource
                   Identifiers)`.

                   Once a user completes the authentication process,
                   App Services redirects them back to either a specified redirect URI or,
                   if no redirect URI is specified, the URL that they initiated the
                   authentication request from. App Services will only redirect a user to
                   a URI that exactly matches an entry in this list, including the
                   protocol and any trailing slashes.

                   Provide a URL for a domain that you control and then use
                   a `universal link
                   <https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html>`_
                   to redirect the user back to your app.

            Once you've created the configuration file, you can make the
            Apple ID authentication provider available to client
            applications by deploying your application.

            To deploy a draft application with {+cli+}:

            .. code-block:: shell

               realm-cli push

            To deploy a draft application with automatic :doc:`GitHub deployment
            </manage-apps/deploy/automated/deploy-automatically-with-github>`:

            .. code-block:: shell

               git add ./auth/providers.json
               git commit -m "Configure and Enable Apple ID Authentication"
               git push origin <branch name>


.. _apple-authentication-examples:

Examples
--------

For code examples that demonstrate how to register and log in using
Apple authentication, see the documentation for the {+client-sdks+}:

.. tabs-realm-sdks::

   .. tab::
      :tabid: android

      To register or log in an Apple user from the Android Client SDK, see the
      :ref:`Java SDK guide to Apple authentication <java-login-apple>`.

   .. tab::
      :tabid: ios

      To register or log in an Apple user from the iOS Client SDK, see the
      :ref:`Swift SDK guide to Apple authentication <ios-login-apple>`.

   .. tab::
      :tabid: web

      To register or log in an Apple user from the Web Client SDK, see the
      :ref:`Web SDK guide to Apple authentication <web-login-apple>`.

   .. tab::
      :tabid: node
      
      To register or log in an Apple user from the Node Client SDK, see the
      :ref:`Node SDK guide to Apple authentication <node-login-apple>`.

   .. tab::
      :tabid: react-native

      To register or log in an Apple user from the React Native Client SDK, see the
      :ref:`React Native SDK guide to Apple authentication <react-native-login-apple>`.

   .. tab::
      :tabid: dotnet

      To register or log in an Apple user from the .NET Client SDK, see the
      :ref:`.NET SDK guide to Apple authentication <dotnet-login-google>`.

   .. tab::
      :tabid: kotlin

      To register or log in an Apple user from the Kotlin Client SDK, see the
      :ref:`Kotlin SDK guide to Apple authentication <kotlin-login-google>`.
