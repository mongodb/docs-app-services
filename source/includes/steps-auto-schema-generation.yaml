title: Define an {+service-short+} Schema
ref: define-realm-schema
content: |
  To get started, ensure you have an {+service-short+} Schema defined. {+service+}
  will translate this {+service-short+} Schema into a {+frontend-schema+} to be
  configured and utilized in your mobile application.

  .. important:: Primary Key _id Required
     
     To work with {+sync+}, your data model **must** have a primary key field
     called ``_id``. ``_id`` can be of type ``string``, ``int``, ``uuid``, ``ObjectId``, or
     ``objectId``.

  .. note:: 
     
     To learn how to define a schema for a collection in the synced cluster, see
     :ref:`enforce-a-schema`.

---
title: View the {+frontend-schema+}
ref: view-realm-db-schema
content: |

  The {+frontend-schema+} defines and validates your data in your mobile
  client application. To view your {+frontend-schema+}, navigate to the
  :guilabel:`SDKs` page, where you can view your {+service-short+} Schema as a
  generated {+frontend-schema+} in your language of choice.

  .. figure:: /images/translate-jsonschema-into-realm-data-model.png
     :alt: The generated Realm Object Models and associated warnings in the UI
     :width: 750px
     :lightbox:
---
title: View and Fix Schema Errors
ref: view-schema-errors
content: |

  {+service-short+} may fail to generate some or all of your {+frontend-schema+} based on your
  {+service-short+} Schema. You can view a list of the errors in your {+service-short+} Schema that
  prevented {+service-short+} from generating the {+frontend-schema+} on the :guilabel:`SDKs`
  page of the {+ui+}.

  Common errors include mismatched types, and differences in the way
  relationships are represented in the two respective models. For each
  error or warning, modify your {+service-short+} Schema to fix the specified issue.

  .. figure:: /images/schema-translation-errors-warnings.png
     :alt: A detailed list in the UI of warnings and errors that occurred during model
     :width: 750px
     :lightbox:
---
title: Open an {+service-short+} with the {+frontend-schema+}
ref: open-realm-with-data-model
content: |
  You can immediately use the generated {+frontend-schema+} in your
  client application. In order to begin enforcing data validation with
  your data model, you can open an {+service-short+} with the {+frontend-schema+}.
  This will prevent improper data from entering your database from your
  mobile client. Click :guilabel:`Copy` on the right-hand side of the
  {+frontend-schema+} for the Object Model you want to integrate into
  your mobile application code. This will copy the {+frontend-schema+}
  code for the SDK of your choice into your clipboard. Open your mobile
  application code in your IDE and paste the {+frontend-schema+} code in.

  .. tabs-realm-languages::
    
    .. tab::
        :tabid: javascript
        
        .. code-block:: javascript
           
          const UserSchema = { // your copied and pasted {+frontend-schema+}
            name: 'User',
            properties: {
              _id: 'objectId',
              _partition: 'string',
              name: 'string',
              birthday: 'date'
            },
            primaryKey: '_id'
          };
          // Initialize an {+service-short+} with your {+frontend-schema+}
          {+service-short+}.open({schema: UserSchema, sync: { /* ... */ }})
            .then(realm => {
              // ... use the realm instance to read and modify data
            })

  .. seealso::

     - :ref:`Sync Data on Android <java-sync-data>`
     - :ref:`Sync Data on iOS <ios-sync-changes-between-devices>`
     - :ref:`Sync Data on Node <node-sync-changes-between-devices>`
     - :ref:`Sync Data on React Native <react-native-sync-changes-between-devices>`
