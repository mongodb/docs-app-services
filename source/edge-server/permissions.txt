.. _edge-server-permissions-guide:

=============================
Edge Server Permissions Guide
=============================

.. meta::
   :description: Learn how to configure permissions for Edge Servers and client connections.

.. facet::
   :name: genre 
   :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Edge Server data access is governed by the intersection of:

- Role-based permissions
- User authentication
- The query used to sync data to the Edge Server instance
- If using Atlas Device SDK, the query used to sync data with the client

This page explores high-level Edge Server and client permissions configuration,
and provides examples to illustrate basic permissions principles.

Related documentation:

- If you are new to role-based permissions in Atlas, get an overview of 
  the permissions engine at :ref:`permissions`.
- For information about how to define roles & permissions, refer to 
  :ref:`define-roles-and-permissions`.
- Edge Server uses Device Sync to sync data between the Edge Server instances
  and Atlas. Edge Server and client roles must use 
  :ref:`Device Sync-compatible permissions <device-sync-compatibility>`.

.. _edge-server-permissions:

Edge Server Permissions
~~~~~~~~~~~~~~~~~~~~~~~

An Edge Server instance is a user, similar to other incoming client 
connections. The Edge Server must authenticate with Atlas, and it has its 
own permissions to determine what data the instance can read and write.

You can configure rules to generally apply to all Edge Servers in your service.
Or you can get more granular with rules to specify a subset of data that
the Edge Server instance can read and write.

All Edge Servers
````````````````

You can create a role that applies to all Edge Server instances by specifying
an ``applyWhen`` :ref:`rule expression <expressions>` where the 
:ref:`%%user_type <rule-expression-user-expansion>` is ``edge``:

.. code-block:: json

   {
     "name": "edgeServerRole",
     "apply_when": {
       "%%user.type": {
         "$eq": "edge"
       }
     },
     ...customize the permissions for Edge Servers...
   }

For example, if your data set does not contain sensitive data, such as a 
weather service, you might add a role stating that Edge Servers can read and 
write all data:

.. code-block:: json

   {
     "name": "readAndWriteAll",
     "apply_when": {
       "%%user.type": {
         "$eq": "edge"
       }
     },
     "document_filters": {
       "read": true,
       "write": true
     },
     "insert": true,
     "delete": true,
     "search": true,
     "read": true,
     "write": true
   }

A Specific Edge Server
``````````````````````

If your data set contains sensitive information that should not sync to
every Edge Server instance, you can use permissions to filter the data so a 
specific instance can only access a subset of the data. Or you can use 
permissions to configure an Edge Server instance to read data, but not write
it.

Because every Edge Server instance is a user, you can use the Edge Server's
``user_id`` to configure permissions for a given instance. You can create a 
role that restricts the data that syncs with a specific Edge Server instance
using a :ref:`rule expression <expressions>` where the 
:ref:`%%user_id <rule-expression-user-expansion>` is the Edge Server's 
``user_id``. You can get the Edge Server instance ``user_id`` from the
:ref:`edge-server-details`, or from the Admin API. [PLACEHOLDER - Add link 
to the relevant Admin API endpoint when the docs PR is merged.]

Read/Write Own Documents
++++++++++++++++++++++++

You can restrict an Edge Server instance to read and write only its own 
documents using the ``user_id``. For example, if an Edge Server instance 
represents a health care clinic, you might only want to sync data relevant to 
that clinic's patients:

.. code-block:: json

   {
     "name": "facilityItemsOnly",
     "apply_when": {},
     "document_filters": {
       "write": {
         "facility_id": "%%user.id"
       },
       "read": {
         "facility_id": "%%user.id"
       },
     },
     "read": true,
     "write": true,
     "insert": true,
     "delete": true,
     "search": true
   }

In this example, every document has a ``facility_id`` property whose value is
the Edge Server's ``user_id``. This role means that the Edge Server can only
read and write documents with a ``facility_id`` matching its own ``user_id``.

Read All, Write Own
+++++++++++++++++++

You can configure an Edge Server instance to be able to read all data, but
write only its own data. For example, in a retail setting, an Edge Server 
instance might represent a store inventory system. You might want the store to
have the ability to search across all inventory for an item, but only sell 
items in its own inventory.

.. code-block:: json

   {
     "name": "readAllWriteOnlyStoreItems",
     "apply_when": {},
     "document_filters": {
       "write": {
         "store_id": "%%user.id"
       },
       "read": true
     },
     "read": true,
     "write": true,
     "insert": true,
     "delete": true,
     "search": true
   }

Client Permissions
~~~~~~~~~~~~~~~~~~

Clients that connect to an Edge Server instance have their own permissions. 
You can think of an Edge Server instance's permissions as a filter between the
data in Atlas and the data that a client can read and write.

In a healthcare setting similar to the Edge server instance example above, the
Edge Server instance may only read and write data that is relevant to its own 
facility. A client may then further restrict the permissions. For example, a 
patient in the facility may only view their own data.

You represent these as independent roles within the ``roles`` array.
For example:

.. code-block:: json

   {
     "collection": "Visits",
     "database": "PatientRecords",
     "roles": [
       {
         "name": "facilityItemsOnly",
         "apply_when": { 
           "%%user.type": {
             "$eq": "edge"
           }
         },
         "document_filters": {
           "write": {
             "facility_id": "%%user.id"
           },
           "read": {
             "facility_id": "%%user.id"
           },
         },
         "insert": true,
         "delete": true,
         "search": true,
         "read": true,
         "write": true
       },
       {
         "name": "patientOwnRecordsOnly",
         "apply_when": {},
         "document_filters": {
           "write": {
             "patient_id": "%%user.id"
           },
           "read": {
             "patient_id": "%%user.id"
           }
         },
         "read": true,
         "write": true,
         "insert": true,
         "delete": true,
         "search": true
       }
     ]
   }

In this example, a ``PatientRecords`` database has a ``Visits`` collection.
The two roles determine which documents the Edge Server instance can sync,
and which documents an individual connected client can sync:

- The ``facilityItemsOnly`` role filters items that sync to the Edge Server
  instance. The only items that sync to the facility are records where the
  ``facility_id`` matches the Edge Server instance ``user_id``.
- The ``patientOwnRecordsOnly`` role filters items that can sync to a connected
  client device. The only items that a connected client can see are visits 
  where the ``patient_id`` is the client's ``user_id``.

In a setting where you have many different types of clients that should each
have access to a subset of the data, you may define many different client 
roles. For example, in a healthcare setting, you may use different roles for:

- Patients: provide access to their own medical records *and* address billing 
  information.
- Billing specialists: provide access to patient address and billing 
  information, but not medical records
- Doctors: provide access to patient medical records, but not address and
  billing information.

.. figure:: /images/field-level-permissions.png
   :alt: Documents showing different data available to three different roles - a patient, a billing specialist, and a doctor.
   :lightbox:

Edge Server Supports Field-Level Permissions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Edge Server supports :ref:`field-level-permissions`. You can define 
field-level permissions for the Edge Server instance, for the clients that
connect to the Edge Server instance, or both.
