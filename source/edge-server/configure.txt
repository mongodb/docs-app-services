.. _edge-server-configure:

=====================
Configure Edge Server
=====================

.. meta::
   :keywords: code example
   :description: Learn how to download, install, configure, and run a MongoDB Edge Server instance.

.. facet::
   :name: genre 
   :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

After you create an Edge Server instance in Atlas, you must configure the 
hardware that runs the Edge Server instance. For most use cases, you'll 
provision hardware on-premises to host the Edge Server instance. While you're 
developing your Edge Server application, you may host it on a cloud server 
for convenience.

Client devices on-prem connect to the Edge Server instance. Your instance 
connects to the Edge Server Service or Device Sync Service, depending on
how you create it. Clients do not connect to MongoDB Atlas directly.

.. image:: /images/edge-server-in-action.png
   :alt: Architecture diagram showing devices connected to an Edge Server, which is connected to Atlas

This page details how to configure and perform operations on the Edge Server
instance.

.. _edge-server-create-device-sync-app:

Prerequisites
-------------

Each Edge Server instance connects to a service in your Atlas project. Before 
you can use an Edge Server instance, you must create the relevant service, and 
configure an authentication provider and permissions for your Edge Server 
instance.

For more information, refer to :ref:`create-edge-server-service`.

.. _edge-server-host-requirements:

Edge Server Host Requirements
-----------------------------

The host that runs Edge Server instance may be an EC2 instance or other cloud 
server, or hardware that you provision on-site.

.. tip::

   For proof-of-concept testing, you can launch an EC2 instance running 
   Ubuntu Server 18.x. Under Network settings, add a rule to allow access 
   via HTTP/Port 80. Free tier settings are sufficient for small PoC projects.

.. _edge-server-hardware-requirements:

Required Hardware
~~~~~~~~~~~~~~~~~

The current minimum hardware requirements to run an Edge Server instance are:

- CPU: 64-bit, quad-core processor
- RAM: 8GB memory
- Storage: 32GB disk space

These requirements may change after Edge Server benchmarking is complete.

.. _edge-server-os-support:

OS Compatibility
~~~~~~~~~~~~~~~~

Edge Server has been verified with the following operating systems:

- macOS 11.x and newer running on M1 or Intel 2018+ MacBook Pros
- Raspberry Pi OS 12
- Ubuntu Server 18+

Other operating systems may be possible, but have not yet been verified.

.. _edge-server-required-software:

Required Software
~~~~~~~~~~~~~~~~~

For convenience, you can manage an Edge Server instance with Docker in Swarm 
mode during development. In production environments, use Kubernetes to manage 
your Edge Server containers.

If you do not have Docker installed and Swarm enabled, you will be prompted
to resolve these dependencies prior to running the Edge Server.

.. _edge-server-required-network-access:

Required Network Access
~~~~~~~~~~~~~~~~~~~~~~~

To accept connections from sync clients or connections using a MongoDB URI, 
the host that runs the Edge Server must allow access to incoming connections.

If you run the Edge Server on your own infrastructure, you don't need to open
the instance to the general internet. You only need to ensure your client 
devices can access it.

For cloud infrastructure, such as running a development environment on
EC2, you must open ports to accept incoming connections:

- Development: Use HTTP on port 80 for simplicity and speed of development.
- Production: Use SSL with port 443 to secure access to production data.

Edge Server supports TLS.

We recommend setting up TLS termination for HTTP access, including Device SDK 
traffic, through a Kubernetes controller.

Connections through MongoDB URIs can configure TLS through ``edgectl``.

.. _edge-server-install-and-configure:

Install and Configure the Edge Server Instance
----------------------------------------------

After creating an Edge Server Service or Device Sync Service, you must create 
an Edge Server instance. Each service may have many Edge Server instances. When 
you create an Edge Server instance, you get an installation script you can use 
to download a tool to install and manage the Edge Server instance, ``edgectl``. 
You also get a token you can use to register the Edge Server instance. For more
details, refer to :ref:`create-edge-server-instance`.

Use the installation script to set up and run the Edge Server instance on the 
host.

.. include:: /includes/important-stop-edge-server.rst

.. procedure::

   .. step:: Install the Edge Server Code

      Edge Server uses a command-line tool called ``edgectl`` to manage
      the Edge Server instance on the host hardware. This includes an install
      script to manage the installation and install required dependencies.

      Use this command to install the command-line tool and the Edge Server 
      code on the device where you want to run the Edge Server instance:

      .. code-block:: shell

         curl -s https://services.cloud.mongodb.com/edge/install.sh | bash

      Follow the prompts to download and install the Edge Server code.

   .. step:: Configure the Edge Server Instance

      Use ``edgectl`` to configure the Edge Server instance.

      .. code-block:: shell

         edgectl config --app-id="<INSERT-YOUR-APP-ID-HERE>" --platform=compose

      The minimum required parameters are the ``app-id`` and the ``platform``.

      - ``--app-id``: Provide your Edge Server App ID. For example, 
        ``--app-id="edge-server-vtoyh"``. For more information, refer to 
        :ref:`find-app-id`. 
      - ``--platform``: You can use Docker Compose to install and manage your
        Edge Server instance in a development environment, or Kubernetes to 
        manage the instance in a production environment. Valid values are 
        either ``compose`` or ``kubernetes``.

      You can provide the following optional flags to specify additional
      configuration details:

      .. list-table::
         :header-rows: 1
         :widths: 25 10 65

         * - Field name
           - Type
           - Value

         * - ``--config-path``
           - String
           - The location on disk to store configuration files. Defaults to
             ``~/.mongodb-edge/``.

         * - ``--query``
           - String
           - The query that defines what data to sync between the Edge
             Server instance and Atlas. For information about populating this 
             query, refer to :ref:`specify-edge-server-query`.

         * - ``--http-port``
           - Int
           - The port on which the instance listens for HTTP connections. The
             default value is ``80``. 

         * - ``--wireprotocol-port``
           - Int
           - The port on which the instance listens for MongoDB Wire Protocol
             connections, such as connections from a MongoDB Driver. The
             default value is ``27021``.
         
         * - ``--insecure-disable-auth``
           - Boolean
           - If ``true``, users can connect anonymously to the instance through
             Wire Protocol or Atlas Device SDK clients. Defaults to ``false``.

         * - ``--no-user``
           - Boolean
           - If ``true``, Edge Server does not prompt for user creation. If
             ``false``, Edge Server connects to Atlas to check if an 
             :ref:`email/password user <email-password-authentication>` exists
             in the service. If a corresponding email/password user does not 
             exist, it interactively prompts for a username and password to
             create a user. Defaults to ``false``.

         * - ``--disable-ui``
           - Boolean
           - If true, the Edge Server instance does not run a UI on the 
             registered ``http-port``. Defaults to ``false``.

   .. step:: Supply the Edge Server Token

      When first configuring the Edge Server instance, you're prompted to 
      supply the Edge Server token. This is the token you got when you added 
      the instance to your service.

      If you no longer have the token, you can generate a new token from the
      :ref:`edge-server-details` in your service.

      The Edge Server instance exchanges this token for a secret. It uses the
      secret to authenticate with Atlas when it syncs data.

.. _start-and-stop-edge-server:

Start and Stop the Edge Server
------------------------------

Use ``edgectl`` to start and stop the Edge Server instance.

To start all Edge Server instance containers, use the ``start`` command:

.. code-block:: shell

   edgectl start

To stop all Edge Server instance containers, use the ``stop`` command:

.. code-block:: shell

   edgectl stop

.. include:: /includes/important-stop-edge-server.rst

.. _check-edge-server-status:

Check the Edge Server Status
----------------------------

When the Edge Server instance is running, you can see the status of the 
instance with:

.. code-block:: shell

   edgectl status

This gives you information about the state of the Edge Server containers, and
a detailed status for the Sync server with a breakdown of important 
information. It may look similar to:

.. code-block:: json
   :copyable: false

   {
      "mongoContainerStatus": {
         "message": "running"
      },
      "mongoDBStatus": {
         "message": "ready"
      },
      "syncServerContainerStatus": {
         "message": "running"
      },
      "syncServerStatus": {
         "message": "ACTIVE"
      },
      "syncServerDetailedStatus": {
         "version": "v0.22.3",
         "status": "ACTIVE",
         "cloud_connected": true,
         "num_local_clients": 0,
         "query": {
            "Item": "truepredicate"
         }
      }
   }

The ``syncServerDetailedStatus`` contains information about the state of the
Edge Server instance. This includes details about its connection to
Atlas, and the clients connected to it, as follows:

.. list-table::
   :header-rows: 1
   :widths: 20 10 70

   * - Field name
     - Type
     - Value

   * - ``version``
     - String
     - The current version of the Edge Server code that the instance is 
       running. If the Edge Server instance falls more than one major version
       behind the latest available version, it is unable to connect to Atlas
       and must be wiped and updated. For more information, refer to 
       :ref:`upgrade-edge-server-version`.

   * - ``status``
     - String
     - The current status of the Edge Server instance. Possible values include:
       ``"ACTIVE"``, ``"FAILED"``. 
       
       ``"ACTIVE"`` means that the instance is running, listening for
       connections, and attempting to sync.

       ``"FAILED"`` means that the instance has encountered an error
       condition that needs intervention. For more information, refer to
       :ref:`troubleshoot-edge-server-instance`.

   * - ``cloud_connected``
     - Boolean
     - If ``true``, the Edge Server instance is currently connected to Atlas.
       If ``false``, the Edge Server instance is not connected to Atlas. When
       the instance is not connected to Atlas, it can still receive local
       connections and sync data with local clients. When it reconnects with
       Atlas, it attempts to sync data that changed while it was not connected.

   * - ``num_local_clients``
     - Int
     - The number of clients that are currently connected to the Edge Server
       instance through Wire Protocol or Atlas Device SDK.

   * - ``query``
     - Object
     - The Edge Server instance Sync query, presented as a JSON object. For
       more information, refer to :ref:`specify-edge-server-query`.

.. _upgrade-edge-server-version:

Upgrade the Edge Server Version
-------------------------------

As the Edge Server evolves, you may want to upgrade your Edge Server 
version to take advantage of new functionality. Additionally, an Edge Server
instance must be no more than one major version behind the latest available, 
or it enters a ``FAILED`` state and cannot connect to Atlas.

.. important:: Required network access

   To upgrade the Edge Server version, ``edgectl`` must have network
   access. You cannot upgrade the Edge Server version if ``edgectl`` is not 
   online.

.. procedure::

   .. step:: Run the Upgrade Command

      You can upgrade the Edge Server version using ``edgectl``:

      .. code-block:: shell

         edgectl update

      Depending on your hardware and network connection, the upgrade 
      process may take seconds to minutes.

      You can optionally specify arguments to upgrade to a specific version:

      .. list-table::
         :header-rows: 1
         :widths: 20 10 70

         * - Field name
           - Type
           - Value

         * - ``--config-path``
           - String
           - The location on disk to store configuration files. Defaults to
             ``~/.mongodb-edge/``.

         * - ``--minor``
           - Boolean
           - Upgrade to the latest minor version for your current major version.
             Defaults to ``true``.

         * - ``--major``
           - Boolean
           - Upgrade to the next major version. Defaults to ``false``.

         * - ``--to``
           - String
           - Upgrade (or downgrade) to an exact version. Default ``""``.

   .. step:: Configure the Edge Server

      After upgrading, ``edgectl`` prompts you to update the configuration.

      .. code-block:: shell

         edgectl config
   
   .. step:: Run the Edge Server to Deploy Changes

      After upgrading, run the Edge Server to deploy the updates.

      .. code-block:: shell

         edgectl start

   .. step:: (Optional) Reset the Edge Server

      If you encounter unexpected behavior after upgrading the Edge Server,
      you may want to reset it and start it again. Run the following 
      command:

      .. code-block::

         edgectl clean

      Then, run the Edge Server again.

      .. code-block::

         edgectl start

   .. step:: Remove Unneeded Files

      After upgrading, you can remove any files that are no longer needed.

      .. code-block::

         edgectl prune

.. _edge-server-cycle-api-key:

Cycle the Edge Server API Key
-----------------------------

To cycle the Edge Server API key:

.. procedure::

   .. step:: Generate a New Token in Atlas

      You can generate a new Edge Server token from the 
      :ref:`edge-server-details`. Use the :guilabel:`Regenerate Token`
      button to get a new token, and copy it. You won't be able to see this
      token again, and must generate a new token if you do not copy it.

   .. step:: Supply the New Edge Server Token

      Use ``edgectl`` to be prompted for a new token from the Edge Server 
      instance:

      .. code-block:: shell

         edgectl --update-token=true

      This triggers ``edgectl`` to prompt you for the token. When you provide 
      it, the Edge Server instance exchanges this token for a secret. It uses 
      the secret to authenticate with Atlas when it syncs data.

      .. important:: Required network access

         To exchange the token for an API key, ``edgectl`` must have network
         access. You cannot cycle the API key if ``edgectl`` is not online.

.. _specify-edge-server-query:

Specify the Edge Server's Query
-------------------------------

You can use the ``--query`` argument with the ``edgectl configure`` command
to specify the Edge Server instance Sync query.

The ``--query`` for an Edge Server instance defaults to ``"*"``, which 
automatically syncs all data in all of the collections in your linked data 
source.

If you would like to filter the data that syncs to your Edge Server, you have
two options:

[PLACEHOLDER - query handling is changing so this will need to be updated
based on the final implementation]
- Pass a simple string query. For example, ``--query="truepredicate"``.
- Pass an object containing one or more collections and queries to sync a 
  subset of your data with Edge Server. This may resemble:

  .. code-block:: json

     {
        "YOUR-SCHEMA-TITLE": "YOUR-QUERY",
        "YOUR-SCHEMA-TITLE": "YOUR-QUERY"
     }

  - ``YOUR-SCHEMA-TITLE``: The ``title`` field of a :ref:`schema <schemas>`, 
    which typically matches the name of a collection in your database. If 
    you're using a template app, this is the ``Item`` collection. Your linked
    Atlas data source may contain many collections, each with a matching 
    schema. If you do not use the default Edge Server query ``"*"`` that syncs
    everything, each schema that you want to sync must have its own query.

  - ``YOUR-QUERY``: The query that determines which documents the Edge 
    Server can sync with a collection. You can use :ref:`Realm Query Language <rql>` 
    to define this query, with the same caveats around :ref:`Flexible Sync RQL 
    Limitations <flexible-sync-rql-limitations>`.

.. _edge-server-query-examples:

Edge Server Query Examples
~~~~~~~~~~~~~~~~~~~~~~~~~~

Sync All Documents
```````````````````

You can sync all documents between Edge Server instance and Atlas. This uses 
the ``truepredicate`` or ``"*"`` query. Because this is a simple query, you 
can pass it as a string with the ``edgectl --query`` argument.

.. code-block:: shell

   edgectl --query="truepredicate"

Sync a Subset of Documents
``````````````````````````

You might only want to sync a subset of documents with an Edge Server instance.
For example, for an instance located in a specific store, you might want to
sync only the documents relevant to that store. An RQL query for that might
look similar to:

.. code-block:: shell

   edgectl --query="store_id == 42"

Specify Different Queries for Multiple Collections
``````````````````````````````````````````````````

For a more complex query, where you want to pass different queries for 
multiple collections, you might want to pass the query as JSON. This enables
you to pass a different query for each schema title as a key-value pair. For
example:

.. code-block:: shell

   edgectl --query={ \
         "Project": "facility_id == 42", \
         "Item": "priority >= 3" \
      }

In this example, we have three collections: ``Project``, ``Item``, and 
``Team``, whose collection names match their schema titles. This query syncs 
data with two of the collections: ``Item`` and ``Project``. The 
``Project`` collection has a list property that represents a 
:ref:`to-many relationship <relationships-to-many>` to the ``Item`` 
collection. We don't want to sync the ``Team`` collection to the Edge Server 
instance. By omitting this schema title from the query, we don't sync any of 
its data to the instance.

With these queries, we are only syncing ``Project`` documents for facility 42. 
Additionally, we are only syncing ``Item`` documents where the ``priority`` 
field's value is greater than or equal to ``3``. In this way, you can combine 
queries to sync only the documents that are relevant to a given Edge Server 
instance.
