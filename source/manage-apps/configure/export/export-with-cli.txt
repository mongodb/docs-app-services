.. _export-app-cli:

============================
Export an {+app+} with {+cli+}
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can use the :ref:`{+service+} CLI <realm-cli-quickstart>` to export 
your {+app+}'s configuration.

.. include:: /includes/note-secrets-not-exported.rst

.. note::

   ``Export`` is the :ref:`v1 {+cli+} <realm-cli-v1>` command, and is an
   alias for ``pull`` in the :ref:`v2 {+cli+} <realm-cli-quickstart>`.  

Prerequisites
-------------

- A :ref:`properly installed <install-realm-cli>` copy of {+cli-bin+} that has
  been added to your system ``PATH``.

- A `{+atlas+}
  <https://www.mongodb.com/realm?tck=docs_realm#atlas-form-container>`_
  :atlas:`programmatic API key </configure-api-access/#programmatic-api-keys>`. 
  You must be a :atlas:`Project Owner </reference/user-roles/#project-roles>` 
  to export an {+app+}.

Procedure
---------

.. procedure::

   .. step:: Authenticate a MongoDB Atlas User

      Use your MongoDB Cloud API Key to log in:

      .. code-block:: shell

         realm-cli login --api-key="<my api key>" --private-api-key="<my private api key>"


   .. step:: Run the App Export Command

      You can export an application's configuration directory by specifying its remote
      App ID and an optional local path. If you do not specify a local path, the
      command outputs the configuration directory in the current working directory.

      .. code-block:: shell

         realm-cli pull --remote=<App ID> --local=<Output Directory Path> [options]

      .. warning::

         The directory specified by ``--local`` must not already exist, otherwise
         {+cli-bin+} throws an error and does not pull the configuration files.

      The command also supports :ref:`additional flags <realm-cli-pull>` that you
      can optionally include to customize your app. The following table lists
      common flags you might use:

      .. list-table::

         * - ``--include-dependencies``
           - If specified, exports any external dependencies included
             in a ``node_modules`` archive in the ``/functions`` directory of your
             {+app+}.

         * - ``--include-hosting``
           - If specified, exports all hosted static assets in the ``hosting/files``
             directory of your {+app+}.


Output
------

Your application will be exported to a local application directory. If
you did not specify a path for the directory with ``--local``, it will
be exported with the same name as the application into the current
working directory.
