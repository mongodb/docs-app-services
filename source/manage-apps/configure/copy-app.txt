.. _copy-realm-app:

=====================
Make a Copy of an {+app+}
=====================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

You can make a copy of an existing {+app+}. You might want to copy an
application when:

- You use feature branches for development. Use a unique copy of the 
  {+app+} for each feature branch to avoid conflicts.
- You use a fresh copy of the {+app+} when running tests to ensure start state.
- You deploy the same app to clusters across regions using a :ref:`local 
  deployment model <local-deployment>`.

Procedure
---------

You can copy your application's configuration in two ways:

- With the :ref:`{+cli+} <deploy-cli>` 
- With :ref:`GitHub deployment <deploy-github>`

.. tabs::

   .. tab:: CLI
      :tabid: cli

      .. warning::

         If you're using :ref:`Automated GitHub Deploy <deploy-github>`, do not 
         update :ref:`your {+app+} configuration with the {+cli+} 
         <deploy-github-make-changes-cli>`. Instead, push your changes to the 
         linked GitHub repository.

      .. procedure::

         .. step:: Log In to MongoDB Cloud

            To configure your app with {+cli-bin+}, you must log in to MongoDB Cloud using
            an :atlas:`API key </configure-api-access/#programmatic-api-keys>` scoped to the organization or
            project that contains the app.

            .. code-block:: bash

               realm-cli login --api-key="<MongoDB Cloud Public API Key>" --private-api-key="<MongoDB Cloud Private API Key>"


         .. step:: Pull the Latest Version of Your App

            You need a local copy of the configuration files for the {+app+} you're copying.
            Pull a local copy of the latest version of your app:

            .. code-block:: bash

               realm-cli pull --remote="<Your App ID>"

            .. tip::

               You can also download a copy of your application's configuration files from
               the :guilabel:`Deployment > Export App` screen in the {+ui+}.


         .. step:: Create New App

            Create a new {+app+}. This is where you add the configuration files from
            the exported app in later steps. To create the app, run:

            .. code-block:: bash

               realm-cli app create

            Follow the CLI prompts to complete app creation. This creates a new directory on
            your local machine with the new app's config files.


         .. step:: Copy App Configuration to New App

            Delete all the configuration files in the new app except for ``realm_config.json``.
            You'll handle ``realm_config.json`` in the next step.

            Copy all the :ref:`configuration files and folders <app-configuration>` of your exported app
            to the new app folder except for the ``realm_config.json`` file.


         .. step:: Configure the New App's ``realm_config.json``

            In the new app's ``realm_config.json``, replace all the contents except for the
            ``"app_id"`` and ``"name"``.

            The new app's ``realm_config.json`` should look something like:

            .. code-block:: javascript

               {
                 "app_id": "mynewapp-abcde", // // Use the new app's ID
                 "name": "MyNewApp", // // Use the new app's ID
                 "config_version": 20210101, // copy from exported app
                 "location": "US-VA", // copy from exported app
                 "deployment_model": "GLOBAL" // copy from exported app
               }


         .. step:: Migrate Secrets to New App

            When you :ref:`export your {+app+} <export-realm-app>`, the export does not include the app's
            :ref:`secrets <app-secret>`. As secrets cannot be read once they're defined,
            you must also have access to the secrets outside of {+service-short+} to import
            them into an {+app+}. If your app doesn't have any secrets, you can skip this step.

            To add the secrets from another {+app+}:

            #. Get the names of all the secrets from the exported app by following the
               :ref:`view secrets documentation <list-secrets>`.
            #. Save the names of all the secrets to a secure location. You don't have access
               to the actual secrets, but it's useful to have a list of the secret names
               to add to your imported app.
            #. Gather the secrets. This cannot be done from within {+service-short+}.
            #. Add all the secrets to the imported app by following the :ref:`define a secret documentation <define-secret>`.
               Secrets must be added one at a time.

            .. note:: Add secrets before pushing app

               You should add all secrets before pushing up the copy of the {+app+} because
               {+service-short+} can require that the secrets exist to push the configuration.
               If the secrets don't exist, the {+cli+} throws an error when you push the
               app in the next step.


         .. step:: Push New App to {+service-short+}

            Now that the app configuration and secrets are updated, push the configuration to your
            remote app. {+cli+} immediately deploys the updated configurations on push.

            .. code-block:: bash

               realm-cli push --remote="<Your New App ID>"

            .. tip::

               If you have :ref:`deployment drafts <deployment-draft>`
               enabled, you get a prompt to review and confirm your changes in the
               terminal. When you approve, {+cli+} immediately deploys the updated
               configurations.

   .. tab:: Github Auto Deploy
      :tabid: github

      .. procedure::

         .. step:: Export the Latest Version of Your App

            Get a local copy of your {+app+} by following the
            :ref:`documentation to export your <export-realm-app>`.


         .. step:: Create New App

            Create a new {+app+}. This is where you add the configuration files from
            the exported app in later steps. Follow the :ref:`UI <create-a-realm-app>`,
            :ref:`CLI <create-app-cli>` or :ref:`API <create-app-api>` documentation
            to create the {+app+}.


         .. step:: Set up Github Automatic Deployment

            Follow the :ref:`documentation to set up Github Automatic Deployment <deploy-github>`
            for your {+app+}.


         .. step:: Copy App Configuration to New App

            Delete all the configuration files in the new app except for ``realm_config.json``.
            You'll handle ``realm_config.json`` in the next step.

            Copy all the :ref:`configuration files and folders <app-configuration>` of your app
            to the imported app folder except for the ``realm_config.json`` file.


         .. step:: Configure the New App's ``realm_config.json``

            In the new app's ``realm_config.json``, replace all the contents except for the
            ``"app_id"`` and ``"name"``.

            The new app's ``realm_config.json`` should look something like:

            .. code-block:: javascript

               {
                 "app_id": "mynewapp-abcde", // don't change
                 "name": "MyNewApp", // don't change
                 "config_version": 20210101, // copy from exported app
                 "location": "US-VA", // copy from exported app
                 "deployment_model": "GLOBAL" // copy from exported app
               }


         .. step:: Migrate Secrets to New App

            When you :ref:`export your {+app+} <export-realm-app>`, the export does not include the app's
            :ref:`secrets <app-secret>`. As secrets cannot be read once they're defined,
            you must also have access to the secrets outside of {+service-short+} to import
            them into an {+app+}. If your app doesn't have any secrets, you can skip this step.

            To add the secrets from another {+app+}:

            #. Get the names of all the secrets from the exported app by following the
               :ref:`view secrets documentation <list-secrets>`.
            #. Save the names of all the secrets to a secure location. You don't have access to
               the actual secrets, but it's useful to have a list of the secret names
               to add to your imported app.
            #. Gather the secrets. This cannot be done from within {+service-short+}.
            #. Add all the secrets to the imported app by following the :ref:`define a secret documentation <define-secret>`.
               Secrets must be added one at a time.


         .. step:: Push New App to Github

            When you are ready to import the app, commit the application
            configuration files and then push them to GitHub:

            .. code-block:: sh

               git add -A
               git commit -m "<commit message>"
               git push origin <branch name>

            Once you successfully push your changes to GitHub, {+service-short+}
            immediately deploys a new version of your application that matches the state
            of the latest commit. Client applications automatically use the newest
            version, so make sure that you also update your client code to use the new
            version.
