.. _appconfig-sync:

=====================================
{+sync+} Configuration Files
=====================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can configure :ref:`{+sync+} <sync>` for your application in the ``sync``
directory:

.. code-block:: none
   
   app/
   └── sync/
       └── config.json

.. _partition-based-sync-config-object:

Partition-Based Sync Configuration
----------------------------------

When you use :ref:`Partition-Based Sync <partition-based-sync>`, your {+service-short+} 
app uses this Sync configuration:

.. code-block:: json
   :caption: sync/config.json
   
   {
     "state": <"enabled" | "disabled">,
     "development_mode_enabled": <Boolean>,
     "service_name": "<Data Source Name>",
     "database_name": "<Development Mode Database Name>",
     "partition": {
       "key": "<Partition Key Field Name>",
       "type": "<Partition Key Type>",
       "permissions": {
         "read": { <Expression> },
         "write": { <Expression> }
       }
     },
     "last_disabled": <Number>,
     "client_max_offline_days": <Number>
   }

.. list-table::
   :header-rows: 1
   :widths: 10 30

   * - Field
     - Description

   * - | ``state``
       | String
     - The current state of the sync protocol for the application.
       
       Valid Options:
       
       - ``"enabled"``
       - ``"disabled"``

   * - | ``service_name``
       | String
     - The name of the :ref:`MongoDB data source <appconfig-data_sources>`
       to sync. You cannot use sync with a :ref:`serverless instance
       <serverless-caveats>` or :ref:`{+adf-instance+} <data-federation-caveats>`.

   * - | ``development_mode_enabled``
       | Boolean
     - If ``true``, :ref:`Development Mode <enable-development-mode>` is enabled
       for the application. While enabled, {+service-short+} automatically stores synced
       objects in a specific database (specified in ``database_name``) and
       mirrors objects types in that database's collection schemas.

   * - | ``database_name``
       | String
     - The name of a database in the synced cluster where {+service-short+} stores data in
       :ref:`Development Mode <enable-development-mode>`. {+service-short+} automatically
       generates a schema for each synced type and maps each object type to a
       collection within the database.

   * - | ``partition.key``
       | String
     - The field name of your app's :ref:`partition key <partition-key>`. This
       field must be defined in the schema for object types that you want to
       sync.

   * - | ``partition.type``
       | String
     - The value type of the partition key field. This must match the type
       defined in the object schema.
       
       Valid Options:

       - ``"string"``
       - ``"objectId"``
       - ``"long"``

   * - | ``partition.permissions.read``
       | Expression
     - An :ref:`expression <expressions>` that evaluates to ``true`` when a user
       has permission to read objects in a partition. If the expression
       evaluates to ``false``, {+service-short+} does not allow the user to read
       an object or its properties.

   * - | ``partition.permissions.write``
       | Expression
     - An :ref:`expression <expressions>` that evaluates to ``true`` when a user
       has permission to write objects in a partition. If the expression
       evaluates to ``false``, {+service-short+} does not allow the user to
       modify an object or its properties. Write permission requires read 
       permission. A user cannot write to a document that they cannot read.

   * - | ``last_disabled``
       | Number
     - The date and time that sync was last paused or disabled, represented by
       the number of seconds since the Unix epoch (January 1, 1970, 00:00:00
       UTC).

   * - | ``client_max_offline_days``
       | Number
     - Controls how long the :ref:`backend compaction <optimize-sync-atlas-usage>`
       process waits before aggressively pruning metadata that some clients
       require to synchronize from an old version of a {+realm+}.

.. _flexible-sync-config-object:

Flexible Sync Configuration
---------------------------

When you use :ref:`Flexible Sync <flexible-sync>`, your {+app+} uses this 
Sync configuration:

.. code-block:: json
   :caption: sync/config.json

   {
     "type": "flexible",
     "development_mode_enabled": <Boolean>,
     "service_name": "<Data Source Name>",
     "database_name": "<Development Mode Database Name>",
     "state": <"enabled" | "disabled">,
     "permissions": {
       "rules": {
         "<Type Name>": [
           {
             "name": <String>,
             "applyWhen": { <Expression> },
             "read": <Expression>,
             "write": <Expression>,
             "additional_fields": {
               "read": <Boolean>,
               "write": <Boolean>
             }
           }
         ]
       },
       "defaultRoles": [
         {
           "name": <String>,
           "applyWhen": { <Expression> },
           "read": <Expression>,
           "write": <Expression>
         }
       ]       
     },
     "queryable_fields_names": [
       <Array of String Field Names>
     ]
   }

.. list-table::
   :header-rows: 1
   :widths: 10 30

   * - Field
     - Description

   * - | ``type``
       | String
     - The :ref:`Sync Mode <sync-modes>` for the application.
       
       Valid Options:

       - ``"flexible"``

   * - | ``development_mode_enabled``
       | Boolean
     - If ``true``, :ref:`Development Mode <enable-development-mode>` is enabled
       for the application. While enabled, {+service-short+} automatically stores synced
       objects in a specific database (specified in ``database_name``) and
       mirrors objects types in that database's collection schemas.

   * - | ``service_name``
       | String
     - The name of the Atlas cluster :ref:`data source <appconfig-data_sources>`
       to sync. You cannot use sync with a :ref:`serverless instance
       <serverless-caveats>`.

   * - | ``database_name``
       | String
     - The name of a database in the synced cluster where {+service-short+} stores data in
       :ref:`Development Mode <enable-development-mode>`. {+service-short+} automatically
       generates a schema for each synced type and maps each object type to a
       collection within the database.

   * - | ``state``
       | String
     - The current state of the :doc:`Sync </sync>` protocol for the application.
       
       Valid Options:

       - ``"enabled"``
       - ``"disabled"``

   * - | ``permissions.rules.<Type Name>``
       | Array<Role>
     
     - You can define a set of roles that apply to a specific object
       type. These roles apply in order from the beginning of the array,
       so define the most specific rules first.

   * - | ``rules.<Type Name>.[].name``
       | String

     - The name of the role. You might use a descriptive name, such as
       ``"adminReadWrite"`` or ``"employeeReadOnly"``, to make it easier
       to understand the rules.

   * - | ``rules.<Type Name>.[].applyWhen``
       | Expression
     
     - An :ref:`expression <expressions>` that evaluates to ``true``
       when the role applies to the user. 
       
       .. example::
          
          The following expression defines a role that applies when a
          :ref:`user's custom data <custom-user-data>` contains a field
          named ``isGlobalAdmin`` with the value set to ``true``:

          .. code-block:: json
             
             {
               "%%user.custom_data.isGlobalAdmin": true
             }

   * - | ``rules.<Type Name>.[].read``
       | Expression
     
     - An :ref:`expression <expressions>` that determines whether or not
       the user can read data. If the expression evaluates to ``true``,
       the user has permission to read objects of this type. If
       ``false``, the user cannot read an object or any of its
       properties.

   * - | ``rules.<Type Name>.[].write``
       | Expression
     
     - An :ref:`expression <expressions>` that determines whether or not
       the user can write data. If the expression evaluates to ``true``,
       the user has permission to write objects of this type. If
       ``false``, the user cannot write an object or any of its
       properties.
       
       Write permission requires read permission. A user cannot write to
       a document that they cannot read.

   * - | ``rules.<Type Name>.[].fields.<Field Name>.read``
       | Boolean
     
     - If ``true``, the role has permission to read this field. If
       ``false``, the user cannot read the field.

   * - | ``rules.<Type Name>.[].fields.<Field Name>.write``
       | Boolean
     
     - If ``true``, the role has permission to write this field. If
       ``false``, the user cannot write the field.
       
       Write permission requires read permission. A user cannot write to
       a field that they cannot read.

   * - | ``rules.<Type Name>.[].fields.<Field Name>.fields``
       | Object
     
     - Nested field-level permissions for an embedded object.
       
       .. example::
          
          The following role defines read and write permissions for the
          embedded field ``address.street``:

          .. code-block:: json
             
             {
               "fields": {
                 "address": {
                   "fields": {
                     "street": {
                       "read": true,
                       "write": true
                     }
                   }
                 }
               }
             }
   
   * - | ``rules.<Type Name>.[].additional_fields.read``
       | Boolean
     
     - If ``true``, the role has permission to read any field that
       isn't defined in ``fields``. If ``false``, the user can only
       read a field with specific permissions.

   * - | ``rules.<Type Name>.[].additional_fields.write``
       | Boolean
     
     - If ``true``, the role has permission to write any field that
       isn't defined in ``fields``. If ``false``, the user can only
       write a field with specific permissions.
       
       Write permission requires read permission. A user cannot write to
       a field that they cannot read.

   * - | ``permissions.defaultRoles``
       | Array<Object>
     
     - Any array of generic roles that apply to all object types.
       Type-specific roles defined in the ``rules`` property always take
       precedence over default roles. A user may be assigned a default
       role when type-specific roles do not apply or are not defined.

   * - | ``defaultRoles.[].name``
       | String
     - The name of the specific role in the defaultRoles array. You might 
       use a descriptive name to make it easier to parse the roles, such as 
       "adminReadWrite" or "employeeReadOnly".

   * - | ``defaultRoles.[].applyWhen``
       | Expression
     - An :ref:`expression <expressions>` that evaluates to ``true`` when 
       the role should be applied. An example might be 
       ``{"%%user.custom_data.isGlobalAdmin": true}``. This reads the 
       value of the ``isGlobalAdmin`` bool from the :ref:`user's custom data 
       <custom-user-data>`, and applies the role when the value of this 
       bool is ``true``.

   * - | ``defaultRoles.[].read``
       | Expression
     
     - An :ref:`expression <expressions>` that determines whether or not
       the user can read data. If the expression evaluates to ``true``,
       the user has permission to read objects. If ``false``, the user
       cannot read an object or any of its properties.

   * - | ``defaultRoles.[].write``
       | Expression
     
     - An :ref:`expression <expressions>` that determines whether or not
       the user can write data. If the expression evaluates to ``true``,
       the user has permission to write objects. If ``false``, the user
       cannot write an object or any of its properties.
       
       Write permission requires read permission. A user cannot write to
       a document that they cannot read. 

   * - | ``queryable_fields_names``
       | Array<String>
     - The :ref:`names of the fields <queryable-fields>` that your client 
       application can query to determine which data to synchronize.

   * - | ``last_disabled``
       | Number
     - The date and time that sync was last paused or disabled, represented by
       the number of seconds since the Unix epoch (January 1, 1970, 00:00:00
       UTC).

   * - | ``client_max_offline_days``
       | Number
     - Controls how long the :ref:`backend compaction <optimize-sync-atlas-usage>`
       process waits before aggressively pruning metadata that some clients
       require to synchronize from an old version of a {+realm+}.
