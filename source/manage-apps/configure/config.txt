.. _app-configuration:

=================
App Configuration
=================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   
   App Services App </manage-apps/configure/config/app>
   Users & Authentication Providers </manage-apps/configure/config/auth>
   MongoDB Data Sources </manage-apps/configure/config/data_sources>
   Atlas Device Sync </manage-apps/configure/config/sync>
   Functions </manage-apps/configure/config/functions>
   GraphQL </manage-apps/configure/config/graphql>
   HTTP Endpoints </manage-apps/configure/config/http_endpoints>
   Static Hosting </manage-apps/configure/config/hosting>
   Log Forwarders </manage-apps/configure/config/log_forwarders>
   Triggers </manage-apps/configure/config/triggers>
   Values </manage-apps/configure/config/values>
   Environment Values </manage-apps/configure/config/environments>
   Third-Party Services </manage-apps/configure/config/services>
   Create Template Configurations with Expansions </manage-apps/configure/config/template-expansions>
   Legacy Configuration Files </manage-apps/configure/config/legacy>

Every component of an Atlas App Services application is fully defined and configured
using structured JSON configuration and JavaScript source code files.

- ``.json`` files define and configure specific components in your app. Every
  JSON configuration file conforms to a specific schema for the type of
  component it configures.

- ``.js`` files define serverless application logic used in functions, triggers,
  HTTPS endpoints, and custom resolvers.

.. important:: Reserved File Names
   
   You can include arbitrarily named files in your realm app config, with a few exceptions.
   The following filenames are used to define and configure components in your App:
   ``stitch.json``, ``config.json``, ``realm_config.json``, and ``app_config.json``.
   Files with these names must conform to a specific schema for their component type. 
   Using these file names when the file's content fails to conform to that schema
   throws an error when you import the app using the CLI.
   
   Refer to this section for reference information about configuring these files.
   
You'll work directly with configuration files if you prefer to develop and
:ref:`deploy <application-deployment>` locally instead of through the App Services UI.

A complete directory of configuration files has the following root-level files
and directories:

.. code-block:: none
   
   app/
   ├── realm_config.json
   ├── auth/
   ├── data_sources/
   ├── environments/
   ├── functions/
   ├── graphql/
   ├── hosting/
   ├── http_endpoints/
   ├── log_forwarders/
   ├── services/
   ├── sync/
   ├── triggers/
   └── values/

For detailed descriptions and examples of each component type's configuration
and source code files, refer to the type's page in this section:

- :doc:`App Services App </manage-apps/configure/config/app>`
- :doc:`Users & Authentication Providers </manage-apps/configure/config/auth>`
- :doc:`MongoDB Data Sources </manage-apps/configure/config/data_sources>`
- :doc:`Environment Values </manage-apps/configure/config/environments>`
- :doc:`Functions </manage-apps/configure/config/functions>`
- :doc:`GraphQL </manage-apps/configure/config/graphql>`
- :doc:`Static Hosting </manage-apps/configure/config/hosting>`
- :doc:`HTTP Endpoints </manage-apps/configure/config/http_endpoints>`
- :doc:`Log Forwarders </manage-apps/configure/config/log_forwarders>`
- :doc:`Third-Party Services </manage-apps/configure/config/services>`
- :doc:`Atlas Device Sync </manage-apps/configure/config/sync>`
- :doc:`Triggers </manage-apps/configure/config/triggers>`
- :doc:`Values </manage-apps/configure/config/values>`
