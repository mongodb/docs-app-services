.. _application-security:

====================
Application Security
====================

.. default-domain:: mongodb

.. contents:: On this page
   :class: singlecol
   :backlinks: none
   :depth: 2
   :local:

.. toctree::
   :titlesonly:
   :caption: Secure
   :hidden:
   
   Manage IP Access </manage-apps/secure/manage-ip-access>

Overview
--------

Atlas App Services provides a variety of security features to protect your data
and prevent unauthorized access to your application. This includes things 
like:

- Built-in user management
- Data access permissions
- Network security features
- The ability to store and substitute values and secrets

.. _security-app-users:

Application Users
-----------------

You can secure App Services applications with :ref:`built-in user management
<users-and-authentication>`. With the built-in user management of App Services,
only authorized users can access your App. You can
:ref:`delete <delete-user>` or :ref:`disable <disable-user>` users, and 
:ref:`revoke user sessions <revoke-user-sessions>`. Users can log in with:

- Existing provider credentials, such as :ref:`Facebook 
  <facebook-authentication>`, :ref:`Google <google-authentication>`, or 
  :ref:`Apple ID <apple-id-authentication>`
- New credentials with :ref:`email/password <email-password-authentication>`, 
  :ref:`custom JWT <custom-jwt-authentication>`, or :ref:`custom function 
  authentication <custom-function-authentication>`
- :ref:`Anonymous authentication <anonymous-authentication>`, if you don't 
  need to store user data

You can enable one or more :ref:`authentication providers 
<authentication-providers>` in the App Services backend, and then
implement them in your client code. You can also link user accounts with 
client SDKs.

.. _security-data-access:

Data Access Permissions
-----------------------

Use App Services data access rules to grant read and write access to data.
Apps that use Atlas Device Sync define data access permissions during the process
of enabling Device Sync. Apps that do not use Device Sync can 
link an {+atlas+} data source, and define permissions to perform CRUD 
operations on that data source.

MongoDB data access rules prevent operations where users do not have 
appropriate permissions. Users who do not meet your data access rules
cannot view or modify data.

.. _security-sync-permissions:

App Services Applications with Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you enable Atlas Device Sync for your App, you define data access rules
that determine which data users can read and write. The :ref:`Sync Mode 
<sync-modes>` you select determines which types of permissions apply 
for your application.

Partition-Based Sync
````````````````````

When you :ref:`enable Partition-Based Sync <enable-pbs-sync>`, you
specify the :ref:`partition key <sync-partitions>` that gives users 
access to data. You can define :ref:`JSON expressions <expressions>` to 
give users read and write permissions for the partition.

When you access a synced App from a client, you specify the partition
value that the logged-in user can access. The user only has access to the 
partition key and value you define in your app. The user cannot read or 
write data whose partition key value does not match the conditions you specify
when you configure Device Sync.

Flexible Sync
`````````````

When you :ref:`enable Flexible Sync <enable-flexible-sync>`, you specify
the :ref:`fields that your client application can query <queryable-fields>`, 
as well as :ref:`rules to apply read and write permissions 
<flexible-sync-rules-and-permissions>`. You can define :ref:`JSON expressions 
<expressions>` to give users read and write permissions for specific 
collections, and define :ref:`default roles <default-roles>` that apply 
permissions across all collections.

Your client application can query for objects via these queryable fields. 
Users can then access objects that match the query where they have read or 
read and write permission to access the objects. Objects that match the query, 
but where the user does not have read or read and write permission, do not 
sync to the client application.

.. _security-atlas-permissions:

MongoDB Atlas Data Sources
~~~~~~~~~~~~~~~~~~~~~~~~~~

When you access `{+atlas+}
<https://www.mongodb.com/realm?tck=docs_realm#atlas-form-container>`_
through App Services, you can define roles that enable users to read and
modify data. App Services uses a strict rules system that prevents
all operations unless they are explicitly enabled.

When you :ref:`define a role <define-roles-and-permissions>`, you create a 
set of CRUD permissions that App Services evaluates individually for each 
document associated with a query. You can set roles to have document-level 
or field-level access, and you can give roles read or read and write access. 
App Services blocks requests from roles that do not have permission to 
search or read data.

.. note::

   When you access {+atlas+} through an App with Atlas Device Sync enabled, the
   permissions you define for Device Sync apply, instead of the 
   :ref:`role-based permissions <define-roles-and-permissions>` you define 
   when you link an {+atlas+} data source.

.. _security-developer-access:

Developer Access
~~~~~~~~~~~~~~~~

Every App Services application is associated with a specific :atlas:`MongoDB
Atlas organization and project </organizations-projects>`. App Services determines the
developer access permissions for a given MongoDB Cloud user based on their
assigned :atlas:`project roles </access/manage-project-access>` in the project
that contains an app.

The following table describes the access permissions associated with a given
project role:

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Project Role
     - Access Permissions

   * - Project Owner
     - Full read-write access for all Apps associated with the project.

   * - All Other Roles
     - Read-only access for all Apps associated with the project.

.. note::

   For more information about adding users and teams to Atlas, see 
   :mms-docs:`Atlas Users and Teams </tutorial/manage-users/>`.

.. _security-network:

Network Security
----------------

App Services uses a range of network security protocols to prevent
unauthorized access to your data. This includes:

- Using TLS to secure network requests to and from your application
- Defining IP addreses from which all outbound requests originate
- Letting you define URLs and IP addresses from which inbound requests 
  may originate

.. _security-tls:

Transport Layer Security (TLS)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

App Services uses `TLS 1.3 <https://datatracker.ietf.org/doc/html/rfc8446>`__
to secure all network requests to and from your application, including:

- Apps that connect from a {+client-sdk+}.
- Data API and GraphQL requests sent over HTTPS.
- Queries and operations on a linked {+atlas+} data source.

The TLS certificate is pre-defined and cannot be customized or disabled.

.. _realm-public-ips:
.. _firewall-configuration:

Firewall Configuration
~~~~~~~~~~~~~~~~~~~~~~

App Services only sends outbound requests from a set list of IP
addresses. The exact list depends on the cloud provider that the app
server is deployed to. You can copy the IP addresses listed in this
section to an allowlist for incoming requests on your firewall.

..
   Note to docs writer: the hosted csv and json files are managed in the
   docs-realm-sdks repo: https://github.com/10gen/docs-realm-sdks

You can download a computer-friendly list of all IP addresses used by
App Services in `JSON
<https://www.mongodb.com/docs/realm-sdks/mongodb/AtlasAppServicesPublicIPs.json>`__
or `CSV
<https://www.mongodb.com/docs/realm-sdks/mongodb/AtlasAppServicesPublicIPs.csv>`__
format. You can also find cloud-provider-specific JSON and CSV files in
the following sections.

.. note::
   
   If you run a function from the {+ui+}, the request originates from
   the server nearest to you, not the region the app is deployed to.

AWS
```

Download AWS IP Addresses: `JSON <https://www.mongodb.com/docs/realm-sdks/mongodb/AtlasAppServicesPublicIPsAWS.json>`__, `CSV <https://www.mongodb.com/docs/realm-sdks/mongodb/AtlasAppServicesPublicIPsAWS.csv>`__

Outbound requests from an app deployed to AWS will originate from one of
the following IP addresses:

.. code-block:: text
   :caption: AWS outbound IP addresses

   13.236.189.10
   18.202.2.23
   18.210.66.32
   18.211.240.224
   18.213.24.164
   52.63.26.53
   54.203.157.107
   54.69.74.169
   54.76.145.131
   18.192.255.128
   18.157.138.240
   18.158.38.156
   52.220.57.174
   18.140.123.126
   13.251.182.174
   65.0.112.137
   3.6.231.140
   13.234.189.107
   13.232.212.70
   65.0.113.75
   3.7.215.88
   3.6.255.136
   65.0.188.79
   13.233.17.88
   18.136.226.22
   122.248.203.228
   54.251.109.67
   54.255.78.248
   54.179.247.236
   13.251.170.158
   3.105.146.190
   52.65.242.206
   54.79.24.107
   13.238.106.70
   52.28.11.211
   3.121.9.73
   52.29.205.189
   3.122.49.121
   3.121.58.147
   3.121.97.130
   108.128.63.52
   108.128.66.245
   108.128.51.69
   108.128.45.118
   52.213.157.241
   108.128.66.107
   3.9.6.254
   3.9.74.211
   3.9.61.59
   35.176.121.115
   3.9.85.190
   3.9.47.47
   13.36.132.152
   15.188.240.49
   13.37.29.138
   15.188.152.56
   13.39.52.19
   15.188.159.135
   3.212.79.116
   3.92.113.229
   34.193.91.42
   34.237.40.31
   3.215.10.168
   34.236.228.98
   3.214.203.147
   3.208.110.31
   100.26.2.217
   3.215.143.88
   35.166.246.78
   35.161.40.209
   54.149.249.153
   35.161.32.231
   52.34.65.236
   35.163.245.143

Azure
`````

Download Azure IP Addresses: `JSON <https://www.mongodb.com/docs/realm-sdks/mongodb/AtlasAppServicesPublicIPsAzure.json>`__, `CSV <https://www.mongodb.com/docs/realm-sdks/mongodb/AtlasAppServicesPublicIPsAzure.csv>`__

Outbound requests from an app deployed to Azure will originate from one
of the following IP addresses:

.. code-block:: text
   :caption: Azure outbound IP addresses

   20.105.25.17
   20.212.99.191
   20.24.112.135
   20.53.104.226
   20.84.232.59
   20.96.47.95
   40.112.209.0
   52.149.111.83

GCP
```

Download GCP IP Addresses: `JSON <https://www.mongodb.com/docs/realm-sdks/mongodb/AtlasAppServicesPublicIPsGCP.json>`__, `CSV <https://www.mongodb.com/docs/realm-sdks/mongodb/AtlasAppServicesPublicIPsGCP.csv>`__

Outbound requests from an app deployed to GCP will originate from one of
the following IP addresses:

.. code-block:: text
   :caption: GCP outbound IP addresses

   34.150.239.218
   34.69.118.121
   34.78.133.163
   34.82.246.143
   34.93.58.231

.. note::

   The above IP lists only apply to outgoing requests from Atlas Functions,
   including triggers and HTTPS endpoints that make outgoing requests.

   For requests that originate from the Sync server, we recommend allowlisting
   the entire subnet of the App's Deployment Region and cloud provider. You can
   find the Deployment Region in the App Services UI under :guilabel:`App Settings >
   General > Deployment Region`.

.. _security-dns-filtering-sync-client-to-sync-server:

Communicate from the Client to the Sync Server
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you use Device Sync, you can use DNS filtering to allow connections
from the Sync client to the Sync server. Using DNS filtering, you can access 
``*.realm.mongodb.com`` via HTTPS or port 443.

.. _security-allowed-request-origins:

Allowed Request Origins
~~~~~~~~~~~~~~~~~~~~~~~

You can define this :ref:`configuration option <appconfig-app>` in the 
app-level ``realm_config.json`` file. This field accepts an array of 
URLs that incoming requests may originate from. If you define any allowed 
request origins, then App Services blocks any incoming request from 
an origin that is not listed.

.. _security-ip-access-list:
.. _ip-access-list:

IP Access List
~~~~~~~~~~~~~~

App Services allows client requests from the enabled entries in the app's
:ref:`IP access list <manage-ip-access>`. Allowed requests will still use 
App Services's authentication and authorization rules. When you add IP 
access list entries, App Services blocks any request originating from 
an IP that is not on the access list.

.. important::

   By default, any newly-created App allows access from any client IP
   by adding an access list entry for 0.0.0.0/0. If you delete this entry, 
   no client can access your App from any IP address. 

.. _security-api-access-list:

API Access List
~~~~~~~~~~~~~~~

When you :ref:`create an API key <cli-auth-with-api-token>`, you can specify 
IP addresses that can use this API key to access your project or organization. 
If you specify an IP address, App Services blocks any request originating 
from an IP address that is not on the access list.

.. note:: Backend Encryption

   All internal communication between App Services and Atlas is encrypted with 
   x509 certificates.

.. _security-values:

Values and Secrets
------------------

App Services enables you to define :ref:`values and secrets <values-and-secrets>`
that you can access or link to from your application. This enables you to 
remove deployment-specific configuration data and sensitive information from 
your app's business logic. Instead, you refer to it by name and 
App Services substitutes the value when executing your request.

Summary
-------

- Built-in user management handles authentication and ensures only logged-in
  users can access your App. 
- Data access permissions enable you to specify read and write permissions for 
  Atlas Device Sync, linked {+atlas+} data sources, and developers building your apps.
- Network security features enable you to guard against unauthorized access 
  from unknown IP addresses or URLs.
- Store values and secrets and refer to them by name to remove sensitive 
  information from your business logic.
