.. _compact-disk:

=======================
Compact an Atlas Volume
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol


Overview
--------

Realm data compaction defragments the storage space the realm file uses on a client, 
potentially saving space on the device. Compaction also reduces the size of 
the __realm_sync database on Atlas clusters, but does not reduce the overall 
size of the Atlas cluster. Compacting the data on an Atlas volume involves several
additional steps. 

Steps to Compact and Reclaim Disk Space
---------------------------------------

You should use the following guidance for reducing Atlas disk space usage:  

.. procedure::

   .. step:: Enable Compaction on the Client

      Before reclaiming volume space, be sure that you have enabled Compaction 
      on your Atlas App Services app. You set this by setting the Max Offline Time 
      setting in the Atlas UI. For more information, see 
      :ref:`<optimize-sync-atlas-usage>`.

      .. note:: Wait for Compaction
      
         If you enabling compaction for the first time, you will need to wait for 
         the compaction to happen before continuing. You can file a ticket with 
         support if you want to ensure compaction has completed.
      

   .. step: Perform a Rolling Resync

      Perform a rolling resync of your Atlas cluster, a process explained in 
      :manual:`Resync a Member of a Replica Set <tutorial/resync-replica-set-member/>`.
      
      The commands do this are not available with Atlas, so you can either file 
      a ticket with support to have this process done for you, or you can 
      increase your Atlas cluster size by a small amount, which forces a rolling 
      resync. For more information on resizing an Atlas cluster, refer to 
      :atlas:`Customize Cluster Storage </customize-storage/>`.

   .. step: Alternate approach

      A final approach you can take for reclaiming *some* of your Atlas volume 
      space is to run the ``compact()`` command. You run it on one of the 
      secondary nodes and then the other secondary node(s). Finally, you perform 
      a failover on the primary mode and then run ``compact()``. For more information 
      on this approach, refer to `https://kb.corp.mongodb.com/article/000019602/`_.

      .. note:: 
      
         The ``compact()`` command may not reduce the volume size as much as 
         performing a rolling resync. 
      

      


