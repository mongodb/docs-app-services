:noprevnext:
:orphan:

.. meta::
   :robots: noindex, nosnippet

.. _tiered-device-sync-guide:

========================
Tiered Device Sync Guide
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This guide details how to set up a Tiered Device Sync application while 
this feature is in pre-alpha. This guide is intentionally not public,
and is intended for internal MongoDB use.

.. _tiered-sync-create-device-sync-app:

Create a Device Sync-Enabled App
--------------------------------

.. procedure::

   .. step:: Create an App Services App

      Create an :ref:`App Services App using the UI, CLI, or Admin API <create-app>`.
      
      For a quick proof-of-concept, :ref:`create an app from a 
      template <create-template-app>`. If you select :guilabel:`Real-time Sync`
      when you create a template app, this sets up a Device Sync-enabled 
      task tracker app with a downloadable front-end client. This app comes
      pre-configured with permissions for the user to write their own Items 
      to an ``Item`` collection in a ``todo`` database. It also has 
      :ref:`Development Mode <development-mode>` and 
      :ref:`email/password authentication <email-password-authentication>` 
      enabled.

   .. step:: Enable Device Sync or Modify the Template Configuration

      If you have not started with a template app, :ref:`enable Device Sync 
      <enable-sync>` with Flexible Sync. Configure :ref:`permissions 
      <device-sync-compatibility>` to allow anyone to read and write all data.

      The Tiered Sync server uses :ref:`Anonymous Authentication 
      <anonymous-authentication>` to connect to the App Services App. When 
      you configure Tiered Sync for your app, this automatically enables 
      Anonymous Authentication.

      If you started with a template app, go to :guilabel:`Rules`, and delete 
      the existing rule for the ``todo`` / ``Item`` collection. Replace it with 
      ``readAndWriteAll``.

.. _tiered-sync-configure-host:

Configure the Host
------------------

Configure the host to run the Tiered Device Sync server. This may be
an EC2 instance or other cloud server, or hardware that you provision on-site.

.. tip::

   For proof-of-concept testing, you can launch an EC2 instance running 
   Ubuntu Server 18.x. Under Network settings, add a rule to allow access 
   via HTTP/Port 80. Free tier settings are sufficient for small PoC projects.

.. _tiered-sync-required-network-access:

Required Network Access
~~~~~~~~~~~~~~~~~~~~~~~

The host that runs the Tiered Sync server must allow access to port 80 via HTTP 
to the general internet. 

.. _tiered-sync-os-support:

OS Compatibility
~~~~~~~~~~~~~~~~

The Tiered Sync server has been verified with the following operating systems:

- Ubuntu Server 18+
- macOS 11.x and newer running on M1 or Intel 2018+ MacBook Pros

Other operating systems may be possible, but have not yet been verified.

.. _tiered-sync-hardware-requirements:

Hardware Requirements
~~~~~~~~~~~~~~~~~~~~~

Tiered Sync benchmarking is not yet complete, so minimum required hardware
is not yet available. 

.. _tiered-sync-configure-and-start-server:

Install and Configure the Tiered Sync Server
--------------------------------------------

Set up and run the Tiered Sync server on the host.

.. include:: /includes/important-stop-tiered-sync-server.rst

.. procedure::

   .. step:: Get the Tiered Sync Server Code

      Use ``wget`` to get the Tiered Sync server code:

      .. code-block:: shell

         wget https://tiered-sync-package.s3.amazonaws.com/4b4e891e5990189d214d74b788ac1d2a761a08ae-tiered_sync.tgz

      Unzip the tar to get the files.

      .. code-block:: shell

         tar -xvf *.tgz

      You now have a ``tiered_sync`` directory containing the server files.

   .. step:: Complete the Tiered Sync Configuration Details

      The ``tiered_sync`` directory contains a :file:`config.json` file you 
      must edit with the appropriate values to configure the server.

      .. code-block:: json

         {
           "clientAppId": "YOUR-APP-ID",
           "query": {
             "YOUR-COLLECTION-NAME": "YOUR-QUERY"
           },
           "cloudSyncServerAuth": "YOUR-AUTH-TOKEN",
           "hostname": "YOUR-TIERED-SYNC-SERVER-DOMAIN"
         }

      .. list-table::
         :header-rows: 1

         * - Field name
           - Value

         * - ``clientAppId``
           - The App ID of the App Services App you created above.

         * - ``query``
           - An object containing one or more collections and queries that 
             define the collections and documents the Tiered Sync server can 
             sync.

         * - ``YOUR-COLLECTION-NAME``
           - The name of the collection in your database where the Tiered 
             Sync server should sync data. If you're using a 
             template app, this is the ``Item`` collection.
            
         * - ``YOUR-QUERY``
           - This query determines what documents the Tiered Sync server
             can sync with the collection. For example, ``truepredicate``
             means the Tiered Sync server syncs all documents with the collection.
             You can use :ref:`Realm Query Language <rql>` to define this
             query, with the same caveats around :ref:`Flexible Sync RQL 
             Limitations <flexible-sync-rql-limitations>`.

         * - ``cloudSyncServerAuth``
           - Give your :ref:`App Services App ID <find-app-id>` to your 
             Product or Account Representative. They will generate an
             authorization token for your App.

         * - ``hostname``
           - The public DNS of your host. This should resemble something
             like ``ec2-13-58-70-88.us-east-2.compute.amazonaws.com``. 
             For localhost, set this value to ``localhost:80``.

      .. example::

         An example Tiered Sync configuration file for a template app running
         on an EC2 instance might look similar to:

         .. code-block:: json
            :copyable: false

            {
               "clientAppId": "sync-template-app-zkiee",
               "query": {
                  "Item": "truepredicate"
               },
               "cloudSyncServerAuth": "3814f3fb7befe2eef66ee01781ae245a",
               "hostname": "ec2-13-58-70-88.us-east-2.compute.amazonaws.com"
            }

         The "query" could include multiple collection names, similar to:

         .. code-block:: json
            :copyable: false

            {
               "clientAppId": "sync-template-app-zkiee",
               "query": {
                  "Item": "truepredicate",
                  "Project": "truepredicate"
               },
               "cloudSyncServerAuth": "3814f3fb7befe2eef66ee01781ae245a",
               "hostname": "ec2-13-58-70-88.us-east-2.compute.amazonaws.com"
            }

         For more details on what you could include in a query, refer to 
         :ref:`Realm Query Language <rql>`.

   .. step:: Install Dependencies

      The Tiered Sync server requires several dependencies, which are listed 
      in the :file:`README.md` in the ``tiered_sync`` directory. Follow the 
      instructions to install the required dependencies.

   .. step:: Start the Tiered Sync Server

      To start the server, from the ``tiered_sync`` directory:

      .. code-block:: shell

         make up

      .. note::

         You don't have to run the Docker commands as root. However, if you 
         don't, you may get a message similar to this:
         
         .. code-block:: console
            :copyable: false
         
            Couldn't connect to Docker daemon at http+docker://localunixsocket
      
         If this occurs, you can switch to the root user with ``sudo su``.

      Now you can connect clients directly to the Tiered Sync server.

      In the App Services logs, you should see an ``Authentication -> Login``
      entry whose ``Name`` is ``tiered-sync-token``. This is the Tiered Sync
      server connecting to your App Services App.

      .. include:: /includes/important-stop-tiered-sync-server.rst

   .. step:: Check the Status of the Tiered Sync Server

      When the Tiered Sync server is running, you can see the status of the 
      Tiered Sync server with:

      .. code-block:: shell

         make status

      This gives you information about the number of clients connected to the 
      server, as well as errors that may have occurred.

      .. example::

         The status object of a Tiered Sync server may look similar to:

         .. code-block:: json
            :copyable: false

            {
               "status": "ACTIVE",
               "cloud_connected": true,
               "num_local_clients": 1,
               "query": {
                  "Item": "truepredicate"
               }
            }

.. _tiered-sync-connect-from-client:

Connect to the Tiered Sync Server from a Client
-----------------------------------------------

To connect to the Tiered Sync server from a client, your app must:

- Use Anonymous Authentication
- Use HTTP over port 80
- Set the Sync URL to the public accessible DNS address you set in the 
  Tiered Sync server config's ``hostname`` field

For a quick proof of concept using a template app, these are the modifications
you would need to make to the :github:`Swift template app 
<mongodb/template-app-swiftui-todo>` to connect to the Tiered Sync server:

.. procedure::

   .. step:: Configure the Server Connection

      In the Swift template app's :file:`atlasConfig`, set the values to:

      .. list-table::
         :header-rows: 1

         * - Key
           - Value

         * - ``baseUrl``
           - The public-addressable DNS of your Tiered Sync server's host. 
             This is ``http://`` followed by the same value you set in your 
             Tiered Sync server config's ``hostname`` field.
          
         * - ``appId``
           - The App ID of the App Services App you created above.

   .. step:: Adjust the App Transport Security Settings

      For iOS, Apple disables insecure connections by default. You must add
      an exception for your public-addressable DNS to allow the client app 
      to connect to it.

      Select your App target, and go to the :guilabel:`Signing & Capabilities`
      tab. Press the :guilabel:`+ Capability` button, and search for 
      ``App Transport Security Settings``. Add this to your app.

      Add an exception domain for your public-addressable DNS. This should
      be just the string domain, similar to: ``ec2-13-58-70-88.us-east-2.compute.amazonaws.com``.

      This creates an :file:`Info.plist` file in your project. Go to this file
      to make additional adjustments.

      Change this ``String`` key to a ``Dictionary``. Add two more keys for:

      .. list-table::
         :header-rows: 1

         * - Key
           - Type
           - Value

         * - ``NSIncludesSubdomains``
           - Boolean
           - ``YES``
          
         * - ``NSExceptionAllowsInsecureHTTPLoads``
           - Boolean
           - ``YES``

      This enables your iOS client to connect to the insecure HTTP DNS.

      Your :file:`Info.plist` file should look similar to:

      .. image:: /images/tiered-sync-info-plist.png
         :alt: Screenshot of an Info.plist file showing the settings above

   .. step:: Switch to Anonymous Authentication

      Instead of using email/password authentication, switch the client code
      to use anonymous authentication. Go to the ``Views`` directory, and
      open the :file:`LoginView`.

      Remove the ``TextField`` and ``SecureField`` elements from the ``VStack``
      in the View body, as well as their associated ``@State`` variables.

      In the ``Button("Log In")`` element, remove the ``email: email, password: password``
      from the ``login`` function call. Remove them from the ``login`` function 
      signature below the view.

      In the ``login`` function, change the user credentials from ``emailPassword``
      to ``anonymous``. This function should now look like:

      .. code-block:: swift

         func login() async {
           do {
             let user = try await app.login(credentials: Credentials.anonymous)
             print("Successfully logged in user: \(user)")
           } catch {
             print("Failed to log in user: \(error.localizedDescription)")
             errorHandler.error = error
           }
         }

      Remove the ``signUp`` function.

      Back in the View body above, remove the ``Button("Create Account")``
      element and all of its styling.

      This leaves you with a View containing a single ``Log In`` button 
      that uses anonymous authentication.

   .. step:: Adjust the Sync Log Level, If Desired

      You can optionally adjust the Sync log level if you'd like to get 
      additional details about the status of communication with the 
      Tiered Sync server.

      In the :file:`App` file, the Realm Swift app is initialized in the 
      ``ErrorHandler`` class that starts in line 29. Add a log level
      line to this initializer around line 38 to get additional information:

      .. code-block:: swift
         :emphasize-lines: 10

         final class ErrorHandler: ObservableObject {
             @Published var error: Swift.Error?

             init(app: RealmSwift.App) {
                 // Sync Manager listens for sync errors.
                 app.syncManager.errorHandler = { syncError, syncSession in
                     self.error = syncError
                 }
        
                 app.syncManager.logLevel = .trace
             }
         }

   .. step:: Run the App

      Now you should be able to build and run the app. When you press the 
      :guilabel:`Log In` button, you should be connected to the Tiered Sync
      server. When you create new Items, those sync with the Tiered Sync server,
      and from there to the Atlas App Services App.

      You can check the status of the Tiered Sync server from your host.
      With the client running, you should see ``"num_local_clients": 1`` in 
      the Tiered Sync server status. You can also see error messages reflected
      in the sync status.

      After the next time the Tiered Sync server syncs with your App Services App,
      you should see synced changes reflected in the linked Atlas collection.

      .. important::

         If you have previously connected directly from the client to your 
         App Services App with Device Sync, you may need to clear state on the 
         simulator or device. Resetting your cache enables your client to 
         connect to the Tiered Sync server.

         In a console app, delete the ``mongodb-realm`` directory. If you're
         using an iOS or Android simulator or device, uninstall and reinstall
         the app.
