.. _what-is-realm-sync:
.. _sync:
.. _sync-overview:
.. _realm-sync-get-started:

==================================
Get Started with Atlas Device Sync
==================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

To sync data across devices, you :ref:`enable Device Sync <enable-sync>` for your
App and then use the sync-related methods and properties in the SDKs.

.. tip:: Check out the tutorial
   
   If you prefer to learn by example, check out the App Services 
   `tutorial <https://www.mongodb.com/docs/realm/tutorial/>`_, which describes
   how to build a synced to-do list application with clients for common 
   platforms that App Services supports.

Before You Start
----------------

- If you don't already have one, `sign up for a free MongoDB Atlas account
  <https://www.mongodb.com/cloud/atlas/register?tck=docs_realm>`__.

- Flexible Sync requires MongoDB version 5.0 or later. You can use a free shared
  M0 cluster to explore and develop your app. We recommend that you use a
  dedicated tier cluster (M10 and above) for production applications. You cannot
  use sync with a :ref:`serverless instance <serverless-caveats>` or
  :ref:`{+adf-instance+} <data-federation-caveats>`. :ref:`Partition-Based Sync
  <partition-based-sync>`, requires a MongoDB Atlas cluster that runs MongoDB
  version 4.4 or later.
  
- If you don't already have one, :ref:`create a new App
  <create-a-realm-app>` linked to your Atlas cluster.

Configure Your Data Model
-------------------------

Choose an SDK
~~~~~~~~~~~~~

Realm is an object database optimized for mobile use cases. The
:ref:`Realm SDKs <realm-sdks>`, available for multiple languages and
platforms, include everything you need to work with synced "realms" in your
client code. You can use multiple SDKs to work with the same set of synced data
across devices and platforms.

This guide focuses on configuring sync with an SDK. For in-depth documentation
that includes details on how to install and use the Realm SDKs more generally,
check out the SDK docs:

- :ref:`C++ SDK (Alpha) <cpp-intro>`
- :ref:`Flutter SDK <flutter-intro>`
- :ref:`Java SDK <java-intro>`
- :ref:`Kotlin SDK <kotlin-intro>`
- :ref:`.NET SDK <dotnet-intro>`
- :ref:`Node.js SDK <node-intro>`
- :ref:`React Native SDK <react-native-intro>`
- :ref:`Swift SDK <ios-intro>`

.. note::

   The Realm Web SDK does not currently support Realm Database or Atlas Device Sync.
   However, you can query the same data in an Atlas cluster using either 
   :ref:`MongoDB Data Access <web-mongodb-data-access>`
   or the :ref:`GraphQL API <graphql-apollo-react>`.

Define Data Model
~~~~~~~~~~~~~~~~~

A synced realm uses object models that you define to determine the type of
objects in the realm. Additionally, Sync requires a server-side document schema
for each synced object type so that App Services can translate and apply changes
between synced realms and MongoDB Atlas.

To define your synced object models, do one of the following for each object
type:

- **Sync object models from an SDK:** In :ref:`Development Mode
  <development-mode>`, App Services automatically generates a document schema
  for each synced object type and assigns that schema to a collection in the
  linked cluster with the same name as the object type. Development mode lets
  you configure your synced data model from a client application using the same
  object models and code that you use in your production app. This is useful if
  you prefer a client-first approach that uses idiomatic object models in your
  preferred programming language.
  
  For a walkthrough of how to turn on Development Mode, see :ref:`Enable
  Development Mode <development-mode>`.

- **Generate object models from a document schema:** App Services can automatically
  generate language-specific object models that you can use in your client
  applications. The generated models match the document schemas defined for your
  app's synced cluster. You can define these schemas manually or App Services can
  sample existing data in the cluster to create them automatically. This is
  useful if you prefer a server-first approach and/or plan to build apps with
  multiple SDKs.
  
  For a walkthrough of how to generate your object models based on server-side
  document schemas, see :ref:`Generate SDK Object Models
  <generate-sdk-object-models>`.
  
  Once you have the generated object models, you can copy them directly into
  your client application and use them the same way you would any regular object
  or struct in your preferred programming language.

Define Data Access Patterns
---------------------------

Once you have decided on your app's data model, you can define a data access 
pattern and access rules for your app's data. 

Choose a Sync Mode
~~~~~~~~~~~~~~~~~~

There are two Sync Modes: Flexible Sync and the older Partition-Based Sync. We
recommend you use Flexible Sync. When you use Flexible Sync, you must:

- Specify queryable fields
- Configure data access rules and default roles

Client applications can query the queryable fields you configure to determine
which objects to sync. Then, App Services applies rules and default roles to 
determine whether users can read or write the objects that match the query.

Define Data Access Rules
~~~~~~~~~~~~~~~~~~~~~~~~

Data access rules determine which data to sync, as well as each user's 
ability to read and write data. Rules are closely linked to your app's data 
model.

With Flexible Sync, you specify which data to sync through queries for matching
objects in a client application. App Services then evaluates :ref:`session roles
and rules <flexible-sync-roles>` to determine which of those matching objects a
user can read and write.

You can define session roles on specific collections. Default roles
provide read and write permissions when more specific session roles do
not apply. Default roles apply to all collections an App can
access, but you can restrict a session role to a specific collection by
specifying the collection name.

Enable Sync
~~~~~~~~~~~

When you enable Sync, you specify how clients can access data in your App.
For a walkthrough of how to turn on sync, refer to :ref:`enable-sync`.

Optimize Sync Data Usage
~~~~~~~~~~~~~~~~~~~~~~~~

Device Sync syncs all data from collections with a defined
:ref:`schema <schemas>` in your Atlas cluster.
If you do not specify a field in your schema, Device Sync will not sync that
field to the clients.

Sync stores some utility data in your synced cluster to help synchronize
data with clients. Device Sync has optimizations built-in to reduce
the amount of utility data stored in synced clusters. If you'd like to
reduce the amount of utility data further to suit your use case, see
our guide to :ref:`Optimize Device Sync Atlas Usage
<optimize-sync-atlas-usage>`.

.. _flexible-sync-query-subscription:

Create Queries in Your Client Application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

With Flexible Sync enabled, you can start creating queries from your client
application. 

The Realm SDKs provide methods to create, update, and remove queries from the
client application. The SDKs use **subscriptions** to maintain those queries on
the client side. Through these subscriptions, your applications sync objects
with the backend app and can watch for and react to changes.

.. tabs-realm-sdks::

   .. tab::
      :tabid: android

      To create queries from the Java Client SDK, see the
      :ref:`Java SDK guide to Flexible Sync <java-flexible-sync>`.

   .. tab::
      :tabid: ios

      To create queries from the Swift Client SDK, see the :ref:`Swift SDK 
      guide to Flexible Sync <ios-flexible-sync>`.

   .. tab::
      :tabid: node
      
      To create queries from the Node Client SDK, see the :ref:`Node SDK 
      guide to Flexible Sync <node-flexible-sync>`.

   .. tab::
      :tabid: react-native

      To create queries from the React Native Client SDK, see the
      :ref:`React Native SDK guide to Flexible Sync <react-native-flexible-sync>`.

   .. tab::
      :tabid: dotnet

      To create queries from the .NET Client SDK, see the :ref:`.NET SDK 
      guide to Flexible Sync <dotnet-flexible-sync>`.
   
   .. tab::
      :tabid: flutter

      To create queries from the Flutter Client SDK, see the :ref:`Flutter SDK
      guide to Flexible Sync <flutter-sync>`.

   .. tab::
      :tabid: kotlin

      To create queries from the Kotlin Client SDK, see the :ref:`Kotlin SDK
      guide to Flexible Sync <kotlin-subscriptions>`.
