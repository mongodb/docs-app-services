.. _what-is-realm-sync:
.. _sync:
.. _sync-overview:
.. _realm-sync-get-started:

==================================
Get Started with {+sync+}
==================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Using Device Sync in Your App
-----------------------------

To sync data across devices, you :ref:`enable Device Sync <enable-sync>` for your
{+app+} and then use the sync-related methods and properties in the SDKs.

.. tip:: Check out the tutorial
   
   If you prefer to learn by example, check out the {+service-short+} 
   `tutorial <https://www.mongodb.com/docs/realm/tutorial/>`_, which describes
   how to build a synced Task Tracker application with clients for common 
   platforms that {+service-short+} supports.

Before You Start
----------------

- If you don't already have one, `sign up for a free MongoDB Atlas account
  <https://www.mongodb.com/cloud/atlas/register?tck=docs_realm>`__.

- For :ref:`Partition-Based Sync <partition-based-sync>`, ensure that you have a 
  MongoDB Atlas cluster that runs MongoDB version 4.4 or later. 
  :ref:`Flexible Sync <flexible-sync>` requires MongoDB version 5.0 or later. 
  You can use a free shared M0 cluster to explore and develop your app.
  We recommend that you use a dedicated tier cluster (M10 and above) for
  production applications. You cannot use sync with a :ref:`serverless
  instance <serverless-caveats>` or :ref:`{+adf-instance+} <data-federation-caveats>`.

- If you don't already have one, :ref:`create a new {+app+}
  <create-a-realm-app>` linked to your Atlas cluster.

Configure Your Data Model
-------------------------

Choose an SDK
~~~~~~~~~~~~~

The :ref:`{+client-sdks+} <realm-sdks>`, available for multiple languages and
platforms, include everything you need to work with synced Realms in your client
application code. You can use multiple SDKs to work with the same set of synced
data across devices and platforms.

This guide focuses on configuring sync with an SDK. For in-depth documentation
that includes details on how to install and use the {+client-sdks+} more generally,
check out the SDK docs:

- :ref:`Java SDK <java-intro>`
- :ref:`Swift SDK <ios-intro>`
- :ref:`.NET SDK <dotnet-intro>`
- :ref:`Node.js SDK <node-intro>`
- :ref:`React Native SDK <react-native-intro>`
- :ref:`Kotlin SDK <kotlin-intro>`
- :ref:`Flutter SDK <flutter-intro>`

.. note::

   The Realm Web SDK does not currently support Realm Database or Atlas Device Sync.
   However, you can query the same data in an Atlas cluster using either 
   :ref:`MongoDB Data Access <web-mongodb-data-access>`
   or the :ref:`GraphQL API <graphql-apollo-react>`.

Define Data Model
~~~~~~~~~~~~~~~~~

A synced realm uses object models that you define to determine the type of
objects in the realm. Additionally, Sync requires a server-side document schema
for each synced object type so that App Services can translate and apply changes
between synced realms and MongoDB Atlas.

To define your synced object models, do one of the following for each object
type:

- **Sync object models from an SDK:** In :ref:`Development Mode
  <concept-development-mode>`, App Services automatically generates a document schema
  for each synced object type and assigns that schema to a collection in the
  linked cluster with the same name as the object type. Development mode lets
  you configure your synced data model from a client application using the same
  object models and code that you use in your production app. This is useful if
  you prefer a client-first approach that uses idiomatic object models in your
  preferred programming language.
  
  For a walkthrough of how to turn on Development Mode, see :ref:`Enable
  Development Mode <enable-development-mode>`.
  
  .. tip:: Partition-Based Sync
     
     When you use Partition-Based Sync with Development mode, you must specify a 
     partition key and database to hold synced data.
     
     You may not know exactly what you want either of these to be long term, but
     that's okay. You can always use a placeholder value like ``_partition`` or
     ``devModeDatabase`` while you build your data model and then change it
     later before you push to production.

- **Generate object models from a document schema:** App Services can automatically
  generate language-specific object models that you can use in your client
  applications. The generated models match the document schemas defined for your
  app's synced cluster. You can define these schemas manually or App Services can
  sample existing data in the cluster to create them automatically. This is
  useful if you prefer a server-first approach and/or plan to build apps with
  multiple SDKs.
  
  For a walkthrough of how to generate your object models based on server-side
  document schemas, see :ref:`Generate SDK Object Models
  <generate-sdk-object-models>`.
  
  Once you have the generated object models, you can copy them directly into
  your client application and use them the same way you would any regular object
  or struct in your preferred programming language.

Define Data Access Patterns
---------------------------

Once you have decided on your app's data model, you can define a data access 
pattern and access rules for your app's data. 

Choose a Sync Mode
~~~~~~~~~~~~~~~~~~

When you use Partition-Based Sync, you must:

- Identify a partition strategy
- Define a partition key 
- Configure data access rules 

Partition key values and data access rules determine which users can read or
write which data in your database.

When you use Flexible Sync, you must:

- Specify queryable fields
- Configure data access rules and default roles

Client applications can query the queryable fields you configure to determine
which objects to sync. Then, App Services applies rules and default roles to 
determine whether users can read or write the objects that match the query.

For more information, check out the :ref:`Choose Your Sync Mode <sync-modes>` page.

Define Data Access Rules
~~~~~~~~~~~~~~~~~~~~~~~~

Data access rules determine which data to sync, as well as each user's 
ability to read and write data. Rules are closely linked to your app's data 
model.

Partition-Based Sync Data Access Rules
``````````````````````````````````````

To design effective rules, :ref:`choose a partition strategy
<partition-strategies>` and corresponding :ref:`read and write permissions
<partition-based-sync-permissions>` that match your app's data model and 
access patterns.

Flexible Sync Data Access Rules
```````````````````````````````

Flexible Sync does not require you to define a partition strategy.
Instead, you specify which data to sync through queries for
matching objects in a client application. App Services then evaluates
:ref:`session roles and rules <flexible-sync-roles>` to determine which
of those matching objects a user can read and write.

You can define session roles on specific collections. Default roles
provide read and write permissions when more specific session roles do
not apply. Default roles apply to all collections an {+app+} can
access, but you can restrict a session role to a specific collection by
specifying the collection name.

Configure and Enable Sync
-------------------------

Once you have defined a data model and corresponding access rules, you can
enable sync for your app. You can also optimize sync data usage by
specifying a client maximum offline time.

Enable Sync
~~~~~~~~~~~

When you enable Sync, you specify how clients can access data in your
{+app+}. For a walkthrough of how to turn on sync, see :ref:`enable-sync`.

Optimize Sync Data Usage
~~~~~~~~~~~~~~~~~~~~~~~~

Device Sync syncs all data from collections with a defined
:ref:`schema <schemas>` in your Atlas cluster.
If you do not specify a field in your schema, Device Sync will not sync that
field to the clients.

Sync stores some utility data in your synced cluster to help synchronize
data with clients. Device Sync has optimizations built-in to reduce
the amount of utility data stored in synced clusters. If you'd like to
reduce the amount of utility data further to suit your use case, see
our guide to :ref:`Optimize Device Sync Atlas Usage
<optimize-sync-atlas-usage>`.
