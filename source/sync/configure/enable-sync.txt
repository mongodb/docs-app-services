.. _enable-realm-sync:
.. _enable-sync:

========================
Enable Atlas Device Sync
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

You can enable {+sync+} via the {+app+} UI, {+cli+}, or the 
{+service-short+} Admin API. If it is your first time enabling {+sync-short+}, 
the UI is a great choice because it walks you through the required steps.

If you're re-enabling it after pausing or terminating it, see: 
:ref:`Resume <resume-sync>` or :ref:`Re-Enable <re-enable-realm-sync>` 
{+sync-short+}.

Prerequisites
-------------

While you are configuring {+sync+}, you must define the data access patterns
and rules for your {+app+}. If you haven't already decided how you want to 
configure your data model and access {+sync-short+}, see:

- :ref:`Configure Your Data Model <sync-schema-overview>`
- :ref:`Choose Your Sync Mode <sync-modes>`
- :ref:`Sync Rules and Permissions <sync-permissions>`

.. important::
   
   Before defining sync rules and enabling sync, you must specify at least
   one valid :ref:`schema <schemas>` for a collection in the synced cluster 
   unless you are using :ref:`Development Mode <enable-development-mode>`.
   
   At a minimum, the schema must define ``_id`` and the field that you intend to
   use as your partition key. A partition key field may be a ``string``,
   ``integer``, or ``objectId``.
   
   For more details on how to define a schema, see :ref:`enforce-a-schema`.

.. _enable-pbs-sync:

Enable Partition-Based Sync
---------------------------

.. tabs-realm-admin-interfaces::

   .. tab::
      :tabid: ui
      
      .. procedure::

         .. step:: Navigate to the Sync Configuration Screen

            To define {+sync-short+} rules and enable {+sync-short+} for your application, navigate to the
            :guilabel:`Sync` configuration screen through the {+leftnav+}.

            .. note:: Sync Rules Cannot Change

               You define {+sync-short+} rules at the same time as you enable {+sync-short+}. Once {+sync-short+} is
               enabled, you can't change your app's {+sync-short+} rules unless you terminate {+sync-short+}
               and re-enable it with new rules.


         .. step:: Select Development Details

            You can enable {+sync-short+} for a single linked cluster in your application.
            Determine which cluster you want to use and then select it from the
            :guilabel:`Select Cluster To {+sync-short+}` dropdown menu.

            .. figure:: /images/define-sync-rules-select-cluster.png
               :width: 750px
               :alt: The cluster selection dropown menu


         .. step:: Choose a Partition Key

            The {+sync-short+} partition key is a field in every synced document that maps
            each document to a client-side realm. {+sync-short+} rules apply at the partition
            level, so it's particularly important to consider your data model and access
            patterns. For more information on partition keys and how to choose one, see
            :ref:`Partitions <sync-partitions>`.

            .. note::

              The partition key can either be required or optional. If the partition key
              field is optional, then all MongoDB documents that either exclude the
              partition key or have a null value for the partition key will be sent to the
              null partition. If the partition key field is required, {+sync+}
              ignores any MongoDB documents that lack a valid value for the partition
              key. We recommend a required partition key unless you want to {+sync-short+}
              pre-existing data with invalid or missing partition values from a
              MongoDB collection.


         .. step:: Define Read & Write Permissions

            The :guilabel:`Define Permissions` section allows you to define :ref:`JSON
            expressions <expressions>` that {+service-short+} dynamically evaluates to determine a
            user's read and write permissions for the data in a given partition.

            {+sync-short+} rule expressions have access to :json-expansion:`%%user`, which resolves
            to the user that opened the realm, and :json-expansion:`%%partition`, which
            resolves to the partition key value for the realm. You can also use operators,
            including :json-operator:`%function`, to handle more complex cases. For
            examples, see :ref:`{+sync-short+} Permissions <sync-permissions>`.

            Once you've determined how to decide a user's read and write permissions for a
            given partition, define the corresponding JSON expressions in the
            :guilabel:`Read` and :guilabel:`Write` inputs.

            .. figure:: /images/define-sync-rules-permissions.png
               :width: 750px
               :alt: The partition read and write expression inputs


         .. step:: Turn On Sync

            Now that you've configured rules for your synced cluster, all that's left to
            do is turn on {+sync-short+} for client applications. Click :guilabel:`Enable Sync`,
            take note of any recommendations that appear, and then confirm your choice.

     
   .. tab::
      :tabid: cli
      
      .. procedure::

         .. step:: Pull the Latest Version of Your App

            To update your app through the CLI, you need an :ref:`up-to-date application
            directory <application-directory>`. To pull a local copy of the latest version
            of your app, run the following:

            .. code-block:: bash

               realm-cli pull --remote="<Your App ID>"


         .. step:: Select a Cluster to Sync

            You can enable sync for a single linked cluster in your application.
            If you have not yet linked the cluster to your application, follow the
            :ref:`link-a-data-source` guide to link it before
            you continue.

            Determine which cluster you want to use and then open its configuration file.
            Add the ``config.sync`` field with the following value:

            .. code-block:: json

               {
                 "config": {
                   "sync": {
                     "state": "enabled",
                     "partition": {
                       "key": "<Partition Key Field>",
                       "type": "<Partition Key Type>",
                       "permissions": {
                         "read": {},
                         "write": {}
                       }
                     }
                   },
                   ...
                 },
                 ...
               }


         .. step:: Choose a Partition Key

            The sync partition key is a field in every synced document that maps
            each document to a client-side realm. Sync rules apply at the partition level,
            so it's particularly important to consider your data model and access
            patterns. For more information on partition keys and how to choose one, see
            :ref:`Partitions <sync-partitions>`.

            .. note::

              The partition key can either be required or optional. If the partition key
              field is optional, then all MongoDB documents that either exclude the
              partition key or have a null value for the partition key will be sent to the
              null partition. If the partition key field is required, {+sync+}
              ignores any MongoDB documents that lack a valid value for the partition
              key. We recommend a required partition key unless you want to sync
              pre-existing data with invalid or missing partition values from a
              MongoDB collection.

            Once you have decided which field to use, update ``config.sync.partition``
            with the partition key field name in the ``key`` field and the partition key
            type in the ``type`` field.

            .. code-block:: json
               :emphasize-lines: 6, 7

               {
                 "config": {
                   "sync": {
                     "state": "enabled",
                     "partition": {
                       "key": "owner_id",
                       "type": "string",
                       "permissions": {
                         "read": {},
                         "write": {}
                       }
                     }
                   },
                   ...
                 },
                 ...
               }


         .. step:: Define Read & Write Permissions

            {+service-short+} allows you to define :ref:`JSON expressions <expressions>` that it
            dynamically evaluates whenever a user opens a realm to determine if the user
            has read or write permissions for data in the partition.

            Sync rule expressions have access to :json-expansion:`%%user`, which resolves
            to the user that opened the realm, and :json-expansion:`%%partition`, which
            resolves to the partition key value for the realm. You can also use operators,
            including :json-operator:`%function`, to handle more complex cases. For
            examples, see :ref:`Sync Permissions <sync-permissions>`.

            Once you've determined how to decide a user's read and write permissions for a
            given partition, define the corresponding JSON expressions in the
            ``read`` and ``write`` fields of ``config.sync.partition.permissions``.

            .. code-block:: json
               :emphasize-lines: 9-14, 15-17

               {
                 "config": {
                   "sync": {
                     "state": "enabled",
                     "partition": {
                       "key": "owner_id",
                       "type": "string",
                       "permissions": {
                         "read": {
                           "$or": [
                             { "%%user.id": "%%partition" },
                             { "%%user.custom_data.shared": "%%partition" }
                           ]
                         },
                         "write": {
                           "%%user.id": "%%partition"
                         }
                       }
                     }
                   },
                   ...
                 },
                 ...
               }


         .. step:: Deploy the Sync Configuration

            Now that you've defined the sync configuration, including read and write
            permissions, you can deploy your changes to start syncing data and enforcing
            sync rules.

            To deploy your changes, import your app configuration:

            .. code-block:: shell

               realm-cli push --remote="<Your App ID>"

     
   .. tab::
      :tabid: api
      
      .. procedure::

         .. step:: Select a Cluster to Sync

            You can enable sync for a single linked cluster in your application.
            If you have not yet linked the cluster to your application, follow the
            :ref:`link-a-data-source` guide to link it before
            you continue.

            You'll need the cluster's service configuration file to configure sync. You
            can find the configuration file by listing all services through the Admin API:

            .. code-block:: shell

               curl https://realm.mongodb.com/api/admin/v3.0/groups/{GROUP_ID}/apps/{APP_ID}/services \
                 -X GET \
                 -h 'Authorization: Bearer <Valid Access Token>'

            Once you have the configuration, add the ``config.sync`` field with the
            following template configuration:

            .. code-block:: json

               {
                 "config": {
                   "sync": {
                     "state": "enabled",
                     "partition": {
                       "key": "<Partition Key Field>",
                       "type": "<Partition Key Type>",
                       "permissions": {
                         "read": {},
                         "write": {}
                       }
                     }
                   },
                   ...
                 },
                 ...
               }

            .. seealso::

               :admin-api-endpoint:`Admin API: List All Services <operation/adminListServices>`


         .. step:: Choose a Partition Key

            The sync partition key is a field in every synced document that maps
            each document to a client-side realm. Sync rules apply at the partition level,
            so it's particularly important to consider your data model and access
            patterns. For more information on partition keys and how to choose one, see
            :ref:`Partitions <sync-partitions>`.

            You can get a list of all valid partition keys and their corresponding types
            through the Admin API:

            .. code-block:: shell

               curl https://realm.mongodb.com/api/admin/v3.0/groups/{GROUP_ID}/apps/{APP_ID}/sync/data?service_id=<MongoDB Service ID> \
                 -X GET \
                 -h 'Authorization: Bearer <Valid Access Token>'

            .. note::

              The partition key can either be required or optional. If the partition key
              field is optional, then all MongoDB documents that either exclude the
              partition key or have a null value for the partition key will be sent to the
              null partition. If the partition key field is required, {+sync+}
              ignores any MongoDB documents that lack a valid value for the partition
              key. We recommend a required partition key unless you want to sync
              pre-existing data with invalid or missing partition values from a
              MongoDB collection.

            Once you have decided which field to use, update ``config.sync.partition``
            with the partition key field name in the ``key`` field and the partition key
            type in the ``type`` field.

            .. code-block:: json
               :emphasize-lines: 6, 7

               {
                 "config": {
                   "sync": {
                     "state": "enabled",
                     "partition": {
                       "key": "owner_id",
                       "type": "string",
                       "permissions": {
                         "read": {},
                         "write": {}
                       }
                     }
                   },
                   ...
                 },
                 ...
               }

            .. seealso::

               :admin-api-endpoint:`Admin API: List Valid Partition Keys <operation/adminGetSync>`


         .. step:: Define Read & Write Permissions

            {+service-short+} allows you to define :ref:`JSON expressions <expressions>` that it
            dynamically evaluates whenever a user opens a realm to determine if the user
            has read or write permissions for data in the partition.

            Sync rule expressions have access to :json-expansion:`%%user`, which resolves
            to the user that opened the realm, and :json-expansion:`%%partition`, which
            resolves to the partition key value for the realm. You can also use operators,
            including :json-operator:`%function`, to handle more complex cases. For
            examples, see :ref:`Sync Permissions <sync-permissions>`.

            Once you've determined how to decide a user's read and write permissions for a
            given partition, define the corresponding JSON expressions in the
            ``read`` and ``write`` fields of ``config.sync.partition.permissions``.

            .. code-block:: json
               :emphasize-lines: 9-14, 15-17

               {
                 "config": {
                   "sync": {
                     "state": "enabled",
                     "partition": {
                       "key": "owner_id",
                       "type": "string",
                       "permissions": {
                         "read": {
                           "$or": [
                             { "%%user.id": "%%partition" },
                             { "%%user.custom_data.shared": "%%partition" }
                           ]
                         },
                         "write": {
                           "%%user.id": "%%partition"
                         }
                       }
                     }
                   },
                   ...
                 },
                 ...
               }


         .. step:: Deploy the Sync Configuration

            Now that you've defined the sync configuration, including read and write
            permissions, you can deploy your changes to start syncing data and enforcing
            sync rules.

            To deploy your changes, send an Admin API request that updates the cluster
            configuration with your sync configuration:

            .. code-block:: shell

               curl https://realm.mongodb.com/api/admin/v3.0/groups/{GROUP_ID}/apps/{APP_ID}/services/{MongoDB_Service_ID}/config \
                 -X PATCH \
                 -h 'Authorization: Bearer <Valid Access Token>' \
                 -d '{"sync":{"state":"enabled","database_name":"","partition":{"key":"_partition","type":"string","permissions":{"read":{"$or":[{"%%user.id":"%%partition"},{"%%user.custom_data.shared":"%%partition"}]},"write": {"%%user.id": "%%partition"}}}}'

            .. seealso::

               :admin-api-endpoint:`Admin API: Update a Service Configuration <operation/adminGetServiceConfig>`


.. _enable-flexible-sync:

Enable Flexible Sync
--------------------

.. include:: /includes/note-flexible-sync-prerequisite.rst

.. tabs-realm-admin-interfaces::

   .. tab::
      :tabid: ui
      
      .. procedure::

         .. step:: Navigate to the {+sync-short+} Configuration Screen

            To define {+sync-short+} rules and enable {+sync-short+} for your application, navigate to the
            :guilabel:`{+sync-short+}` configuration screen through the {+leftnav+}.


         .. step:: Select Development Details

            Under the :guilabel:`Select Development Details` heading, you can configure
            various development details, such as {+sync-short+} types, Development Mode,
            and a cluster to {+sync-short+}.

            Below the :guilabel:`{+sync-short+} types` subheading, select the :guilabel:`Flexible`
            option to enable Flexible {+sync-short+}.

            Next, under the :guilabel:`Development Mode` subheading, you can choose to
            toggle :ref:`Development Mode <enable-disable-development-mode>` on/off.
            Enabling ``Development Mode`` allows you to define schemas directly in your
            client application code and is suitable if you are in development and do not
            have application data in Atlas yet.

            Finally, you can enable {+sync-short+} for a single linked cluster in your
            application. Determine which cluster you want to use and select it from
            the :guilabel:`Select Cluster To {+sync-short+}` dropdown menu.

            .. important:: Ineligible Clusters

               Flexible Sync requires MongoDB 5.0. Clusters display as gray and not-selectable
               in the UI when they do not meet the requirements for Flexible Sync.

            .. figure:: /images/flex-sync-select-development-details.png
               :width: 750px
               :alt: Select Development Details Menu


         .. step:: Select Queryable Fields

            When configuring Flexible {+sync-short+}, specify one or more :ref:`queryable
            fields <queryable-fields>` from your {+sync-short+} Schema.

            To configure queryable fields for your application, navigate to the
            :guilabel:`Select Queryable Fields` heading. Select up to 10 existing fields
            from your schema to query on. If you want to create a new field(s) to
            construct a query on, you must define a database and enable ``Development Mode``.

            .. figure:: /images/flex-sync-set-queryable-fields.png
               :width: 750px
               :alt: Select Queryable Fields


         .. step:: Define Read & Write Permissions

            In the :guilabel:`Define Permissions` section, you can define the session
            roles and rules for your app.

            For details, see :ref:`flexible-sync-rules-and-permissions`.

            .. figure:: /images/flex-sync-define-permissions.png
               :width: 750px
               :alt: Define Permissions Settings


         .. step:: Configure Asymmetric Sync (Optional)

            1. Expand the :guilabel:`Advanced Configuration` section.

            #. The dropdown under the :guilabel:`Asymmetric Sync` heading shows the
               collections that you can select for this Asymmetric Sync. When you select a
               collection, it is listed below the dropdown.

               .. figure:: /images/asymmetric-sync.png
                  :alt: Select Asymmetric Sync collections

            #. If you have Dev Mode enabled, you can also create a new collection. When you
               select the dropdown, you can type in the name of the new collection, and
               {+backend-short+} creates the collection automatically.


         .. step:: Turn On Sync

            Now that you've configured rules for your synced cluster, all that's left to
            do is turn on {+sync-short+} for client applications. Click :guilabel:`Enable {+sync-short+}`,
            take note of any recommendations that appear and then confirm your choice.

     
   .. tab::
      :tabid: cli
      
      .. procedure::

         .. step:: Pull the Latest Version of Your App

            To update your app through the CLI, you need an :ref:`up-to-date application
            directory <application-directory>`. To pull a local copy of the latest version
            of your app, run the following:

            .. code-block:: bash

               realm-cli pull --remote="<Your App ID>"


         .. step:: Select a Cluster to Sync

            You can enable {+sync-short+} for a single linked cluster in your application.
            If you have not yet linked the cluster to your application, follow the
            :ref:`link-a-data-source` guide to link it before
            you continue.

            Determine which cluster you want to use and then open its configuration file.
            Add the ``config.flexible_sync`` field with the following template:

            .. code-block:: json

               {
                   "config": {
                       "flexible_sync": {
                           "state": "enabled",
                           "database_name": "",
                           "permissions": {
                               "defaultRoles": [
                                   {
                                       "applyWhen": {},
                                       "name": "all",
                                       "read": true,
                                       "write": true
                                   }
                               ],
                               "rules": {}
                           },
                           "queryable_fields_names": []
                       }
                   }
               }

            Replace the ``database_name`` field's value with the name of your database.

            .. note::

              The default role applies to any collection where you do not define custom roles.
              Since there is no custom roles defined in the above example, the default role
              applies to all collections.


         .. step:: Choose Queryable Fields

            The ``queryable_fields_names`` property allows you to define a set of
            queryable fields for the device should query on. A queryable field can be any
            top-level primitive field with a scalar type, this excludes embedded objects or arrays.

            To learn more about queryable fields, read the :ref:`queryable fields
            <queryable-fields>` documentation.

            .. code-block:: json

               {
                   "config": {
                       "flexible_sync": {
                           "state": "enabled",
                           "database_name": "",
                           "permissions": {
                               "defaultRoles": [
                                   {
                                       "applyWhen": {},
                                       "name": "all",
                                       "read": true,
                                       "write": true
                                   }
                               ],
                               "rules": {}
                           },
                           "queryable_fields_names": ["age", "name"]
                       }
                   }
               }


         .. step:: Define Read & Write Permissions

            In the ``flexible_sync`` configuration field, you can define the session roles
            and rules for your app.

            For details, see :ref:`flexible-sync-rules-and-permissions`.

            In the following example, there is a user-defined role in the ``Employees``
            collection. This role takes precedent, and the default role is not applied for
            the ``Employees`` collection. However, since the ``Items`` collection does not
            specify a value, {+backend+} will apply the default role to the ``Items`` collection.

            .. code-block:: json

               {
                 "config": {
                   "flexible_sync": {
                     "state": "enabled",
                     "database_name": "test-database",
                     "permissions": {
                       "Employees": {
                         "roles": [
                           {
                             "name": "everyone",
                             "applyWhen": {},
                             "read": { "owner_id": "%%user.id" },
                             "write": false
                           }
                         ]
                       },
                       "Items": {},
                       "defaultRoles": [
                         {
                           "applyWhen": {},
                           "name": "all",
                           "read": true,
                           "write": true
                         }
                       ],
                       "rules": {}
                     },
                     "queryable_fields_names": ["age", "name"]
                   }
                 }
               }


         .. step:: Deploy the Sync Configuration

            Now that you've defined the {+sync-short+} configuration, including read and write
            permissions, you can deploy your changes to start syncing data and enforcing
            {+sync-short+} rules.

            To deploy your changes, import your app configuration:

            .. code-block:: shell

               realm-cli push --remote="<Your App ID>"
     
   .. tab::
      :tabid: api
      
      .. procedure::

         .. step:: Select a Cluster to Sync

            You can enable {+sync-short+} for a single linked cluster in your application.
            If you have not yet linked the cluster to your application, follow the
            :ref:`link-a-data-source` guide to link it before
            you continue.

            You'll need the cluster's service configuration file to configure {+sync-short+}. You
            can find the configuration file by listing all services through the Admin API:

            .. note:: Authenticating Your Request with an Access Token

              To authenticate your request to the {+service-short+} Admin API, you need a valid and
              current authorization token from the MongoDB Cloud API. Read the
              :admin-api-endpoint:`API Authentication <section/Get-Authentication-Tokens>`
              documentation to learn how to acquire a valid access token.

            .. code-block:: shell

               curl https://realm.mongodb.com/api/admin/v3.0/groups/{GROUP_ID}/apps/{APP_ID}/services \
                 -X GET \
                 -h 'Authorization: Bearer <Valid Access Token>'

            Once you have the configuration, add the ``config.flexible_sync`` field with the
            following template configuration:

            .. code-block:: json

               {
                   "config": {
                       "flexible_sync": {
                           "state": "enabled",
                           "database_name": "",
                           "permissions": {
                               "defaultRoles": [
                                   {
                                       "applyWhen": {},
                                       "name": "all",
                                       "read": true,
                                       "write": true
                                   }
                               ],
                               "rules": {}
                           },
                           "queryable_fields_names": []
                       }
                   }
               }

            Replace the ``database_name`` field's value with the name of your database.

            .. note::

              The default role applies to any collection where you do not define custom roles.
              Since no custom roles are defined in the above example, the default role
              applies to all collections.

            .. seealso::

              :ref:`Default Roles <default-roles>`


         .. step:: Choose Queryable Fields

            The ``queryable_fields_names`` property defines a set of queryable fields that
            the device may query on. A queryable field can be any top-level primitive
            field with a scalar type. A queryable field cannot be an embedded object or
            array.

            To learn more about queryable fields, read the :ref:`queryable fields
            <queryable-fields>` documentation.

            Add the fields you would like your application to query on to the ``config.flexible_sync.queryable_fields_names``:

            .. code-block:: json

               {
                   "config": {
                       "flexible_sync": {
                           "state": "enabled",
                           "database_name": "",
                           "permissions": {
                               "defaultRoles": [
                                   {
                                       "applyWhen": {},
                                       "name": "all",
                                       "read": true,
                                       "write": true
                                   }
                               ],
                               "rules": {}
                           },
                           "queryable_fields_names": ["age", "name"]
                       }
                   }
               }


         .. step:: Define Read & Write Permissions

            In the ``flexible_sync`` configuration field, you can define the session roles
            and rules for your app.

            For details, see :ref:`flexible-sync-rules-and-permissions`.

            In the following example, there is a user-defined role in the ``Employees``
            collection. This role takes precedent, and the default role is not applied for
            the ``Employees`` collection. However, since the ``Items`` collection does not
            specify a value, {+backend+} will apply the default role to the ``Items`` collection.

            .. code-block:: json

               {
                 "config": {
                   "flexible_sync": {
                     "state": "enabled",
                     "database_name": "test-database",
                     "permissions": {
                       "Employees": {
                         "roles": [
                           {
                             "name": "everyone",
                             "applyWhen": {},
                             "read": { "owner_id": "%%user.id" },
                             "write": false
                           }
                         ]
                       },
                       "Items": {},
                       "defaultRoles": [
                         {
                           "applyWhen": {},
                           "name": "all",
                           "read": true,
                           "write": true
                         }
                       ],
                       "rules": {}
                     },
                     "queryable_fields_names": ["age", "name"]
                   }
                 }
               }


         .. step:: Deploy the Sync Configuration

            Now that you've defined the {+sync-short+} configuration, including read and write
            permissions, you can deploy your changes to start syncing data and enforcing
            {+sync-short+} rules.

            To deploy your changes, send an Admin API request that updates the cluster
            configuration with your {+sync-short+} configuration.

            .. note:: Authenticating Your Request with an Access Token

              To authenticate your request to the {+service-short+} Admin API, you need a valid and
              current authorization token from the MongoDB Cloud API. Read the
              :admin-api-endpoint:`API Authentication <section/Get-Authentication-Tokens>`
              documentation to learn how to acquire a valid access token.

            .. code-block:: shell

               curl https://realm.mongodb.com/api/admin/v3.0/groups/{GROUP_ID}/apps/{APP_ID}/services/{MongoDB_Service_ID}/config \
                 -X PATCH \
                 -h 'Authorization: Bearer <Valid Access Token>' \
                 -h "Content-Type: application/json"
                 -d @/some-directory/config.json
