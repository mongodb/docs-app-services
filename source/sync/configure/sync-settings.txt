.. _sync-settings:

=============
Sync Settings
=============

.. facet::
   :name: genre 
   :values: reference

.. meta:: 
  :description: Learn about Atlas Device Sync settings and how to configure them in your App Services App.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page explains the settings available when you :ref:`enable or configure
Device Sync <enable-sync>`.

Available Settings
------------------

.. _flexible-sync:

Sync Type
~~~~~~~~~

Atlas Device Sync has two sync modes: Flexible Sync and the older
Partition-Based Sync. Partition-Based Sync has 
been deprecated and is disallowed for new Sync configurations. If you have 
an existing app that uses Partition-Based Sync, you can migrate 
to Flexible Sync. For more information, refer to :ref:`realm-sync-migrate-modes`.

Flexible Sync lets you define a query in the client and sync only the objects
that match the query. With client-side subscriptions, client applications can:

- Maintain queries
- React to changes
- Add, change, or delete queries

.. _development-mode:
.. _enable-development-mode:
.. _enable-disable-development-mode:

Development Mode
~~~~~~~~~~~~~~~~

**Development Mode** is a configuration setting that allows Device Sync
to infer and update schemas based on client-side data models. This feature 
speeds up development by allowing you to design :ref:`schemas
<configure-your-data-model>` directly in client application code. However, 
Development Mode should *not* be used in production.

When you sync a client database, App Services maps every synced object type
to its own collection in the database specified by
:ref:`sync-config-database-name`. If you update the object model on the client
side, App Services updates the collection schema to match. This lets you update
objects in your client code as you develop your app.

When you enable Development Mode for your app, the following occurs:

- For apps that support schema versioning, the schema version is cleared, and any schema versioning history is deleted.
  This is because Development Mode does *not* support schema versioning. After
  you disable Development Mode, schema versioning is enabled automatically.
  Refer to :ref:`schema-versioning` for more information.
- Anonymous authentication is enabled. However, you can manually disable
  anonymous authentication for
  your app, even while
  Development Mode is enabled. Refer to :ref:`anonymous-authentication`
  for more information.
- Deployment drafts are disabled. You *cannot* re-enable deployment drafts in the
  UI while Development Mode is enabled. However, you can still manually create
  deployment drafts through the CLI or the Admin API. Refer to
  :ref:`deployment-draft` for more information.

You can use :ref:`data access rules <sync-rules>` with Development Mode. Note
that schema changes ignore data access rules. This means that any client can
update the backend schema by changing the client model.

To learn more about how the Realm Object Schemas map to the App Services Schemas
when using Development Mode, refer to :ref:`Data Model Mapping <sync-data-model-mapping>`.

For more information about updating your schema in Development Mode, refer to
:ref:`update-data-model-development-mode`.

.. include:: /includes/note-dev-mode-production.rst

.. _sync-config-data-source:

Cluster to Sync
~~~~~~~~~~~~~~~

The name of the Atlas cluster :ref:`data source <appconfig-data_sources>` where
you want the synced data stored.

Flexible Sync requires MongoDB 5.0. You cannot use Sync with a :ref:`serverless
instance <serverless-caveats>`. In the UI, clusters display as gray and
not-selectable when they do not meet the requirements for Flexible Sync.

.. _sync-config-database-name:

Database Name (Development Mode Only)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you enable :ref:`Development Mode <development-mode>`, you specify a
database to store synced objects. App Services creates new collections in this
Development Mode database for every type of synced object.

.. example::

   Specify a Development Mode database of ``myapp``. Your iOS client has a 
   ``Person`` model. You sync a realm that contains an instance of the 
   ``Person`` object. Development Mode creates a server-side schema associated 
   with the model. The object syncs to the ``myapp.Person`` collection. 

   App Services continues creating new server-side schemas and collections 
   for each new object type. If you later add a ``Dog`` object, that object 
   will sync to a new ``myapp.Dog`` collection that App Services will
   create.

.. _queryable-fields:

Queryable Fields
~~~~~~~~~~~~~~~~

When you configure Flexible Sync, you specify field names that your client
application can query in a Flexible Sync subscription. Fields that can be 
used in a subscription query are called **queryable fields**.

.. example::

   In a to-do list app, you might set ``assignee`` or ``owner`` 
   as queryable fields. On the client side, you can then query for tasks 
   whose ``assignee`` or ``owner`` matches the logged-in user. 

.. _queryable-field-scopes:

Queryable Field Scopes
``````````````````````

Queryable fields apply to a scope you designate when you configure them. The
two available scopes are:

- **Global queryable fields**: scoped across all collections in an App's Schema.
- **Collection queryable fields**: scoped to a single collection in the App.

Scoping a queryable field to a specific collection reduces the amount of
backing Atlas storage required to store Sync metadata.

You can use :ref:`rules and permissions <flexible-sync-rules-and-permissions>` 
to configure more granular access control on a per-collection basis. You 
can define collection-level rules and permissions for both global and 
collection queryable fields.

Configure Queryable Fields
``````````````````````````

You can automatically specify queryable fields by enabling :ref:`Development
Mode <development-mode>`. Fields that appear in client queries while using 
Development mode are automatically added as **collection queryable fields** 
for the collection being queried.

The field names you provide are arbitrary strings. If an object type has a field
whose name matches a field name you provided (and meets other eligibility
criteria), that field becomes available to Device Sync to query.

Configure Indexed Queryable Fields
++++++++++++++++++++++++++++++++++

You may only add or remove an indexed queryable field when Device Sync is 
not enabled. If Device Sync is already running in your App, you must 
:ref:`terminate Sync <terminating-realm-sync>`, and configure the indexed
queryable field when you :ref:`re-enable it <re-enable-realm-sync>`.

This causes :ref:`client resets <client-resets>` for any client attempting 
to reconnect after re-enabling Sync.

.. _flexible-sync-eligible-field-types:

Eligible Field Types
````````````````````

Flexible Sync only supports top-level primitive fields with a scalar type as 
queryable fields. You can also include arrays of these primitives as queryable 
fields. Flexible Sync does not support embedded objects or arrays of 
objects as queryable fields.

**Indexed queryable fields** support a subset of data types. Your indexed 
queryable field can be one of: ``int64``, ``string``, ``ObjectId``, ``UUID``.

.. seealso:: Realm Query Language - Flexible Sync Limitations

   For information on the queries you can perform on these fields, see:
   :ref:`flexible-sync-rql-limitations`

.. _flexible-sync-reserved-field-names:

Reserved Field Names
````````````````````

.. include:: /includes/reserved-field-names.rst

Performance and Storage
```````````````````````

Each queryable field adds additional metadata storage to your Atlas cluster and
may lead to degraded write performance. You should have as few queryable fields
as needed by your application, and scope them to the minimum number of 
collections required.

Many apps find a good balance between storage usage and query flexibility 
with at most 10 queryable fields applying to any single collection. 
For example, if you have 3 *global queryable fields* and 7 
*collection queryable fields*, you have 10 queryable fields that apply to the 
collection.

If you have a field that you only want to query in one collection, but it 
is configured as a *global queryable field*, this unnecessarily consumes 
Atlas storage space. For example, if you have a ``user`` field in every 
collection, but you only use it for Sync queries in one collection, scoping 
that as a *collection queryable field* reduces storage requirements. Reducing
the scope means that Sync does not have to maintain metadata for that field
for the other collections where you are not querying on the ``user`` field.

If you need to reduce storage usage or improve performance, you can remove 
unneeded queryable fields from your App. However, be aware of the consequences 
of adding or removing queryable fields. For more information, refer to 
:ref:`consequences-of-adding-removing-queryable-fields`.

For additional considerations, refer to :ref:`optimizing performance and 
storage when using Flexible Sync <optimizing-performance-and-storage-flexible-sync>`.

.. _fs-indexed-queryable-fields:

Indexed Queryable Fields
++++++++++++++++++++++++

You can improve performance for certain types of workloads by adding an
indexed queryable field. An **indexed queryable field** is a 
**global queryable field** that can be queried on more efficiently, providing
improved Sync performance. You can designate *one* global queryable field
as an indexed queryable field.

Indexing a queryable field improves performance for simple queries on a 
single field, such as ``{“store_id”: 1}`` or  
``{“user_id”: “641374b03725038381d2e1fb”}``.

The indexed queryable field *must* appear in the schemas of all of your 
Sync collections, and it must use the same valid data type. For example,
if your indexed queryable field is ``store_id``, it must appear in all of
the collections you sync, and it must be the same valid type in all the
collections. For more information about eligible field types, refer to
:ref:`flexible-sync-eligible-field-types`.

**You Can't Change Indexed Queryable Field Values on the Client**

After you configure an indexed queryable field, client devices **cannot**
update an existing object's indexed queryable field value. For example,
if your indexed queryable field is ``store_id``, the client cannot change 
this value directly. Changing it from the client is not supported because 
it may conflict with other updates made to the object in the same timeframe. 

If you attempt to change an indexed queryable field's value on the device,
this triggers a compensating write error. For more information about this
error and the behavior it entails, refer to ``ErrorCompensatingWrite`` in
the :ref:`flexible-sync-errors` documentation.

You can still change this value directly in the Atlas database. 

.. warning::

   Changing an object's indexed queryable field value through Atlas may 
   overwrite concurrent client updates to the object.

.. _fs-indexed-queryable-fields-valid-client-side-queries:

**Client-Side Queries on Indexed Queryable Fields**

When your app uses an indexed queryable field, client-side queries in a 
Flexible Sync subscription *must* include the indexed queryable field using
an ``==`` or ``IN`` comparison against a constant at least once. For
example, ``user_id == 641374b03725038381d2e1fb`` or ``store_id IN {1,2,3}``.

You can optionally include an ``AND`` comparison as long as the indexed
queryable field is directly compared against a constant using ``==`` or ``IN``
at least once. For example, ``store_id IN {1,2,3} AND region=="Northeast"``
or ``store_id == 1 AND (active_promotions < 5 OR num_employees < 10)``.

*Invalid* Flexible Sync queries on an indexed queryable field include queries 
where:

- The indexed queryable field does not use ``AND`` with the rest of the query.
  For example ``store_id IN {1,2,3} OR region=="Northeast"`` is invalid
  because it uses ``OR`` instead of ``AND``.  Similarly, 
  ``store_id == 1 AND active_promotions < 5 OR num_employees < 10`` is invalid
  because the ``AND`` only applies to the term next to it, not the entire
  query.
- The indexed queryable field is not used in an equality operator. For example
  ``store_id > 2 AND region=="Northeast"`` is invalid because it uses only 
  the ``>`` operator with the indexed queryable field and does not have an 
  equality comparison.
- The query is missing the indexed queryable field entirely. For example, 
  ``region=="Northeast"`` or ``truepredicate`` are invalid because they do
  not contain the indexed queryable field.

.. _consequences-of-adding-removing-queryable-fields:

Consequences of Adding or Removing Queryable Fields
```````````````````````````````````````````````````

You can :ref:`update your Sync configuration <alter-your-sync-configuration>` 
to add or remove queryable field names while Sync is enabled, but be aware 
of the following:

When you add a queryable field, devices can only sync on that field once the
device has caught up to the point in time in :ref:`Device Sync History
<sync-history>` where the field was added. 

When you remove a queryable field, any devices still using that field will have
their Device Sync session dropped and must perform a :ref:`client reset
<client-resets>`. Clients not using the removed field won't receive any errors.
To avoid triggering a client reset when you remove the queryable field, you
should first remove usage of that field on the client-side.

If you :ref:`terminate Sync <terminating-realm-sync>` before adding or 
removing queryable fields, these considerations do not apply. However, 
terminating Sync does trigger a :ref:`client reset <client-resets>` for
any client that has Synced with your App.

Permissions
~~~~~~~~~~~

Atlas Device Sync enforces role-based data access rules for all requests to a
synced cluster. Rules are dynamic :ref:`JSON expressions <expressions>` that
determine a user's ability to sync, view, and modify data.

For details, see :ref:`sync-permissions`.

.. _asymmetric-sync:
.. _optimize-data-ingest:

Data Ingest
~~~~~~~~~~~

Data Ingest is a sync strategy for applications with heavy client-side
insert-only workloads. You can enable it for one or more collections. It
supports writing to any collection type, including an Atlas time-series
collection.

For example, an IoT app that frequently logs sensor data has a significant write
workload and no read workload. The device may also be offline for extended
periods of time. Data Ingest bypasses some of the processing required for
bi-directional sync, significantly improving write speed to an Atlas collection.

Other use cases include writing immutable data, such as invoices from a retail
app, or logging application events, neither of which requires conflict
resolution.

You can apply Data Ingest to individual collections. This means your app can
use Data Ingest to write some data, but bi-directional Flexible Sync on
other collections.

Data Ingest collections are only for writing data. You cannot use Flexible
Sync queries against these collections. Instead, use :ref:`data-sources`.

After you have enabled Data Ingest, you implement it in the client app via
the client SDKs. Currently, the following Realm SDKs support Data Ingest:

- C++ SDK: :ref:`cpp-stream-data-to-atlas`
- Flutter SDK: :ref:`flutter-stream-data-to-atlas`
- Kotlin SDK: :ref:`kotlin-stream-data-to-atlas`
- .NET SDK: :ref:`dotnet-data-ingest`
- Node.js SDK: :ref:`node-define-an-asymmetric-object`
- React Native SDK: :ref:`react-native-define-an-asymmetric-object`
- Swift SDK: :ref:`swift-stream-data-to-atlas`

Atlas Device Sync completely manages the lifecycle of this data. 
It is maintained on the device until Data Ingest synchronization is 
complete, and then removed from the device.

Client Max Offline Time
~~~~~~~~~~~~~~~~~~~~~~~

Client Maximum Offline Time determines how long the client can be offline
between sync sessions. Changing this value enables you to balance offline access
with storage used in the synced Atlas cluster. For more information, refer to
:ref:`client-maximum-offline-time`.

Client Recovery
~~~~~~~~~~~~~~~

Client Recovery enables the client to attempt to automatically perform a client
reset while recovering data on the device. For more information, refer to
:ref:`recover-unsynced-changes`.

.. _appconfig-sync:
.. _sync-configuration-reference:

Sync Configuration File Reference
---------------------------------

You can find the Sync configuration file for your application in the ``sync``
directory of an :ref:`exported <export-app>` app:

.. code-block:: none
   
   app/
   └── sync/
       └── config.json

For example, the following Sync configuration applies to apps using Flexible
Sync.

.. code-block:: json
   :caption: sync/config.json

   {
     "type": "flexible",
     "development_mode_enabled": <Boolean>,
     "service_name": "<Data Source Name>",
     "database_name": "<Development Mode Database Name>",
     "state": <"enabled" | "disabled">,
     "client_max_offline_days": <Number>,
     "is_recovery_mode_disabled": <Boolean>,
     "queryable_fields_names": [
       <Array of String Field Names>
     ],
     "indexed_queryable_fields_names": [
      <Array of String Field Names>
     ],
     "collection_queryable_fields_names": <Map[String][]String>
     "permissions": "<Deprecated, Do Not Use>"
   }

The deprecated ``permissions`` field might still appear in your exported app's
configuration. That might indicate your app has not automatically migrated to
the :ref:`unified rule system yet <unified-rule-migration>`. Please avoid
deleting this field until your app has been migrated.

.. _flexible-sync-config-object:

Sync Config Object
~~~~~~~~~~~~~~~~~~

.. include:: /sync/config-table.rst
