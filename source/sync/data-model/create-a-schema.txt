.. _create-schema-for-backend-realm-app:

===============
Create a Schema
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

You can create a schema for your App in one of two ways:

- :ref:`Create a {+frontend-schema+} from an Atlas App Services Schema <create-rom-from-schema>`: 
  If you have data in your 
  `{+atlas+} <https://www.mongodb.com/realm?tck=docs_realm#atlas-form-container>`_ 
  cluster already, MongoDB generates a schema by sampling your data.
  Atlas App Services can then translate that schema into a {+frontend-schema+}
  to use in your mobile application with the Realm SDK.

- :ref:`Create a schema from a {+frontend-schema+} <create-schema-from-rom>`:
  Alternatively, if you are developing mobile-first and do not already have 
  data in your {+atlas-short+} cluster, you can translate your {+frontend-schema+} into 
  a schema for use with {+atlas-short+}. Regardless of the approach that you take,
  when you configure both your {+atlas-short+} cluster and Mobile application to use 
  the respective data model, changes to the data model between the server 
  and client are auto-updated.

.. _create-rom-from-schema:

Create a {+frontend-schema+} from an App Services Schema
-------------------------------------------------------

.. note:: Link a {+atlas+} Data Source
   
   Your app must have at least one :ref:`linked data source
   <data-sources>` in order to define an App Services data model.
   
   You cannot use sync with a :ref:`serverless instance
   <serverless-caveats>` or :ref:`{+adf-instance+} <data-federation-caveats>`.

.. procedure::

   .. step:: Define an App Services Schema

      To get started, ensure you have an App Services Schema defined. App Services
      will translate this App Services Schema into a {+frontend-schema+} to be
      configured and utilized in your mobile application.

      .. important:: Primary Key _id Required

         To work with Atlas Device Sync, your data model **must** have a primary key field
         called ``_id``. ``_id`` can be of type ``string``, ``int``, ``uuid``, ``ObjectId``, or
         ``objectId``.

      .. note::

         To learn how to define a schema for a collection in the synced cluster, see
         :ref:`enforce-a-schema`.


   .. step:: View the {+frontend-schema+}


      The {+frontend-schema+} defines and validates your data in your mobile
      client application. To view your {+frontend-schema+}, navigate to the
      :guilabel:`SDKs` page, where you can view your App Services Schema as a
      generated {+frontend-schema+} in your language of choice.

      .. figure:: /images/translate-jsonschema-into-realm-data-model.png
         :alt: The generated Realm Object Models and associated warnings in the UI
         :width: 750px
         :lightbox:


   .. step:: View and Fix Schema Errors


      App Services may fail to generate some or all of your {+frontend-schema+} based on your
      App Services Schema. You can view a list of the errors in your App Services Schema that
      prevented App Services from generating the {+frontend-schema+} on the :guilabel:`SDKs`
      page of the App Services UI.

      Common errors include mismatched types, and differences in the way
      relationships are represented in the two respective models. For each
      error or warning, modify your App Services Schema to fix the specified issue.

      .. figure:: /images/schema-translation-errors-warnings.png
         :alt: A detailed list in the UI of warnings and errors that occurred during model
         :width: 750px
         :lightbox:


   .. step:: Open a Realm with the {+frontend-schema+}

      You can immediately use the generated {+frontend-schema+} in your
      client application. In order to begin enforcing data validation with
      your data model, you can open a realm with the {+frontend-schema+}.
      This will prevent improper data from entering your database from your
      mobile client. Click :guilabel:`Copy` on the right-hand side of the
      {+frontend-schema+} for the Object Model you want to integrate into
      your mobile application code. This will copy the {+frontend-schema+}
      code for the SDK of your choice into your clipboard. Open your mobile
      application code in your IDE and paste the {+frontend-schema+} code in.

      .. tabs-realm-languages::

        .. tab::
            :tabid: javascript

            .. code-block:: javascript

              const UserSchema = { // your copied and pasted {+frontend-schema+}
                name: 'User',
                properties: {
                  _id: 'objectId',
                  _partition: 'string',
                  name: 'string',
                  birthday: 'date'
                },
                primaryKey: '_id'
              };
              // Initialize a realm with your {+frontend-schema+}
              Realm.open({schema: UserSchema, sync: { /* ... */ }})
                .then(realm => {
                  // ... use the realm instance to read and modify data
                })

      .. seealso::

         - :ref:`Sync Data on Android <java-sync-data>`
         - :ref:`Sync Data on iOS <ios-sync-changes-between-devices>`
         - :ref:`Sync Data on Node <node-sync-changes-between-devices>`
         - :ref:`Sync Data on React Native <react-native-sync-changes-between-devices>`

.. _create-schema-from-rom:

Create an App Services Schema from a {+frontend-schema+}
-------------------------------------------------------

.. note:: Link a {+atlas+} Data Source
   
   Your App must have at least one :ref:`linked data source
   <data-sources>` in order to create a schema.
   
   You cannot use Device Sync with a :ref:`serverless instance
   <serverless-caveats>` or :ref:`{+adf-instance+} <data-federation-caveats>`.

.. procedure::

   .. step:: Enable Development Mode Sync

      First,  :ref:`enable Development Mode sync <enable-development-mode>`.

      You can alter or define a {+frontend-schema+} through your mobile client SDK.
      Changes to your {+frontend-schema+} are only allowed when
      :guilabel:`Development Mode` is on in the App Services UI. App Services will
      reflect these changes to your {+frontend-schema+} in your App Services Schema used for
      Atlas.


   .. step:: Edit Your {+frontend-schema+}

      As you continue to develop your application, you will need to modify
      your data model with it to enforce different data validation rules
      based on those changes. While :guilabel:`Development Mode` is on, you
      can edit your {+frontend-schema+} in your client code. Data Validation
      occurs when :guilabel:`Development Mode` is off, so App Services does
      not accept changes to your {+frontend-schema+} while
      :guilabel:`Development Mode` is not on.

      .. important:: Primary Key _id Required

         To work with Atlas Device Sync, your data model **must** have a primary key field
         called ``_id``. ``_id`` can be of type ``string``, ``int``, or
         ``objectId``.

      .. example::

         A group is developing a social media application. When the group
         first developed their application, a user's birthday was a required
         field of the User's data model. However, due to privacy concerns
         over the amount of user data that is stored, management creates a
         new requirement to make the user's birthday field an optional
         field. Application developers turn on :guilabel:`Development Mode`
         in the App Services UI and then edit their user model within
         their client code.

         .. code-block:: javascript

           const realmObjectModel = {
             name: 'User',
             properties: {
               _id: 'objectId',
               _partition: 'string',
               name: 'string',
               birthday: {type: 'date', optional: true}, // developers set optional: true to adhere to the new requirement
             },
             primaryKey: '_id'
           };

           Realm.open({schema: realmObjectModel, sync: {/*...*/}})
             .then(realm => {
               // ... use the realm instance to read and modify data
             })

      .. seealso::

         - :ref:`Sync Data on Android <java-sync-data>`
         - :ref:`Sync Data on iOS <ios-sync-changes-between-devices>`
         - :ref:`Sync Data on Node <node-sync-changes-between-devices>`
         - :ref:`Sync Data on React Native <react-native-sync-changes-between-devices>`


   .. step:: Update Your App Services Schema with the {+frontend-schema+} Changes


      While :guilabel:`Development Mode` is on, App Services doesn't validate
      writes against your data model, allowing you to freely update your Realm
      Object Model. When you turn off :guilabel:`Development Mode`, MongoDB
      App Services automatically updates your App Services Schema and starts to enforce data
      validation for your Atlas cluster based on it.

      Click the "Turn Dev Mode Off" button on the top banner or in the
      :guilabel:`Sync` screen to turn off :guilabel:`Development Mode`. Once you
      turn off :guilabel:`Development Mode`, the "Development Mode is OFF" modal
      will appear. The modal indicates that App Services has stopped accepting new
      data model changes from clients. Click the "View My Schema" button on
      the modal to view your updated App Services Schema.

      .. note::

        To make future data model updates from your mobile client code, you
        can follow this procedure again.

      .. figure:: /images/turn-off-dev-mode.png
         :alt: The banner in the UI that shows Development Mode is enabled
         :width: 750px
         :lightbox:

      .. figure:: /images/view-my-json-schema.png
         :alt: The modal that confirms turning off Development Mode in the UI
         :width: 461px
         :lightbox:
