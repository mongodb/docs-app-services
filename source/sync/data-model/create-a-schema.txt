.. _create-schema-for-backend-realm-app:

===============
Create a Schema
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

You can create a schema for your {+app+} in one of two ways:

- :ref:`Create a {+frontend-schema+} from an {+service-short+} Schema <create-rom-from-schema>`: 
  If you have data in your 
  `{+atlas+} <https://www.mongodb.com/realm?tck=docs_realm#atlas-form-container>`_ 
  cluster already, MongoDB generates an {+service-short+} Schema by sampling your data. 
  {+service+} can then translate that {+service-short+} Schema into a {+frontend-schema+} 
  to use in your mobile application. 

- :ref:`Create an {+service-short+} Schema from a {+frontend-schema+} <create-schema-from-rom>`: 
  Alternatively, if you are developing mobile-first and do not already have 
  data in your {+atlas-short+} cluster, you can translate your {+frontend-schema+} into 
  an {+service-short+} Schema for use with {+atlas-short+}. Regardless of the approach that you take, 
  when you configure both your {+atlas-short+} cluster and Mobile application to use 
  the respective data model, changes to the data model between the server 
  and client are auto-updated.

.. _create-rom-from-schema:

Create a {+frontend-schema+} from an {+service-short+} Schema
-------------------------------------------------------

.. note:: Link a {+atlas+} Data Source
   
   Your app must have at least one :ref:`linked data source
   <data-sources>` in order to define an {+service-short+} data model.
   
   You cannot use sync with a :ref:`serverless instance
   <serverless-caveats>` or :ref:`{+adf-instance+} <data-federation-caveats>`.

.. procedure::

   .. step:: Define an {+service-short+} Schema

      To get started, ensure you have an {+service-short+} Schema defined. {+service+}
      will translate this {+service-short+} Schema into a {+frontend-schema+} to be
      configured and utilized in your mobile application.

      .. important:: Primary Key _id Required

         To work with {+sync+}, your data model **must** have a primary key field
         called ``_id``. ``_id`` can be of type ``string``, ``int``, ``uuid``, ``ObjectId``, or
         ``objectId``.

      .. note::

         To learn how to define a schema for a collection in the synced cluster, see
         :ref:`enforce-a-schema`.


   .. step:: View the {+frontend-schema+}


      The {+frontend-schema+} defines and validates your data in your mobile
      client application. To view your {+frontend-schema+}, navigate to the
      :guilabel:`SDKs` page, where you can view your {+service-short+} Schema as a
      generated {+frontend-schema+} in your language of choice.

      .. figure:: /images/translate-jsonschema-into-realm-data-model.png
         :alt: The generated Realm Object Models and associated warnings in the UI
         :width: 750px
         :lightbox:


   .. step:: View and Fix Schema Errors


      {+service-short+} may fail to generate some or all of your {+frontend-schema+} based on your
      {+service-short+} Schema. You can view a list of the errors in your {+service-short+} Schema that
      prevented {+service-short+} from generating the {+frontend-schema+} on the :guilabel:`SDKs`
      page of the {+ui+}.

      Common errors include mismatched types, and differences in the way
      relationships are represented in the two respective models. For each
      error or warning, modify your {+service-short+} Schema to fix the specified issue.

      .. figure:: /images/schema-translation-errors-warnings.png
         :alt: A detailed list in the UI of warnings and errors that occurred during model
         :width: 750px
         :lightbox:


   .. step:: Open an {+service-short+} with the {+frontend-schema+}

      You can immediately use the generated {+frontend-schema+} in your
      client application. In order to begin enforcing data validation with
      your data model, you can open an {+service-short+} with the {+frontend-schema+}.
      This will prevent improper data from entering your database from your
      mobile client. Click :guilabel:`Copy` on the right-hand side of the
      {+frontend-schema+} for the Object Model you want to integrate into
      your mobile application code. This will copy the {+frontend-schema+}
      code for the SDK of your choice into your clipboard. Open your mobile
      application code in your IDE and paste the {+frontend-schema+} code in.

      .. tabs-realm-languages::

        .. tab::
            :tabid: javascript

            .. code-block:: javascript

              const UserSchema = { // your copied and pasted {+frontend-schema+}
                name: 'User',
                properties: {
                  _id: 'objectId',
                  _partition: 'string',
                  name: 'string',
                  birthday: 'date'
                },
                primaryKey: '_id'
              };
              // Initialize an {+service-short+} with your {+frontend-schema+}
              {+service-short+}.open({schema: UserSchema, sync: { /* ... */ }})
                .then(realm => {
                  // ... use the realm instance to read and modify data
                })

      .. seealso::

         - :ref:`Sync Data on Android <java-sync-data>`
         - :ref:`Sync Data on iOS <ios-sync-changes-between-devices>`
         - :ref:`Sync Data on Node <node-sync-changes-between-devices>`
         - :ref:`Sync Data on React Native <react-native-sync-changes-between-devices>`

.. _create-schema-from-rom:

Create an {+service-short+} Schema from a {+frontend-schema+}
-------------------------------------------------------

.. note:: Link a {+atlas+} Data Source
   
   Your {+app+} must have at least one :ref:`linked data source
   <data-sources>` in order to define an {+service-short+} Data Model.
   
   You cannot use sync with a :ref:`serverless instance
   <serverless-caveats>` or :ref:`{+adf-instance+} <data-federation-caveats>`.

.. procedure::

   .. step:: Enable Development Mode Sync

      First,  :ref:`enable Development Mode sync <enable-development-mode>`.

      You can alter or define a {+frontend-schema+} through your mobile client SDK.
      Changes to your {+frontend-schema+} are only allowed when
      :guilabel:`Development Mode` is on in the {+service+} UI. {+service+} will
      reflect these changes to your {+frontend-schema+} in your {+service-short+} Schema used for
      Atlas.


   .. step:: Edit Your {+frontend-schema+}

      As you continue to develop your application, you will need to modify
      your data model with it to enforce different data validation rules
      based on those changes. While :guilabel:`Development Mode` is on, you
      can edit your {+frontend-schema+} in your client code. Data Validation
      occurs when :guilabel:`Development Mode` is off, so {+service+} does
      not accept changes to your {+frontend-schema+} while
      :guilabel:`Development Mode` is not on.

      .. important:: Primary Key _id Required

         To work with {+sync+}, your data model **must** have a primary key field
         called ``_id``. ``_id`` can be of type ``string``, ``int``, or
         ``objectId``.

      .. example::

         A group is developing a social media application. When the group
         first developed their application, a user's birthday was a required
         field of the User's data model. However, due to privacy concerns
         over the amount of user data that is stored, management creates a
         new requirement to make the user's birthday field an optional
         field. Application developers turn on :guilabel:`Development Mode`
         in the {+service+} UI and then edit their user model within
         their client code.

         .. code-block:: javascript

           const realmObjectModel = {
             name: 'User',
             properties: {
               _id: 'objectId',
               _partition: 'string',
               name: 'string',
               birthday: {type: 'date', optional: true}, // developers set optional: true to adhere to the new requirement
             },
             primaryKey: '_id'
           };

           {+service-short+}.open({schema: realmObjectModel, sync: {/*...*/}})
             .then(realm => {
               // ... use the realm instance to read and modify data
             })

      .. seealso::

         - :ref:`Sync Data on Android <java-sync-data>`
         - :ref:`Sync Data on iOS <ios-sync-changes-between-devices>`
         - :ref:`Sync Data on Node <node-sync-changes-between-devices>`
         - :ref:`Sync Data on React Native <react-native-sync-changes-between-devices>`


   .. step:: Update Your {+service-short+} Schema with the {+frontend-schema+} Changes


      While :guilabel:`Development Mode` is on, {+service+} doesn't validate
      writes against your data model, allowing you to freely update your Realm
      Object Model. When you turn off :guilabel:`Development Mode`, MongoDB
      {+service-short+} automatically updates your {+service-short+} Schema and starts to enforce data
      validation for your Atlas cluster based on it.

      Click the "Turn Dev Mode Off" button on the top banner or in the
      :guilabel:`Sync` screen to turn off :guilabel:`Development Mode`. Once you
      turn off :guilabel:`Development Mode`, the "Development Mode is OFF" modal
      will appear. The modal indicates that {+service+} has stopped accepting new
      data model changes from clients. Click the "View my {+service-short+} Schema" button on
      the modal to view your updated {+service-short+} Schema.

      .. note::

        To make future data model updates from your mobile client code, you
        can follow this procedure again.

      .. figure:: /images/turn-off-dev-mode.png
         :alt: The banner in the UI that shows Development Mode is enabled
         :width: 750px
         :lightbox:

      .. figure:: /images/view-my-json-schema.png
         :alt: The modal that confirms turning off Development Mode in the UI
         :width: 461px
         :lightbox:
