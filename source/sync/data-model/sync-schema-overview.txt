.. _sync-schema-overview:

========================
Sync Data Model Overview
========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

To use Alas Device Sync you must define your data model in two formats:

- **App Services Schema**: A server-side schema which defines your
  data in BSON. Device Sync uses the App Services Schema to convert your data
  to MongoDB documents and enforce validation and synchronize data between client
  devices and Atlas.

- **Realm Object Schema**: Client-side schema of data defined using the Realm SDKs.
  Each Realm SDK defines the Realm Object Schema in its own language-specific way.
  The Realm SDKs use this schema to store data in Realm Database
  and synchronize data with Device Sync.

The App Services Schema and Realm Object Schema must be consistent with each other
to sync data using Device Sync.

You can also sync data between clients using different Realm SDKs,
each of which implements the same Realm Object Schema. These Realm Object Schemas
must all be consistent with the App Services Schema as well.

For example, you have an iOS app and an Android app with their Realm Object Schemas
defined using the Realm Swift SDK and the Realm Kotlin SDK, respectively.
Both these mobile applications sync data using with the same App Services App with Device Sync.
The Swift SDK schema and the Kotlin SDK schema must both be consistent
with the same App Services Schema.

Create a Data Model
-------------------

You can create your Device Sync data model in a few ways.

If you already have data in Atlas, you can generate an App Services Schema
by sampling that data. You can then generate a Realm Object Schema for each Realm SDK.

If you prefer to develop your Realm Object Schema using the Realm SDKs first,
use Development Mode. When you use Development Mode, Device Sync automatically
generates an App Services Schema when you sync data from a client using a Realm SDK.

For more information on using both these approaches to modeling data,
refer to :ref:`Create a Data Model <create-sync-schema>`.

Update a Data Model
-------------------

When developing an application using Atlas Device Sync, you may need to make changes
to your data model. This means you also need to update your App Services Schema
and Realm Object Schema.

For more information on how to perform the different types of data model changes,
refer to :ref:`Update a Data Model <synced-schema-overview>`.

Example
-------

This example shows how to model a ``Dog`` with Device Sync.

App Services Schema
~~~~~~~~~~~~~~~~~~~

This App Services Schema creates the ``Dog`` data model used by Device Sync.

.. code-block:: json

   {
     "title": "Dog",
     "bsonType": "object",
     "required": [
       "_id",
       "_partition",
       "name"
     ],
     "properties": {
       "_id": {
         "bsonType": "objectId"
       },
       "_partition": {
         "bsonType": "string"
       },
       "name": {
         "bsonType": "string"
       },
       "age": {
         "bsonType": "int"
       }
       "breed": {
         "bsonType": "string"
       }
     }
   }

.. _object-schema:

Realm Object Schema
~~~~~~~~~~~~~~~~~~~

The following code examples create the ``Dog`` Realm Object Schema in each of the
Realm SDKs.

.. tabs-realm-sdks::

   .. tab::
      :tabid: android

      .. code-block:: java

         import io.realm.RealmObject;
         import org.bson.types.ObjectId;

         public class Dog extends RealmObject {
             @PrimaryKey
             @Required
             private ObjectId _id;

             private Integer age;

             private String breed;

             @Required
             private String name;

             // Standard getters & setters
             public ObjectId getId() { return _id; }
             public void setId(ObjectId _id) { this._id = _id; }

             public Integer getAge() { return age; }
             public void setAge(Integer age) { this.age = age; }

             public String getBreed() { return breed; }
             public void setBreed(String breed) { this.breed = breed; }

             public String getName() { return name; }
             public void setName(String name) { this.name = name; }
         }

   .. tab::
      :tabid: ios

      .. code-block:: swift

         import Foundation
         import RealmSwift

         class Dog: Object {
             @Persisted(primaryKey: true) var _id: ObjectId

             @Persisted var age: Int?

             @Persisted var breed: String?

             @Persisted var name: String = ""
         }

   .. tab::
      :tabid: node

      .. code-block:: js

         export const DogSchema = {
           name: 'Dog',
           properties: {
             _id: 'objectId',
             age: 'int?',
             breed: 'string?',
             name: 'string',
           },
           primaryKey: '_id',
         };

   .. tab::
      :tabid: react-native

      .. code-block:: js

         export const DogSchema = {
           name: 'Dog',
           properties: {
             _id: 'objectId',
             age: 'int?',
             breed: 'string?',
             name: 'string',
           },
           primaryKey: '_id',
         };

   .. tab::
      :tabid: dotnet

      .. code-block:: csharp

         using System;
         using System.Collections.Generic;
         using Realms;
         using MongoDB.Bson;

         public class Dog : RealmObject
         {
             [MapTo("_id")]
             [PrimaryKey]
             public ObjectId Id { get; set; }

             [MapTo("age")]
             public int? Age { get; set; }

             [MapTo("breed")]
             public string Breed { get; set; }

             [MapTo("name")]
             [Required]
             public string Name { get; set; }
         }

   .. tab::
      :tabid: flutter

      .. code-block:: dart

         import 'package:realm/realm.dart';
         part 'realm_models.g.dart';

         @RealmModel()
         class _Dog {
           @PrimaryKey()
           @MapTo('_id')
           late ObjectId id;

           int? age;

           String? breed;

           late String name;
         }


   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin

         import io.realm.RealmObject;
         import org.bson.types.ObjectId;

         open class Dog(
             @PrimaryKey
             var _id: ObjectId = ObjectId(),

             var age: Int? = null,

             var breed: String? = null,

             var name: String = ""
         ): RealmObject() {}



Data in Atlas
~~~~~~~~~~~~~

An application using Device Sync for the ``Dog`` data model creates MongoDB documents
in Atlas that looks like the following example.

.. code-block:: js

   {
     "_id": ObjectId('616f44305a205add93ff1081'),
     "age": 8,
     "breed": "Golden Retriever",
     "name": "Jasper"
   }
