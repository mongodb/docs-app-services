.. _enable-disable-development-mode:
.. _concept-development-mode:

==================================
Enable or Disable Development Mode
==================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can design schemas for your {+app+} directly in client code. The objects 
and relationships that you define in your application become the server-side 
document schema based on your SDK models. :ref:`{+client-sdks+} <realm-sdks>` 
give you language-specific tools to define and work with these objects.

You can infer schemas from your client object models by enabling development 
mode. Development mode is an Atlas Device Sync configuration setting for your {+app+}.
When you enable Development Mode, your {+app+} can create or update your 
schema by reading your synced {+realm+} files.

Why Use Development Mode?
-------------------------

Device Sync Development Mode enables developers to develop faster, and design
:ref:`schemas <configure-your-data-model>` directly in client application 
code.

Create Schemas
~~~~~~~~~~~~~~

In practice, here's how the server-side document schema definition process 
works with Development Mode:

1. Enable Development Mode.
2. Sync {+realm+} files from your local {+client-database+}.
3. The objects in the files become the definitions for your schema.

After you have synced {+realm+} files to define your schema, you can view the 
schema, and you can also export your data model for any or all of the Realm SDKs.

Update Schemas
~~~~~~~~~~~~~~

Schemas change as applications evolve. Development mode isn't just for 
creating schemas. You can also make non-breaking changes to schemas in the 
same way. 

When you sync a {+realm+} file, Atlas App Services maps every synced object type 
to its own collection. App Services then updates the collection schema 
to match the synced type. 

When you later sync an updated object, App Services automatically 
updates the collection schema. 

This lets you update objects in your client code as you develop your app, 
while App Services updates the schema to match.

.. seealso:: Modifying synced object schemas
 
   For more information about modifying synced object schemas, including
   how to make breaking changes, see: :ref:`<synced-schema-overview>`.

Key Concepts
------------

.. _sync-development-database:

Development Database
~~~~~~~~~~~~~~~~~~~~

When you enable Development Mode, you specify a database to store synced 
objects. App Services creates new collections in this Development Mode 
database for every type of synced object.

.. warning:: Specify Data Access Rules with Development Mode Enabled

   By default, enabling Development Mode before you have defined 
   permissions creates default permissions that allow any user to access 
   any data. If your application requires permissions during schema 
   development, you can :ref:`specify data access rules <sync-rules>` after 
   enabling Development Mode. However, to make changes to the schema,
   a user must have write access to all data.

.. example::

   Specify a Development Mode database of ``myapp``. Your iOS client has a 
   ``Person`` model. You sync a {+realm+} that contains an instance of the 
   ``Person`` object. Development Mode creates a server-side schema associated 
   with the model. The object syncs to the ``myapp.Person`` collection. 

   App Services continues creating new server-side schemas and collections 
   for each new object type. If you later add a ``Dog`` object, that object 
   will sync to a new ``myapp.Dog`` collection that App Services will
   create.

.. _enable-development-mode:

Enable Development Mode
-----------------------

.. important:: Disable Development Mode for Production Apps
   
   Development mode is a development utility that is not suitable for 
   production use. Make sure that you turn off Development Mode before you 
   make your app accessible in a production environment.

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      .. procedure::

         .. step:: Navigate to the Sync Configuration Screen

            To configure and enable Development Mode for your application, navigate to to
            the :guilabel:`Sync` configuration screen through the {+leftnav+} and then
            click the :guilabel:`Development Mode` tab.


         .. step:: Select a Cluster to Sync

            You can enable Development Mode sync for a single linked cluster in
            your application. Determine which cluster you want to use and then select it
            from the :guilabel:`Select Cluster To Sync` dropdown menu.

            .. figure:: /images/define-sync-rules-select-cluster.png
               :width: 750px
               :alt: The cluster selection dropdown menu.


         .. step:: Choose a Target Database

            While Development Mode is enabled, App Services maps every synced object type to its
            own collection in the linked cluster. The collections use the pluralized name
            of the object type and are located in a specific database.

            .. seealso::

               :ref:`Development Database <sync-development-database>`

            Determine which database in the linked cluster you want to contain the synced
            data and then enter it into the :guilabel:`Define a Database Name` input.

            .. figure:: /images/enable-dev-mode-database-name.png
               :width: 750px
               :alt: The database selection dropdown menu.


         .. step:: Choose a Partition Key

            The sync partition key is a field in every synced document that maps
            each document to a client-side realm. Sync rules apply at the partition level,
            so it is particularly important to consider your data model and access
            patterns. For more information on partition keys and how to choose one, see
            :ref:`Partitions <sync-partitions>`.

            Once you have decided which field to use, enter the field name into the
            :guilabel:`Choose A Partition Key` input.

            .. figure:: /images/enable-dev-mode-partition-key.png
               :width: 750px
               :alt: The partition key selection dropdown menu.


         .. step:: Turn On Development Mode

            Click :guilabel:`Turn Dev Mode On` to enable Development Mode.


         .. step:: Deploy the Updated App

            After you've enabled Development Mode, review your draft changes
            and confirm that you want to deploy them. Press the :guilabel:`Review
            Draft & Deploy` button in the banner at the top of the UI. You'll see
            a summary of your changes. Click the :guilabel:`Deploy` button.

            App Services immediately deploys a new version of your application
            where Development Mode is enabled. Client applications will automatically
            use the newest version and can immediately start to sync their object models.

   
   .. tab::
      :tabid: cli
      
      .. procedure::

         .. step:: Pull the Latest Version of Your App

            To pull a local copy of the latest version of your app, run the following:

            .. code-block:: bash

               realm-cli pull --remote="<Your App ID>"


         .. step:: Select a Cluster to Sync

            You can enable Development Mode sync for a single linked cluster in
            your application. If you have not yet linked the cluster to your application,
            follow the :ref:`Link a MongoDB Atlas Cluster <link-a-data-source>` guide to
            link it before you continue.

            Determine which cluster you want to use and then open its configuration file.
            Add the ``config.sync`` field with the following value:

            .. code-block:: json

               {
                 "config": {
                   "sync": {
                     "state": "enabled",
                     "database_name": "<Target Database Name>",
                     "partition": {
                       "key": "<Partition Key Field>",
                       "type": "<Partition Key Type>",
                       "permissions": {
                         "read": true,
                         "write": true
                       }
                     }
                   },
                   ...
                 },
                 ...
               }


         .. step:: Choose a Target Database

            While Development Mode is enabled, App Services maps every synced object type to its
            own collection in the linked cluster. The collections use the pluralized name
            of the object type and are located in a specific database.

            Determine which database in the linked cluster you want to contain the synced
            data and then specify the database name in ``config.sync.database_name``:

            .. code-block:: json
               :emphasize-lines: 5

               {
                 "config": {
                   "sync": {
                     "state": "enabled",
                     "database_name": "myDevModeDatabase",
                     "partition": {
                       "key": "<Partition Key Field>",
                       "type": "<Partition Key Type>",
                       "permissions": {
                         "read": true,
                         "write": true
                       }
                     }
                   },
                   ...
                 },
                 ...
               }


         .. step:: Choose a Partition Key

            The sync partition key is a field in every synced document that maps
            each document to a client-side realm. Sync rules apply at the partition level,
            so it's particularly important to consider your data model and access
            patterns. For more information on partition keys and how to choose one, see
            :ref:`Partitions <sync-partitions>`.

            Once you have decided which field to use, update ``config.sync.partition``
            with the partition key field name in the ``key`` field and the partition key
            type in the ``type`` field.

            .. code-block:: json
               :emphasize-lines: 7, 8

               {
                 "config": {
                   "sync": {
                     "state": "enabled",
                     "database_name": "myDevModeDatabase",
                     "partition": {
                       "key": "_partition",
                       "type": "string",
                       "permissions": {
                         "read": true,
                         "write": true
                       }
                     }
                   },
                   ...
                 },
                 ...
               }


         .. step:: Enable Development Mode

            You can turn Development Mode on and off by setting a boolean value for
            ``development_mode_enabled`` in your app's ``sync/config.json`` file. To
            enable Development Mode, set the value to ``true``:

            .. code-block:: json
               :caption: sync/config.json

               {
                 "development_mode_enabled": true
               }


         .. step:: Deploy the Updated App Configuration

            Now that you've configured Development Mode and specified that it's enabled,
            you can deploy your changes to turn it on.

            To deploy your changes, import your app configuration:

            .. code-block:: shell

               realm-cli push --remote="<Your App ID>"


.. _disable-development-mode:

Disable Development Mode
------------------------

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      .. procedure::

         .. step:: Navigate to the Sync Configuration Screen

            To configure and disable Development Mode for your application, navigate to to
            the :guilabel:`Sync` configuration screen through the {+leftnav+} and then
            click the :guilabel:`Development Mode` tab.


         .. step:: Turn Off Development Mode

            Click :guilabel:`Turn Dev Mode Off` to disable Development Mode, and then
            press the :guilabel:`Close` button on the subsequent dialogue box.


         .. step:: Deploy an Updated App Version

            After you've disabled Development Mode, review your draft changes
            and confirm that you want to deploy them. Press the :guilabel:`Review
            Draft & Deploy` button in the banner at the top of the UI. You'll see
            a summary of your changes. Click the :guilabel:`Deploy` button.

            App Services immediately deploys a new version of your application
            where Development Mode is disabled. Client applications will automatically
            use the newest version.

   
   .. tab::
      :tabid: cli
      
      .. include:: /includes/note-procedure-uses-cli-v2.rst
      
      .. procedure::

         .. step:: Pull the Latest Version of Your App

            To pull a local copy of the latest version of your app, run the following:

            .. code-block:: bash

               realm-cli pull --remote="<Your App ID>"


         .. step:: Disable Development Mode

            You can turn Development Mode on and off by setting a boolean value for
            ``development_mode_enabled`` in your app's ``sync/config.json`` file. To
            disable Development Mode, set the value to ``false``:

            .. code-block:: json
               :caption: sync/config.json

               {
                 "development_mode_enabled": false
               }


         .. step:: Deploy the Updated App Configuration

            Now that you've configured Development Mode and specified that it's disabled,
            you can deploy your changes to turn it off

            To deploy your changes, import your app configuration:

            .. code-block:: shell

               realm-cli push --remote="<Your App ID>"

