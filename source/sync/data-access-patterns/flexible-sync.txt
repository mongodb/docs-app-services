.. _flexible-sync:

=============
Flexible Sync
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

{+service+} Flexible Sync lets you define a query in the client, and 
sync only the objects that match the query. With client-side subscriptions, 
client applications can:

- Maintain queries
- React to changes
- Add, change, or delete queries

Together with :ref:`rules and permissions <sync-rules>`, Flexible Sync 
provides a powerful way to configure Sync around your business logic.

.. seealso::

   For a guide to setting up flexible sync with common permissions models, see
   :ref:`flexible-sync-permissions-guide`.

When a client makes a query, {+service-short+} searches the server-side 
data set for documents matching the query. Then, the sync engine applies 
a set of rules to determine which documents in the results set the user 
should be able to access. {+service-short+} returns only the matching 
documents where the user has read or read/write access, and assigns the 
user the appropriate permissions.

Client applications can add, update, or remove queries dynamically at 
run-time from the device.

.. include:: /includes/note-flexible-sync-prerequisite.rst

.. _queryable-fields:

Queryable Fields
----------------

When you configure Flexible Sync, you specify one or more fields 
from your :ref:`Sync Schema <sync-schema-overview>` that your client 
application can query. 

.. example::

   In a task tracker app, you might set ``assignee`` or ``owner`` 
   as queryable fields. On the client side, you can then query for tasks 
   whose ``assignee`` or ``owner`` matches the logged-in user. 

Queryable fields apply across all collections in an {+app+}'s Sync Schema.
You can use :ref:`rules and permissions 
<flexible-sync-rules-and-permissions>` to configure more granular access 
control on individual collections.

.. _flexible-sync-eligible-field-types:

Eligible Field Types
~~~~~~~~~~~~~~~~~~~~
Flexible Sync only supports top-level primitive fields with a scalar type as 
queryable fields. You can also include arrays of these primitives as queryable 
fields. Flexible Sync does not support embedded objects or arrays of 
objects as queryable fields.

.. seealso:: {+rql+} - Flexible Sync Limitations

   For information on the queries you can perform on these fields, see:
   :ref:`flexible-sync-rql-limitations`


.. _flexible-sync-reserved-field-names:

Reserved Field Names
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/reserved-field-names.rst

Performance and Storage
~~~~~~~~~~~~~~~~~~~~~~~

Queryable fields use storage on the backing Atlas cluster. The more queryable
fields you configure, the more storage you use on the backing cluster. You can
configure up to 10 queryable fields per application for Flexible Sync.

.. seealso::

   Learn more about :ref:`optimizing performance and storage when using Flexible Sync <optimizing-performance-and-storage-flexible-sync>`.

.. _get-started-flexible-sync:

Get Started with Flexible Sync
------------------------------

Define a Schema
~~~~~~~~~~~~~~~

To use Flexible Sync, create a schema for your {+app+}. The :ref:`eligible 
fields <flexible-sync-eligible-field-types>` in your schema become queryable fields
you can select when you enable Flexible Sync.

If you're not yet ready to create a schema, you can manually define queryable
fields with :ref:`Development Mode <concept-development-mode>`.

.. seealso::

   :ref:`create-schema-for-backend-realm-app`

Enable Sync
~~~~~~~~~~~

After you have defined a schema, or decided to create your data model on the 
client side and use :ref:`Development Mode <concept-development-mode>` to 
define a schema, you can enable Flexible Sync. 

During the process of enabling Sync, you select queryable fields and 
define roles that control how users can access your data. 

.. seealso::

   :ref:`enable-flexible-sync`

Select Fields to Query
^^^^^^^^^^^^^^^^^^^^^^

When you enable Flexible Sync, you can select queryable fields in two ways:

- If you have defined your schema, you can select queryable fields from 
  :ref:`eligible fields <flexible-sync-eligible-field-types>` in your schema.
- If you are using :ref:`Development Mode <concept-development-mode>`, you 
  can type a queryable field name that matches an :ref:`eligible field type 
  <flexible-sync-eligible-field-types>` in your client application.

You can configure up to 10 queryable fields per {+app+}. These 
fields apply across all of the collections in your application.

Define Roles
^^^^^^^^^^^^

When a user submits a query to the {+app+}, Sync determines which role 
applies for the user. 

Roles consist of:

- A role name
- A rule for when to apply the role 
- Read and write permissions for users with the role 

You can define multiple roles to tailor your access permissions for each
collection. Collections can have more than one role, or none at all. 

You can also create default roles, which do not apply to a specific collection.
Instead, default roles apply to any collection where you do not define custom 
roles.

.. seealso::

   :ref:`flexible-sync-rules-and-permissions`


.. _flexible-sync-query-subscription:

Create Queries in Your Client Application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

With Flexible Sync enabled, you can start creating queries from 
your client application. 

The {+service+} SDKs provide methods to create, update, and remove queries 
from the client application. The SDKs use subscriptions to maintain those 
queries on the client side. Through these subscriptions, your applications
sync objects with the backend {+app+} and can watch for and react to changes.

.. tabs-realm-sdks::

   .. tab::
      :tabid: android

      To create queries from the Android Client SDK, see the
      :ref:`Java SDK guide to Flexible Sync <java-flexible-sync>`.

   .. tab::
      :tabid: ios

      To create queries from the Swift Client SDK, see the :ref:`Swift SDK 
      guide to Flexible Sync <ios-flexible-sync>`.

   .. tab::
      :tabid: node
      
      To create queries from the Node Client SDK, see the :ref:`Node SDK 
      guide to Flexible Sync <node-flexible-sync>`.

   .. tab::
      :tabid: react-native

      To create queries from the React Native Client SDK, see the
      :ref:`React Native SDK guide to Flexible Sync <react-native-flexible-sync>`.

   .. tab::
      :tabid: dotnet

      To create queries from the .NET Client SDK, see the :ref:`.NET SDK 
      guide to Flexible Sync <dotnet-flexible-sync>`.
   
   .. tab::
      :tabid: flutter

      To create queries from the Flutter Client SDK, see the :ref:`Flutter SDK
      guide to Flexible Sync <flutter-sync>`.

.. _optimize-asymmetric-sync:

Optimize Sync with Asymmetric Sync (Optional)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Asymmetric Sync is a sync strategy that is optimized for applications 
with heavy client-side *insert-only* workloads. You enable it for one or more 
collections. It supports writing to any collection type, including an 
{+atlas-short+} time-series collection. 

.. note::

   Asymmetric Sync is a feature of Flexible Sync and cannot be enabled on apps 
   that use Partition-Based Sync.

For example, an IoT app that frequently logs sensor data has a significant 
write workload and no read workload. The device may also be offline 
for extended periods of time. Asymmetric Sync bypasses some of the processing 
required for bi-directional sync, significantly improving write speed to an 
{+atlas-short+} collection. 

Other use cases include writing immutable data, such as invoices from a retail 
app, or logging application events, neither of which requires conflict 
resolution.

You can apply Asymmetric Sync to individual collections. This means 
your app can use Asymmetric Sync to write some data, but bi-directional 
Flexible Sync on other collections. 

.. important::

   Asymmetric Sync collections are only for writing data. You cannot use 
   Flexible Sync queries against these collections. Instead, use 
   :ref:`<data-sources>`.

You configure and enable Asymmetric Sync in the :guilabel:`Advanced Options` 
section of the Sync set up page. For more information on setting up Flexible 
Sync with Asymmetric Sync, see :ref:`enable-flexible-sync`.

After you have enabled Asymmetric Sync, you implement it in the client app 
via the client SDKs.

.. TODO: add link to the js SDK

.. note:: SDK Support

   The JavaScript SDK supports Asymmetric Sync. Support in the other SDKs is 
   forthcoming.
