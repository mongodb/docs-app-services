.. _sync-permissions:
.. _sync-rules:

==========================
Sync Rules and Permissions
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Rules
-----

Atlas App Services enforces data access rules for all requests to a synced cluster.
Sync rules are dynamic :ref:`JSON expressions <expressions>` that specify a
given user's ability to view and modify synced data.

The way Sync rules work depends on whether you are using
:ref:`Partition-Based Sync <partition-based-rules-and-permissions>` or
:ref:`Flexible Sync <flexible-sync-rules-and-permissions>`.

.. important:: Non-Sync Rules
   
   This page describes data access rules for synced clusters. Non-synced cluster
   use a different rules model that sync rules override. If sync is enabled for
   a cluster, any non-sync rules defined for the cluster do not apply.
   
   If your app does not use sync, check out :ref:`MongoDB Collection Rules
   <mongodb-rules>` for more information on rules for non-synced clusters.

.. _partition-based-rules-and-permissions:

Partition-Based Rules and Permissions
-------------------------------------

Whenever a user opens a synced realm from a client app, App Services evaluates your
app's rules and determines if the user has read and write permissions for the
:ref:`partition <sync-partitions>`. Users must have read permission to sync 
and read data in a realm and must have write permission to create, modify, 
or delete objects. Write permission implies read permission, so if a user 
has write permission then they also have read permission.

Partition-Based Sync Rule Behavior
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sync rules apply to specific partitions and are coupled to your app's data model
by the partition key. Consider the following behavior when designing
your schemas to ensure that you have appropriate data access granularity and
don't accidentally leak sensitive information.

- Sync rules apply dynamically based on the user. One user may have full read &
  write access to a partition while another user has only read permissions or is
  unable to access the partition entirely. You control these permissions by
  defining :ref:`JSON expressions <expressions>`.

- Sync rules apply equally to all objects in a partition. If a user has read
  or write permission for a given partition then they can read or modify all
  synced fields of any object in the partition.

- Write permissions require read permissions, so a user with write access to a
  partition also has read access regardless of the defined read permission
  rules.

.. _partition-based-sync-permissions:

Partition-Based Sync Permissions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

App Services enforces dynamic, user-specific read and write permissions to secure the
data in each :ref:`partition <sync-partitions>`. You define permissions with
:ref:`JSON rule expressions <expressions>` that control whether or not a given
user has read or write access to the data in a given partition. App Services evaluates
a user's permissions every time they open a synced realm.

.. tip::
   
   Your rule expressions can use JSON expansions like
   :json-expansion:`%%partition` and :json-expansion:`%%user` to dynamically
   determine a user's permissions based on the context of their request.

Key Concepts
~~~~~~~~~~~~

.. _sync-read-permissions:

Read Permissions
````````````````

A user with read permissions for a given partition can view all fields of any
object in the corresponding synced realm. Read permissions do not permit a user
to modify data.

.. _sync-write-permissions:

Write Permissions
`````````````````

A user with write permissions for a given partition can modify the value of any
field of any object in the corresponding synced realm. Write permissions require
read permissions, so any user that can modify data can also view that data
before and after it's modified.

.. _sync-permission-strategies:

Permission Strategies
~~~~~~~~~~~~~~~~~~~~~

You can structure your read and write permission expressions as a set of
permission strategies that apply to your :ref:`partition strategy
<partition-strategies>`. The following strategies outline common approaches that
you might take to define sync read and write permissions for your app.

Global Permissions
``````````````````

You can define global permissions that apply to all users for all partitions.
This is, in essence, a choice to not implement user-specific permissions in
favor of universal read or write permissions that apply to all users.

To define a global read or write permission, specify a boolean value or a
:ref:`JSON expression <expressions>` that always evaluates to the same boolean
value.

.. list-table::
   :header-rows: 1
   :widths: 50 50

   * - Example
     - Description

   * - .. code-block:: json
          
          true
     
     - The expression ``true`` means that all users have the given access
       permissions for all partitions.

   * - .. code-block:: json
          
          false
     
     - The expression ``false`` means that no users have the given access
       permissions for any partitions.

   * - .. code-block:: json
          
          { "%%true": true }
     
     - This expression always evaluates to ``true``, so it's effectively the
       same as directly specifying ``true``.

Permissions for Specific Partitions
```````````````````````````````````

You can define permissions that apply to a specific partition or a groups of
partitions by explicitly specifying their partition values.

.. list-table::
   :header-rows: 1
   :widths: 50 50

   * - Example
     - Description

   * - .. code-block:: json
     
          { "%%partition": "PUBLIC" }
     
     - This expression means that all users have the given access permissions
       for data with a partition value of ``"Public"``.

   * - .. code-block:: json
     
          {
            "%%partition": {
              "$in": [
                "PUBLIC (NA)",
                "PUBLIC (EMEA)",
                "PUBLIC (APAC)"
              ]
            }
          }
     
     - This expression means that all users have the given access permissions
       for data with any of the specified partition values.

Permissions for Specific Users
``````````````````````````````

You can define permissions that apply to a specific user or a group of users by
explicitly specifying their ID values.

.. list-table::
   :header-rows: 1
   :widths: 50 50

   * - Example
     - Description

   * - .. code-block:: json
          
          { "%%user.id": "5f4863e4d49bd2191ff1e623" }
     
     - This expression means that the user with id
       ``"5f4863e4d49bd2191ff1e623"`` has the given access permissions for data
       in any partition.

   * - .. code-block:: json
          
          { 
            "%%user.id": {
              "$in": [
                "5f4863e4d49bd2191ff1e623",
                "5f48640dd49bd2191ff1e624",
                "5f486417d49bd2191ff1e625"
              ]
            }
          }
     
     - This expression means that any user with one of the specified user ID
       values has the given access permissions for data in any partition.

Permissions Based on User Data
``````````````````````````````

You can define permissions that apply to users based on specific data defined in
their :ref:`custom user data <custom-user-data>` document, metadata fields, or
other data from an authentication provider.

.. list-table::
   :header-rows: 1
   :widths: 50 50

   * - Example
     - Description

   * - .. code-block:: json
     
          { "%%user.custom_data.readPartitions" : "%%partition" }
     
     - This expression means that a user has read access to a
       partition if the partition value is listed in the ``readPartitions``
       field of their custom user data.

   * - .. code-block:: json
     
          { "%%user.data.writePartitions" : "%%partition" }
     
     - This expression means that a user has write access to a
       partition if the partition value is listed in the
       ``data.writePartitions`` field of their user object.

Function Rules
``````````````

You can define complex dynamic permissions by evaluating a :ref:`function
<functions>` that returns a boolean value. This is useful for permission schemes
that require you to access external systems or other custom logic that you
cannot express solely in JSON expressions.

.. list-table::
   :header-rows: 1
   :widths: 50 50

   * - Example
     - Description
   
   * - .. code-block:: json
          
          {
            "%%true": {
              "%function": {
                "name": "canReadPartition",
                "arguments": ["%%partition"]
              }
            }
          }
       
       .. code-block:: javascript
          
          // canReadPartition
          exports = async (partition) => {
            const cluster = context.services.get("mongodb-atlas");
            const permissions = cluster
              .db("myApp")
              .collection("permissions");
            const { canRead } = await permissions.findOne({ partition });
            return canRead.includes(context.user.id);
          }
     
     - This expression calls the ``canReadPartition`` function and
       passes in the partition value as its first and only argument. The
       function looks up the user's permissions for the partition from a MongoDB
       collection and then returns a boolean that indicates if the user can read
       data in the requested partition.

.. _flexible-sync-rules-and-permissions:
.. _flexible-sync-roles:

Session Roles
-------------

A **session role** determines which permissions apply for the duration
of a flexible sync session.

.. seealso::

   For a guide to setting up flexible sync with common permissions
   models, see :ref:`flexible-sync-permissions-guide`.

When a user begins a session by opening a synced realm, session roles
are evaluated and applied to the user for each synced object type. A
user may only have one role for each type, so session roles apply in a
priority order. If no session role applies for an object type, the user
cannot read or write any objects of that type.

A session role stays assigned for the duration of the session. If
something relevant to a user's session roles changes in the middle of
the user's session, the user is not assigned an updated role until they
start a new session. For example, if the user's metadata or the role's
"apply when" expression changes, the user continues to use their
existing session role until the next time they start the app.

.. tip::
   
   You can think of session roles as a way to group read and write
   expressions to organize your code. Most apps only need one (default)
   session role with per-document logic defined in the session role's
   read and write expressions.

.. _type-specific-roles:
.. _default-roles:

Type-Specific and Default Roles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Roles may be either *type-specific roles* that apply to a single object
type that you identify by name or *default roles* that apply to all
objects regardless of their type. You use :ref:`expressions
<expressions>` to determine when a role applies and to define dynamic
field-level permissions for a specific role.

You can use type-specific roles alongside default roles. This example shows 
applying a custom rule to the ``Employees`` collection. This app also 
links to a ``Store`` collection that is not listed in the configuration, 
and has no custom type-specific rule, so it evaluates to the default role.

Sync attempts to find a matching session role by traversing the session
roles in descending order. List the most specific custom session roles
first, getting gradually more general, so the user "falls through" to
the correct session role. If no type-specific role applies, and you 
have defined a default role that does apply, the user gets the default role 
permissions.

.. code-block:: json

   {
    "rules": {
      "Employees": [
        {
          "name": "employeeWriteSelf",
          "applyWhen": {},
          "read": {},
          "write": {
            "employee_id": "%%user.id"
          }
        }
      ]
    },
    "defaultRoles": [
      {
        "name": "admin",
        "applyWhen": {
          "%%user.custom_data.isGlobalAdmin": true
        },
        "read": {},
        "write": {}
      },
      {
        "name": "owner",
        "applyWhen": {
          "%%true": {
            "%function": {
              "name": "isOwner",
              "arguments": [
                "%%user.id"
              ]
            }
          }
        },
        "read": {},
        "write": {
          "owner_id": "%%user.custom_data.ownerId"
        }
      },
      {
        "name": "shoppers",
        "applyWhen": {},
        "read": {},
        "write": false
      }
    ]
  }

Document-Level Permissions
~~~~~~~~~~~~~~~~~~~~~~~~~~

You can define read and write permissions for a role that apply to an
entire object. A user with document-level read permission for an object
type can access all fields in an object of that type. Similarly,
document-level write permissions allow a user to modify all fields.

If a user does not have read permission for an object type, no objects
of that type are included in sync query results.

Field-Level Permissions
~~~~~~~~~~~~~~~~~~~~~~~

When you need more granularity than document-level permissions, you can
configure field-level permissions that determine whether a user can read
or write individual fields of an object type. You can define permissions
for specific fields as well as a set of permissions that apply to fields
without specific permissions.

Expressions
~~~~~~~~~~~

Expressions in a role can only refer to the :ref:`queryable fields
<queryable-fields>` of your data model.

You can use :ref:`expansions <expansions>` to define dynamic "apply
when" expressions and field-level permissions. Expansions let you refer
to :ref:`user metadata <configure-user-metadata-on-the-backend>`,
including :ref:`custom user data <custom-user-data>`, and can call
functions to handle complex logic. However, because session roles are
determined at the start of a session -- that is, before any query for
specific documents -- you can't refer to a document or its field values
to determine whether a session role applies.

The following table describes support for expression expansions in
flexible sync roles:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Expansion
     - Can Use in "Apply When"?
     - Can Use in Read & Write Rules?
   
   * - :json-expansion:`%%true`, :json-expansion:`%%false`
     - Yes
     - Yes
   
   * - :json-expansion:`%%values`, :json-expansion:`%%environment`
     - Yes
     - Yes with an :ref:`important caveat <flex-sync-expansions-caveat>`
   
   * - :json-expansion:`%%request`
     - No
     - No
   
   * - :json-expansion:`%%user`
     - Yes
     - Yes with an :ref:`important caveat <flex-sync-expansions-caveat>`
   
   * - :json-expansion:`%%this`, :json-expansion:`%%prev`, :json-expansion:`%%root`,  :json-expansion:`%%prevRoot`
     - No. These expansions refer to the document. App Services evaluates "apply when" expressions at session start, so there's no document to evaluate.
     - No. These expansions might access non-queryable fields of the document, which is not possible.
   
   * - :json-expansion:`%%partition`
     - No
     - No
   
   * - :json-operator:`%stringToOid`, :json-operator:`%oidToString`
     - Yes
     - No
   
   * - :json-operator:`%function`
     - Yes
     - No. App Services expands the expansions at the start of the session, so the function would not operate on a per-document basis.
   
   * - :json-operator:`$exists`
     - Yes
     - Yes
   
   * - :json-operator:`$in`, :json-operator:`$nin`
     - Yes
     - Yes. However, note that you cannot currently have an array field as a queryable field on a document.
   
   * - :json-operator:`$eq`, :json-operator:`$ne`, :json-operator:`$gt`, :json-operator:`$gte`, :json-operator:`$lt`, :json-operator:`$lte`  
     - Yes
     - Yes

.. _flex-sync-expansions-caveat:

.. important::

   App Services causes a :ref:`client reset <client-resets>` if anything about the
   session role changed since the previous session.

   At the start of a session, App Services expands all expansions
   in the "apply when", read, and write expressions and stores the
   result. This has the following implications:

   - If the value changes during a session, App Services continues
     to use the value as it was at the time of session start.

   - On the next session, if the value is different from what it was at
     the start of this session, App Services causes a client
     reset.
   
   - You cannot use the :json-operator:`%function` operator in read and
     write rules. Functions would not operate on a per-document basis.
   
   - You cannot store permissions information (such as "which document
     IDs may this user access?") in the user object.

Role Configuration Files
~~~~~~~~~~~~~~~~~~~~~~~~

You use JSON configuration files to define session roles. For more
information, see :ref:`appconfig-sync`.

.. example::

   The following role configuration describes a team administrator:

   .. code-block:: json

    {
      "name": "TeamAdmin",
      "applyWhen": { "%%user.custom_data.isAdmin": true },
      "read": {},
      "write": { "teamId": "%%user.custom_data.teamId" },
      "fields": {
        "address": {
          "fields": {
            "zipCode": {
              "write": false,
              "read": true
            }
          },
          "additional_fields": {
            "write": true
          }
        },
        "name": {}
      },
      "additional_fields": {
        "write": false,
        "read": false
      }
    }
  
   The following table explains the effect of each part of the Role:

   .. list-table::
      :header-rows: 1
      :widths: 50 50

      * - Role JSON
        - Effect

      * - ``"read": {}``
        - May access any document for reading.

      * - ``"write": { "teamId": "%%user.custom_data.teamId" }``
        - May access a document for writing if the document's ``teamId`` field
          equals the user's custom data ``teamId``. This requires ``teamId`` to
          be declared as a queryable field in the Sync configuration.

      * - .. code-block:: json

            "fields": {
              "address": {
                "fields": {
                  "zipCode": {
                    "write": false,
                    "read": true
                  }
                },
                "additional_fields": {
                  "write": true
                }
              },
              "name": {}
            },

        - May write to any field of the ``address`` embedded object except
          ``zipCode``. May also write to the ``name`` field.
      
      * - .. code-block:: json

            "additional_fields": {
              "write": false,
              "read": false
            }

        - May not read or write any other fields despite having document-level
          access to the document.
