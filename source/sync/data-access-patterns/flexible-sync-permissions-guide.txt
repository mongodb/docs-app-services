.. _flexible-sync-permissions-guide:

===============================
Flexible Sync Permissions Guide
===============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page shows how to set up your flexible sync app's permissions for the
following common use cases:

- :ref:`read-write-own-data`
- :ref:`write-own-data-read-all-data`
- :ref:`admin-privileges`
- :ref:`dynamic-collaboration`
- :ref:`tiered-privileges`

These assume you have already created a Realm app.

.. seealso::

   - :ref:`create-realm-apps`
   - :ref:`flexible-sync-rules-and-permissions`

.. _read-write-own-data:

Read & Write Own Data
---------------------

In this case, users may read or write their own data, but not other users' data. 
Consider a notes app where the user wants to persist and share notes across 
their own devices but keep them  private to their user account.

This strategy permits a user to create and edit a document if and only if that
document's ``owner_id`` field equals the user's ID.

To set up the "Read & Write Own Data" strategy, follow the general steps:

.. include:: /includes/use-flex-sync-templates

Now you need to configure the permissions. Under :guilabel:`Define Permissions`, 
use the template dropdown to select the template called "Users can only 
read and write their own data".

This populates the rule expression box with the following:

.. code-block:: json
    :emphasize-lines: 6-7

    {
      "defaultRoles": [
        {
          "name": "owner-read-write", 
          "applyWhen": {},
          "read": { "owner_id": "%%user.id" },
          "write": { "owner_id": "%%user.id" }
        }
      ]  
    }

Note that the "read" and "write" expressions use the ``owner_id`` field we
marked as "queryable" above. It also uses the ``%%user`` "expansion" to read
the requesting user's id. Realm replaces (or "expands") the expansion at
evaluation time with the corresponding value -- in this case, the user object.

To finish, skip :guilabel:`Advanced Configuration`, and then click 
:guilabel:`Save Changes` to enable Sync with these permissions.


.. _write-own-data-read-all-data:

Write Own Data, Read All Data
-----------------------------

In this case, users can read all data, but write only their own data. Consider a
recipe app where users can read all recipes and add new recipes. The recipes
they add can be viewed by everyone using the app. Users may update or delete
only the recipes they contributed.

To set up the "Write Own Data, Read All Data" strategy, follow these general 
steps:

.. include:: /includes/use-flex-sync-templates

Now you need to configure the permissions. Under :guilabel:`Define Permissions`, 
use the template dropdown to select the template called "Users can read all data 
but only write their own data".

This populates the rule expression box with the following:

.. code-block:: json
    :emphasize-lines: 6-7

    {
      "defaultRoles": [
        {
          "name": "owner-write", 
          "applyWhen": {},
          "read": true,
          "write": { "owner_id": "%%user.id" }
        }    
      ]  
    }

Note that the "read" expression is set to ``true``, indicating that no matter
which user is authenticated, they can access all of the data. The "write"
expression uses the ``owner_id`` field we marked as "queryable" above and uses
the ``%%user`` "expansion" to match against the requesting user's id. Realm
replaces (or "expands") the expansion at evaluation time with the
corresponding value -- in this case, the user object.

To finish, skip :guilabel:`Advanced Configuration`, and then click 
:guilabel:`Save Changes` to enable Sync with these permissions.

.. _admin-privileges:

Administrator Privileges
------------------------

In this permission strategy, users with a specific "administrator" role can read
and write any document. Users who do not have the specified role can only read
and write their own data. To make this strategy work, you first need to define
which users have administrator permissions.

MongoDB Realm has a feature called Custom User Data that allows you to associate
arbitrary data with each user. Using this feature, you can create a document
with a field that indicates whether the user has administrative privileges.
While there are many ways to set this up, one approach is to add a boolean
property called ``isGlobalAdmin``, which is set to ``true`` for those users with
the elevated permissions. Another is to create a string field called ``role``,
in which one of the expected values might be "admin". 

In the following example, the custom user object we'll create has an ``_id``
field, which corresponds to the user's ID, and 3 additional fields:
``firstName``, ``lastName``, and ``isGlobalAdmin``:

.. code-block:: json

   {
      "_id" : "1234",
      "firstName": "Lily",
      "lastName": "Realmster",
      "isGlobalAdmin": true
   }

.. include:: /includes/note-custom-user-data-and-permissions.rst

Enable & Configure Custom User Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

{+service+} stores MongoDB documents that correspond to custom user data
in a linked MongoDB Atlas cluster. When you configure custom user data for your 
application, you specify the cluster, database, collection, and finally a 
User ID field, which maps a custom user data document to an 
authenticated user's ID.

.. include:: /includes/define-custom-user-data.rst

.. seealso::

   :ref:`custom-user-data`

Set Up Admin Privileges
~~~~~~~~~~~~~~~~~~~~~~~
After you have custom user data enabled, you can implement the Admin Privileges 
strategy. To do so, follow these general steps:

.. include:: /includes/use-flex-sync-templates

Now you need to configure the permissions. Under :guilabel:`Define Permissions`,
use the template dropdown to select the template called "Users can read and 
write their own data, admins can read and write all data".

This populates the rule expression box with the following:

.. code-block:: json

   {
     "defaultRoles": [
       {
         "name": "admin", 
         "applyWhen": { 
            "%%user.custom_data.isGlobalAdmin": true 
         },
         "read": true,
         "write": true
       },
       {
         "name": "user", 
         "applyWhen": {},
         "read": { "owner_id": "%%user.id" },
         "write": { "owner_id": "%%user.id" }
       }
     ]  
   }

.. note:: Change the default settings

   The generated expression has two objects in the "defaultRoles" 
   array. The first defines the permissions for an administrator. Note that the 
   auto-generated expression assumes there is a boolean field in the custom user 
   data document named ``isGlobalAdmin``. Depending on how you defined your custom 
   user data document, you may need to change this. 
   
   The second section of the "defaultRoles" array defines the rules for all other 
   users. The default is to restrict user access to read and write only their own 
   data. You can change either or both of these fields to ``true``, enabling 
   users to read and/or write all data. See the previous sections to learn more 
   about these strategies.

To finish, skip :guilabel:`Advanced Configuration`, and then click 
:guilabel:`Save Changes` to enable Sync with these permissions.

.. _dynamic-collaboration:

Dynamic Collaboration
---------------------

In the Dynamic Collaboration strategy, users can create documents and add other
users as editors of that document.

Like the Read & Write Own Data strategy, this strategy permits a user to create
and edit a document if that document's ``owner_id`` field equals the user's ID.
Additionally, a user may edit the document if the document's ``collaborators``
array field contains their ID.

Set Up Permissions
~~~~~~~~~~~~~~~~~~

To implement this strategy, follow these general steps:

.. include:: /includes/use-flex-sync-templates

In the :guilabel:`Select Queryable Fields` field, type in ``collaborators`` as 
well. This will be the field that stores the IDs of users who may also read and 
write the document.

Now you need to configure the permissions. Under :guilabel:`Define Permissions`, 
use the template dropdown to select the "Custom (start from scratch)". Paste the 
following into the rule expression box: 

.. code-block:: json

    {
      "rules": {},
      "defaultRoles": [
        {
          "name": "read-only",
          "applyWhen": {},
          "write": {
            "$or": [
              {
                "owner_id": "%%user.id"
              },
              {
                "collaborators": "%%user.id"
              }
            ]
          }
        }
      ]
    }
  
Take a look at the "write" expression. ``$or`` takes an array of options. We
have two possible conditions where a user may write the document:

- The ``owner_id`` field of the document equals the user's ID
- The ``collaborators`` array field of the document contains the user's ID.

Generally speaking, when a user is granted write permission, that user
automatically gets read permission. Therefore, we omitted the "read"
expression as it would be redundant in this case.


Adding a Collaborator
~~~~~~~~~~~~~~~~~~~~~

A user can grant write access on their document to another user by adding that
user's ID to the ``collaborators`` array field on their document. This can be
done on the client side.

Security
~~~~~~~~

We don't recommend using this model for highly sensitive data.

This model uses the flexible sync permissions system to keep documents private
between the document creator and the collaborators they add to the document.

However, if a user has write access to a document, they may write to any field
of the document. Consequently, this strategy **allows collaborators to add other
collaborators**. It would also allow a collaborator to edit the ``owner_id``
field. Finer control of permissions are not possible without field-level
permissions, which are not currently available.

User Search
~~~~~~~~~~~

How exactly to get the other user's ID depends on the details of your app. For
example, when a user wants to add another user to a document, you might have a
search box that accepts an email address. If the given email address corresponds
to another user, the client can add that user's ID to the document's
``collaborators`` array.

Realm has no built-in way to search users. Generally, the flow for searching
users is as follows:

- Set up an authentication trigger to create a user document when a user
  registers. The user document contains information you'll use to look up later,
  such as the user's email address.
- Create a function that queries the user data collection for a user.
- Call the function from the client side when the user wants to find another user.

To create an authentication trigger, follow these steps:

.. include:: /includes/create-auth-trigger.rst

Next, create a system function called ``findUser``:

.. include:: /includes/create-a-system-function.rst

In the :guilabel:`Function Editor`, paste the following code and save:

.. code-block:: javascript

   exports = async function(email) { 
     // Access the mongodb service for custom user data:
     const collection = context.services.get("custom-user-data")
       .db("Item").collection("User");
     const filter = {
       email,
     };
     // Search for the user by email
     const result = await collection.findOne(filter);
     // Return corresponding user id or null
     return result != null ? result._id : null;
   };

From your client, you can now call this function. The function's only argument
is an email address string. If the email corresponds to a user, the function
returns the user's ID. Otherwise, it returns null.

.. _tiered-privileges:

Tiered Privileges
-----------------

In this permission strategy, we will introduce **roles** as well as rules. Their 
are two roles: **a team member** and **a team administrator**. The rules are as 
follows:

- Each user is a member of a team. 
- A user can read and write their own documents.
- All members of the team can read all documents created by team members. 
- Each team has a team administrator, who has read & write permissions on every 
  team document.

To make this work, we need to do the following:

- Enable custom user data
- Create a trigger function to create a new custom user data object for each 
  new user
- Create a function to add a user to a team
- Define the Sync permissions

.. include:: /includes/note-custom-user-data-and-permissions.rst

Enable & Configure Custom User Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/define-custom-user-data.rst

Create Authentication Trigger Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We need to create a authentication trigger function that creates a custom user 
object when a user authenticates for the first time. To do so, follow these steps:  

.. include:: /includes/create-auth-trigger.rst


Create joinTeam Function
~~~~~~~~~~~~~~~~~~~~~~~~~

We now need a function that adds a user to a team. Note that this function 
will run under System authentication and writes to the custom user data. It 
does not perform an upsert because the user custom data was created when the user 
successfully authenticated for the first time.

To create the function, follow these steps:

1. Log in to the Realm UI, and then click :guilabel:`Functions` in the 
   left hand panel.

#. Click the :guilabel:`Create New Function` button.

#. Specify the following values:

   - :guilabel:`Name`: "joinTeam"
   
   - :guilabel:`Authentication`: "System"
  
#. Switch to the :guilabel:`Function Editor` tab and replace the 
   placeholder text with the following code: 

   .. code-block:: json

      exports = async function(userId, teamName) {
        var collection = context.services.get("mongodb-atlas")
          .db("Item").collection("User");

        const filter = { _id: userId };
        const update = { $set: { team: teamName }};
        const options = { upsert: false };

        let result = await collection.updateOne(filter, update, options);
        return result;
      };


Define Sync Permissions
~~~~~~~~~~~~~~~~~~~~~~~
The following {+sync-short+} permissions specify two roles:

- **teamAdmin** applies only when the user's custom data has 
  ``isTeamAdmin: true``. If so, the user can read and write all documents where 
  the document's ``team`` value matches the user's ``team`` value.
- **teamMember** applies to every user. The user can write their own 
  documents and read all documents where the document's ``team`` value matches 
  the user's ``team`` value.

.. code-block:: json

   {
      "rules": {},
      "defaultRoles": [
      {
         "name": "admin",
         "applyWhen": {
            "%%user.custom_data.isTeamAdmin": true
         },
         "read": {
            "team": "%%user.custom_data.team"
         },
         "write": {
            "team": "%%user.custom_data.team"
         }
      },
      {
         "name": "user",
         "applyWhen": {},
         "read": {
            "team": "%%user.custom_data.team"
         },
         "write": {
            "owner_id": "%%user.id"
         }
      }]
   }


.. note:: Take it Further

   This strategy can be expanded to support a "globalAdmin" role. The global 
   admin would have read & read permissions on any doc created in any team. 

.. seealso:: Authentication Triggers

   - :ref:`<authentication-triggers>`

   - :ref:`<custom-user-data>`

