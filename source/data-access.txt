.. _client-data-access:

============================
Query Atlas from Client Apps
============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

TODO: come up with some code examples for this

- [ ] in the clientside query section, see if can borrow from the SDKs
- [ ] also look into if should have some actual examples of config or querying.
  right now this page is pretty abstract.
- [ ] also add this page to the TOC somewhere

TODO: end

You can query data in MongoDB Atlas from client applications using standard
MongoDB query language syntax with **MongoDB Data Access** in the Realm SDKs.

The MongoDB Data Access secures data with role-based App Services rules, schemas,
and filters. These features let construct complex client-side queries
while your data remains secure on the server.

Realm SDK Support
-----------------

The following Realm SDKs support MongoDB Data Access:

- :ref:`Java SDK <java-intro>`
- :ref:`.NET SDK <dotnet-intro>`
- :ref:`Node.js SDK <node-intro>`
- :ref:`React Native SDK <react-native-intro>`
- :ref:`Swift SDK <ios-intro>`
- :ref:`Web SDK <web-intro>`

MongoDB Data Access **is not** supported in these Realm SDKs:

- C++ SDK
- Flutter SDK
- Kotlin SDK

When to Use MongoDB Data Access
-------------------------------

Some general scenarios when you might want to use MongoDB Data Access in an application:

- You want to use an API like the MongoDB drivers
- You want to perform aggregations
- You want to dynamically construct queries from the client device.

You might want to use MongoDB Data Access **instead of** :ref:`Atlas Device Sync <sync>`
in an application in these scenarios:

- You are querying documents that are not or cannot be modeled in Realm Database.
- A non-Realm service generates collections that you want to access.
- You do not want to persist data locally.
- You are using the Realm Web SDK, which does not support Realm Database or Device Sync.

Limited Server-Side Use
~~~~~~~~~~~~~~~~~~~~~~~

MongoDB Data Access is intended for client-side use.
You should not use the Realm SDKs' Data Access to support significant server-side workloads.

In server-side environments, use the :ref:`Atlas Data API <data-api>` or a MongoDB Driver.
If you would like to apply App Services Rules to Driver operations,
you can use the :ref:`App Services Wire Protocol <wire-protocol>`.

Set Up
------

To use MongoDB Data Access from a Realm SDK, you must perform the following set up.

.. procedure::

   .. step:: Create App Services App

      Create an App Services App. To learn more about App creation,
      refer to :ref:`Create an App <create-a-realm-app>`.

   .. step:: Add Authentication Provider

      Add at least one authentication provider to the App. All MongoDB Data Access
      queries run in the context of an authenticated user. To learn more about
      enabling user authentication, refer to :ref:`authentication-providers`.

   .. step:: Add Rules to a Collection

      To secure your client-side queries, you must add App Services Rules
      to any collections that you use with MongoDB Data Access. To learn how to
      add rules to collections, refer to :ref:`Define Roles & Permissions
      <define-roles-and-permissions>`.

   .. step:: Add Schema and Filters to Collection (Optional)

      In addition to rules, you can also add a schema and filters to collections
      that you query with MongoDB Data Access.

      :ref:`Schemas <schemas>` define your App's data model and validate documents
      against it. Use filters to ensure that the clients only write data matching
      the schema to the database.

      :ref:`Filters <filters>` modify MongoDB queries before they are sent to
      the database so that queries only return a subset of results. For example,
      you could define a filter that modifies queries so that a user can only
      access data that they've written.

      While schemas and filters are not necessary to use MongoDB Data Access,
      you should add them to most production use cases.

Query from Client Apps
----------------------

For documentation on how to query MongoDB from the Realm SDKs,
refer to the Realm MongoDB Data Access documentation:

- :ref:`java-mongodb-data-access`
- :ref:`dotnet-mongodb-data-access`
- :ref:`node-mongodb-data-access`
- :ref:`react-native-mongodb-data-access`
- :ref:`ios-mongodb-data-access`
- :ref:`web-mongodb-data-access`

.. note:: Unsupported Realm SDKs

   The Realm Flutter SDK and Kotlin SDK do not yet support MongoDB Data Access.
